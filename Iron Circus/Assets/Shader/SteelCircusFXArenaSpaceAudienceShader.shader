Shader "SteelCircus/FX/ArenaSpaceAudienceShader" {
	Properties {
		_Color ("Color", Vector) = (1,1,1,1)
		[NoScaleOffset] _TintMaskTex ("Tint and Mask (RGBA)", 2D) = "white" {}
		_MainTex ("Body Albedo (RGB)", 2D) = "white" {}
		[NoScaleOffset] _MainTexLayer2 ("Layer 2 Albedo (RGB)", 2D) = "white" {}
		[NoScaleOffset] _MainTexHead ("Head Body Albedo (RGB)", 2D) = "white" {}
		_Layer2Displacement ("Layer 2 Y Displacement", Float) = -0.015
		_HeadDisplacement ("Head Y Displacement", Float) = -0.03
		[NoScaleOffset] _NormalMap ("Body Normal Map", 2D) = "bump" {}
		[NoScaleOffset] _NormalMapHead ("Head Normal Map", 2D) = "bump" {}
		_DispMainTex ("Displacement: Main (Horizontal)", 2D) = "white" {}
		[NoScaleOffset] _DispVerticalTex ("Displacement: Vertical", 2D) = "white" {}
		_DispAmp ("Displacement: Amplitude", Range(0, 0.2)) = 0.1
		_DispAnimSpeedMain ("Displacement: Animation Speed, Main", Float) = 2
		_DispAnimSpeedVertical ("Displacement: Animation Speed, Vertical", Float) = 2
		_DispAnimSpeedScale ("Displacement: Animation Speed, Global Scale", Float) = 1
		_DispOffsetLayer2 ("Displacement: Phase Offset Layer 2", Range(0, 1)) = 0.1
		_DispOffsetBody ("Displacement: Phase Offset Body", Range(0, 1)) = 0.1
		[Gamma] _Specular ("Specular", Vector) = (0,0,0,0)
		_Glossiness ("Smoothness", Range(0, 1)) = 0.5
		[NoScaleOffset] _Emission ("Emission", 2D) = "white" {}
		[NoScaleOffset] _EmissionLight ("Emission Light Dir (RG = dir, B = intensity)", 2D) = "white" {}
		[NoScaleOffset] _EmissionFade ("EmissionFade", 2D) = "white" {}
		_EmissionFadeSpeed ("Emission Fade: Scroll Speed", Float) = 2
		_EmissionScale ("Emission Scale", Float) = 0
		_EmissionLightScale ("Emission Light Scale", Float) = 0
		_EmissionLightPow ("Emission Light BRDF Pow", Float) = 1
		_TransparencyLM ("Transmissive Texture (Lightmapping, leave white)", 2D) = "white" {}
	}
	SubShader {
		LOD 200
		Tags { "DisableBatching" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "DisableBatching" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 64759
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.yzx;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat7.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat7.z;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat7.x;
					    vs_TEXCOORD3.x = u_xlat7.y;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat2, u_xlat2);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat4 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat4;
					    u_xlat19 = dot(u_xlat4, u_xlat4);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.zxy;
					    u_xlat5.xyz = u_xlat2.yzx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.zxy * u_xlat2.zxy + (-u_xlat5.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * in_TANGENT0.www;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat4.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat4;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat12.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat0.xy = u_xlat12.xx * u_xlat0.xy;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat1.yz = u_xlat12.xx * u_xlat1.xy;
					    u_xlat12.x = u_xlat0.x * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat0.y + (-u_xlat12.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat12.xy = u_xlat1.xy / u_xlat12.xx;
					    u_xlat1.xw = (-u_xlat12.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat7.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat7.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat12.xy;
					    u_xlat0.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat6.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat13.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat13.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat13.xy;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.yzx;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat7.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat7.z;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat7.x;
					    vs_TEXCOORD3.x = u_xlat7.y;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat2, u_xlat2);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat4 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat4;
					    u_xlat19 = dot(u_xlat4, u_xlat4);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.zxy;
					    u_xlat5.xyz = u_xlat2.yzx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.zxy * u_xlat2.zxy + (-u_xlat5.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * in_TANGENT0.www;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat4.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat4;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat12.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat0.xy = u_xlat12.xx * u_xlat0.xy;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat1.yz = u_xlat12.xx * u_xlat1.xy;
					    u_xlat12.x = u_xlat0.x * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat0.y + (-u_xlat12.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat12.xy = u_xlat1.xy / u_xlat12.xx;
					    u_xlat1.xw = (-u_xlat12.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat7.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat7.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat12.xy;
					    u_xlat0.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat6.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat13.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat13.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat13.xy;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.yzx;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat7.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat7.z;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat7.x;
					    vs_TEXCOORD3.x = u_xlat7.y;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat2, u_xlat2);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat4 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat4;
					    u_xlat19 = dot(u_xlat4, u_xlat4);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.zxy;
					    u_xlat5.xyz = u_xlat2.yzx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.zxy * u_xlat2.zxy + (-u_xlat5.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * in_TANGENT0.www;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat4.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat4;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat12.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat0.xy = u_xlat12.xx * u_xlat0.xy;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat1.yz = u_xlat12.xx * u_xlat1.xy;
					    u_xlat12.x = u_xlat0.x * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat0.y + (-u_xlat12.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat12.xy = u_xlat1.xy / u_xlat12.xx;
					    u_xlat1.xw = (-u_xlat12.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat7.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat7.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat12.xy;
					    u_xlat0.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat6.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat13.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat13.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat13.xy;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat1;
					    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.xxx;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat20 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat2.x = dot(u_xlat1, u_xlat1);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat20 = dot(u_xlat2, u_xlat2);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.zxy;
					    u_xlat4.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat5.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat5.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.yz = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat18 = u_xlat2.x * u_xlat1.z;
					    u_xlat18 = u_xlat1.y * u_xlat2.y + (-u_xlat18);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat18);
					    u_xlat14.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat18 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat1.yz;
					    u_xlat18 = dot(u_xlat7.xy, u_xlat2.xy);
					    u_xlat18 = abs(u_xlat18) + -0.850000024;
					    u_xlat18 = u_xlat18 * 6.66666794;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    vs_TEXCOORD4.xy = vec2(u_xlat18) * u_xlat14.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat7.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat7.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat4.y = 0.0;
					    u_xlat4.x = u_xlat7.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat7.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat2.xy + u_xlat4.xy;
					    u_xlat14.x = u_xlat4.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD6.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat14.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat14.xy;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat3.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat1;
					    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.xxx;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat20 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat2.x = dot(u_xlat1, u_xlat1);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat20 = dot(u_xlat2, u_xlat2);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.zxy;
					    u_xlat4.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat5.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat5.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.yz = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat18 = u_xlat2.x * u_xlat1.z;
					    u_xlat18 = u_xlat1.y * u_xlat2.y + (-u_xlat18);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat18);
					    u_xlat14.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat18 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat1.yz;
					    u_xlat18 = dot(u_xlat7.xy, u_xlat2.xy);
					    u_xlat18 = abs(u_xlat18) + -0.850000024;
					    u_xlat18 = u_xlat18 * 6.66666794;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    vs_TEXCOORD4.xy = vec2(u_xlat18) * u_xlat14.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat7.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat7.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat4.y = 0.0;
					    u_xlat4.x = u_xlat7.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat7.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat2.xy + u_xlat4.xy;
					    u_xlat14.x = u_xlat4.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD6.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat14.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat14.xy;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat3.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat1;
					    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.xxx;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat20 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat2.x = dot(u_xlat1, u_xlat1);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat20 = dot(u_xlat2, u_xlat2);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.zxy;
					    u_xlat4.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat5.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat5.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.yz = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat18 = u_xlat2.x * u_xlat1.z;
					    u_xlat18 = u_xlat1.y * u_xlat2.y + (-u_xlat18);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat18);
					    u_xlat14.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat18 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat1.yz;
					    u_xlat18 = dot(u_xlat7.xy, u_xlat2.xy);
					    u_xlat18 = abs(u_xlat18) + -0.850000024;
					    u_xlat18 = u_xlat18 * 6.66666794;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    vs_TEXCOORD4.xy = vec2(u_xlat18) * u_xlat14.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat7.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat7.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat4.y = 0.0;
					    u_xlat4.x = u_xlat7.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat7.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat2.xy + u_xlat4.xy;
					    u_xlat14.x = u_xlat4.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD6.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat14.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat14.xy;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat3.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out float vs_TEXCOORD8;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out float vs_TEXCOORD8;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out float vs_TEXCOORD8;
					layout(location = 8) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					layout(location = 9) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.yzx;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat7.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat7.z;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat7.x;
					    vs_TEXCOORD3.x = u_xlat7.y;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat2, u_xlat2);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat4 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat4;
					    u_xlat19 = dot(u_xlat4, u_xlat4);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.zxy;
					    u_xlat5.xyz = u_xlat2.yzx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.zxy * u_xlat2.zxy + (-u_xlat5.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * in_TANGENT0.www;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat4.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat4;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat12.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat0.xy = u_xlat12.xx * u_xlat0.xy;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat1.yz = u_xlat12.xx * u_xlat1.xy;
					    u_xlat12.x = u_xlat0.x * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat0.y + (-u_xlat12.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat12.xy = u_xlat1.xy / u_xlat12.xx;
					    u_xlat1.xw = (-u_xlat12.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat7.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat7.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat12.xy;
					    u_xlat0.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat6.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat13.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat13.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat13.xy;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					layout(location = 9) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.yzx;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat7.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat7.z;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat7.x;
					    vs_TEXCOORD3.x = u_xlat7.y;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat2, u_xlat2);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat4 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat4;
					    u_xlat19 = dot(u_xlat4, u_xlat4);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.zxy;
					    u_xlat5.xyz = u_xlat2.yzx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.zxy * u_xlat2.zxy + (-u_xlat5.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * in_TANGENT0.www;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat4.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat4;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat12.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat0.xy = u_xlat12.xx * u_xlat0.xy;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat1.yz = u_xlat12.xx * u_xlat1.xy;
					    u_xlat12.x = u_xlat0.x * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat0.y + (-u_xlat12.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat12.xy = u_xlat1.xy / u_xlat12.xx;
					    u_xlat1.xw = (-u_xlat12.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat7.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat7.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat12.xy;
					    u_xlat0.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat6.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat13.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat13.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat13.xy;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					layout(location = 9) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.yzx;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat7.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat7.z;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat7.x;
					    vs_TEXCOORD3.x = u_xlat7.y;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat2, u_xlat2);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat4 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat4;
					    u_xlat19 = dot(u_xlat4, u_xlat4);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.zxy;
					    u_xlat5.xyz = u_xlat2.yzx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.zxy * u_xlat2.zxy + (-u_xlat5.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * in_TANGENT0.www;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat4.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat4;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat12.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat0.xy = u_xlat12.xx * u_xlat0.xy;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat1.yz = u_xlat12.xx * u_xlat1.xy;
					    u_xlat12.x = u_xlat0.x * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat0.y + (-u_xlat12.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat12.xy = u_xlat1.xy / u_xlat12.xx;
					    u_xlat1.xw = (-u_xlat12.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat7.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat7.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat12.xy;
					    u_xlat0.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat6.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat13.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat13.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat13.xy;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					UNITY_BINDING(4) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 4) in  vec4 in_TEXCOORD1;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD4.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD6.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    vs_TEXCOORD7.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD7.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					layout(location = 9) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat1;
					    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.xxx;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat20 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat2.x = dot(u_xlat1, u_xlat1);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat20 = dot(u_xlat2, u_xlat2);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.zxy;
					    u_xlat4.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat5.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat5.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.yz = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat18 = u_xlat2.x * u_xlat1.z;
					    u_xlat18 = u_xlat1.y * u_xlat2.y + (-u_xlat18);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat18);
					    u_xlat14.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat18 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat1.yz;
					    u_xlat18 = dot(u_xlat7.xy, u_xlat2.xy);
					    u_xlat18 = abs(u_xlat18) + -0.850000024;
					    u_xlat18 = u_xlat18 * 6.66666794;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    vs_TEXCOORD4.xy = vec2(u_xlat18) * u_xlat14.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat7.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat7.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat4.y = 0.0;
					    u_xlat4.x = u_xlat7.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat7.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat2.xy + u_xlat4.xy;
					    u_xlat14.x = u_xlat4.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD6.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat14.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat14.xy;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat3.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					layout(location = 9) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat1;
					    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.xxx;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat20 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat2.x = dot(u_xlat1, u_xlat1);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat20 = dot(u_xlat2, u_xlat2);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.zxy;
					    u_xlat4.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat5.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat5.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.yz = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat18 = u_xlat2.x * u_xlat1.z;
					    u_xlat18 = u_xlat1.y * u_xlat2.y + (-u_xlat18);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat18);
					    u_xlat14.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat18 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat1.yz;
					    u_xlat18 = dot(u_xlat7.xy, u_xlat2.xy);
					    u_xlat18 = abs(u_xlat18) + -0.850000024;
					    u_xlat18 = u_xlat18 * 6.66666794;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    vs_TEXCOORD4.xy = vec2(u_xlat18) * u_xlat14.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat7.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat7.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat4.y = 0.0;
					    u_xlat4.x = u_xlat7.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat7.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat2.xy + u_xlat4.xy;
					    u_xlat14.x = u_xlat4.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD6.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat14.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat14.xy;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat3.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					UNITY_BINDING(3) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					UNITY_BINDING(4) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec4 vs_TEXCOORD1;
					layout(location = 2) out vec4 vs_TEXCOORD2;
					layout(location = 3) out vec4 vs_TEXCOORD3;
					layout(location = 4) out vec4 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec3 vs_TEXCOORD7;
					layout(location = 8) out float vs_TEXCOORD8;
					layout(location = 9) out vec4 vs_TEXCOORD10;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat1;
					    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.xxx;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat20 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3 = vec4(u_xlat21) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    u_xlat2.x = dot(u_xlat1, u_xlat1);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat20 = dot(u_xlat2, u_xlat2);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.zxy;
					    u_xlat4.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat4.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat5.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat5.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat5.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.yz = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat18 = u_xlat2.x * u_xlat1.z;
					    u_xlat18 = u_xlat1.y * u_xlat2.y + (-u_xlat18);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat18);
					    u_xlat14.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xy = vec2(u_xlat18) * u_xlat2.xy;
					    u_xlat18 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat1.yz;
					    u_xlat18 = dot(u_xlat7.xy, u_xlat2.xy);
					    u_xlat18 = abs(u_xlat18) + -0.850000024;
					    u_xlat18 = u_xlat18 * 6.66666794;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    vs_TEXCOORD4.xy = vec2(u_xlat18) * u_xlat14.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat7.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat7.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD4.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat4.y = 0.0;
					    u_xlat4.x = u_xlat7.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat7.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD5.xy = u_xlat2.xy + u_xlat4.xy;
					    u_xlat14.x = u_xlat4.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD6.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat14.y = 0.0;
					    vs_TEXCOORD6.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat14.xy;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat3.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec2 u_xlat18;
					float u_xlat32;
					vec2 u_xlat34;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat1.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat48 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat48 = u_xlat48 * u_xlat18.x;
					    u_xlat49 = u_xlat49 * u_xlat18.x;
					    u_xlat2.x = u_xlat18.x * u_xlat2.x;
					    u_xlat34.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat34.x;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD4.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat34.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat34.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat48) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat48 = u_xlat6.w + u_xlat7.w;
					    u_xlat48 = u_xlat48 * u_xlat3.w;
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat48 = u_xlat48 + u_xlat3.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat48 = u_xlat48 + -0.400000006;
					    SV_Target0.w = u_xlat48 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat5.z = sqrt(u_xlat48);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat34.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat48 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat48 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat9.xyw = vec3(u_xlat48) * u_xlat10.xyz;
					    u_xlat48 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = log2(u_xlat48);
					    u_xlat48 = u_xlat48 * _EmissionLightPow;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat48);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat34.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlatb48 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb48){
					        u_xlatb48 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb48)) ? u_xlat4.xyz : u_xlat0.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat48 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat49 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat48, u_xlat49);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat48 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat49 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat4.xyz = vec3(u_xlat49) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat49 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat49 = u_xlat49 + u_xlat49;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat49)) + (-u_xlat1.xyz);
					    u_xlat9.xyz = vec3(u_xlat48) * _LightColor0.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat10.xyz = vec3(u_xlat48) * u_xlat8.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat48 = min(u_xlat11.z, u_xlat48);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat8.xyz;
					    }
					    u_xlat48 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat48 * u_xlat5.x;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat48);
					    u_xlat49 = u_xlat10.w + -1.0;
					    u_xlat49 = unity_SpecCube0_HDR.w * u_xlat49 + 1.0;
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat12.xyz = vec3(u_xlat50) * u_xlat8.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat50 = min(u_xlat13.z, u_xlat50);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat12.xyz * vec3(u_xlat50) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat48);
					        u_xlat48 = u_xlat0.w + -1.0;
					        u_xlat48 = unity_SpecCube1_HDR.w * u_xlat48 + 1.0;
					        u_xlat48 = log2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.y;
					        u_xlat48 = exp2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48);
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat32 = u_xlat16.x + u_xlat16.x;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat32)) + u_xlat1.xyz;
					    u_xlat32 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.x = u_xlat16.x;
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.y = (-u_xlat16.x) + 1.0;
					    u_xlat1.zw = u_xlat1.xy * u_xlat1.xy;
					    u_xlat16.xz = u_xlat1.xy * u_xlat1.xw;
					    u_xlat5.yz = u_xlat1.zy * u_xlat16.xz;
					    u_xlat16.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = u_xlat16.x + _Glossiness;
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat48 = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat48 = u_xlat48 * 16.0;
					    u_xlat1.xyz = u_xlat7.xyz * vec3(u_xlat48);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xzw = vec3(u_xlat32) * u_xlat9.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat16.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xzw + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					bool u_xlatb49;
					float u_xlat50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb49 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb49){
					        u_xlatb49 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb49)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat49 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat50 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat49, u_xlat50);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat49 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat50 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat50 = inversesqrt(u_xlat50);
					    u_xlat5.xyz = vec3(u_xlat50) * u_xlat5.xyz;
					    u_xlat50 = (-_Glossiness) + 1.0;
					    u_xlat51 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat51 = u_xlat51 + u_xlat51;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat51)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat49) * _LightColor0.xyz;
					    u_xlatb49 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb49){
					        u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat49 = inversesqrt(u_xlat49);
					        u_xlat10.xyz = vec3(u_xlat49) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat49 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat49 = min(u_xlat11.z, u_xlat49);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat11.xy = (-vec2(u_xlat50)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat49 = u_xlat50 * u_xlat11.x;
					    u_xlat49 = u_xlat49 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat49);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xzw = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat49);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat50 * u_xlat50;
					    u_xlat48 = u_xlat32 * u_xlat32;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat49 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat49 + 1.00001001;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat49 = u_xlat50 * u_xlat50 + 0.5;
					    u_xlat16.x = u_xlat16.x * u_xlat49;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat16.x = u_xlat16.x * u_xlat17.x;
					    u_xlat16.x = u_xlat16.x * 4.0;
					    u_xlat16.x = u_xlat48 / u_xlat16.x;
					    u_xlat32 = u_xlat50 * u_xlat32;
					    u_xlat32 = (-u_xlat32) * u_xlat11.y + 1.0;
					    u_xlat48 = (-u_xlat0.x) + _Glossiness;
					    u_xlat48 = u_xlat48 + 1.0;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat16.xxx;
					    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat11.xzw * vec3(u_xlat32);
					    u_xlat17.x = (-u_xlat33) + 1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat4.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(u_xlat48);
					    u_xlat17.xyz = u_xlat17.xxx * u_xlat4.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat17.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					float u_xlat17;
					bool u_xlatb17;
					float u_xlat18;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					bool u_xlatb49;
					float u_xlat50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb49 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb49){
					        u_xlatb49 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb49)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat49 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat50 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat49, u_xlat50);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat49 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat50 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat50 = inversesqrt(u_xlat50);
					    u_xlat5.xyz = vec3(u_xlat50) * u_xlat5.xyz;
					    u_xlat50 = (-_Glossiness) + 1.0;
					    u_xlat51 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat51 = u_xlat51 + u_xlat51;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat51)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat49) * _LightColor0.xyz;
					    u_xlatb49 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb49){
					        u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat49 = inversesqrt(u_xlat49);
					        u_xlat10.xyz = vec3(u_xlat49) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat49 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat49 = min(u_xlat11.z, u_xlat49);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat49 = (-u_xlat50) * 0.699999988 + 1.70000005;
					    u_xlat49 = u_xlat49 * u_xlat50;
					    u_xlat49 = u_xlat49 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat49);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat49);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat17 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = dot(vec2(u_xlat32), vec2(u_xlat50));
					    u_xlat32 = u_xlat32 + -0.5;
					    u_xlat48 = (-u_xlat17) + 1.0;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat49 = u_xlat49 * u_xlat49;
					    u_xlat48 = u_xlat48 * u_xlat49;
					    u_xlat48 = u_xlat32 * u_xlat48 + 1.0;
					    u_xlat49 = -abs(u_xlat1.x) + 1.0;
					    u_xlat2.x = u_xlat49 * u_xlat49;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat49 = u_xlat49 * u_xlat2.x;
					    u_xlat32 = u_xlat32 * u_xlat49 + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat17 * u_xlat32;
					    u_xlat48 = u_xlat50 * u_xlat50;
					    u_xlat48 = max(u_xlat48, 0.00200000009);
					    u_xlat2.x = (-u_xlat48) + 1.0;
					    u_xlat18 = abs(u_xlat1.x) * u_xlat2.x + u_xlat48;
					    u_xlat2.x = u_xlat17 * u_xlat2.x + u_xlat48;
					    u_xlat1.x = abs(u_xlat1.x) * u_xlat2.x;
					    u_xlat1.x = u_xlat17 * u_xlat18 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat2.x = u_xlat48 * u_xlat48;
					    u_xlat18 = u_xlat33 * u_xlat2.x + (-u_xlat33);
					    u_xlat33 = u_xlat18 * u_xlat33 + 1.0;
					    u_xlat2.x = u_xlat2.x * 0.318309873;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat2.x / u_xlat33;
					    u_xlat1.x = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat17 * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.0;
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb17 = u_xlat17!=0.0;
					    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat17 * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat9.xyz;
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat16.x = u_xlat16.x * u_xlat32;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xxx + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat16.xyz = u_xlat11.xyz * vec3(u_xlat48);
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat49) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					bvec3 u_xlatb16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					vec2 u_xlat36;
					float u_xlat51;
					bool u_xlatb51;
					float u_xlat52;
					bool u_xlatb52;
					float u_xlat53;
					bool u_xlatb53;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat51 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat1.xyz = vec3(u_xlat51) * u_xlat1.xyz;
					    u_xlat51 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat52 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat51 = u_xlat51 * u_xlat19.x;
					    u_xlat52 = u_xlat52 * u_xlat19.x;
					    u_xlat2.x = u_xlat19.x * u_xlat2.x;
					    u_xlat36.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat36.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat36.xy = vs_TEXCOORD4.xy * vec2(u_xlat52) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat36.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat51) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat51 = u_xlat6.w + u_xlat7.w;
					    u_xlat51 = u_xlat51 * u_xlat3.w;
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat51 = float(1.0) / u_xlat51;
					    u_xlat51 = u_xlat51 + u_xlat3.w;
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = u_xlat51 + -0.400000006;
					    SV_Target0.w = u_xlat51 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat51 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat51 = min(u_xlat51, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat8.z = sqrt(u_xlat51);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat51 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat51 = min(u_xlat51, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat5.z = sqrt(u_xlat51);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat36.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat51 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat10.z = sqrt(u_xlat51);
					    u_xlat51 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat9.xyw = vec3(u_xlat51) * u_xlat10.xyz;
					    u_xlat51 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * _EmissionLightPow;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat51);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat36.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlatb51 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb51){
					        u_xlatb52 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb52)) ? u_xlat4.xyz : u_xlat0.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat52 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat53 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat52, u_xlat53);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat52 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat53 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat53 = inversesqrt(u_xlat53);
					    u_xlat4.xyz = vec3(u_xlat53) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat53 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat53 = u_xlat53 + u_xlat53;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat53)) + (-u_xlat1.xyz);
					    u_xlat9.xyz = vec3(u_xlat52) * _LightColor0.xyz;
					    if(u_xlatb51){
					        u_xlatb51 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat10.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat10.xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat10.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.xyz = (bool(u_xlatb51)) ? u_xlat10.xyz : u_xlat0.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat10.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat51 = u_xlat10.y * 0.25;
					        u_xlat52 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat53 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat51 = max(u_xlat51, u_xlat52);
					        u_xlat10.x = min(u_xlat53, u_xlat51);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat10.xzw);
					        u_xlat12.xyz = u_xlat10.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat12 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
					        u_xlat10.xyz = u_xlat10.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat11.x = dot(u_xlat11, u_xlat4);
					        u_xlat11.y = dot(u_xlat12, u_xlat4);
					        u_xlat11.z = dot(u_xlat10, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat11.x = dot(unity_SHAr, u_xlat4);
					        u_xlat11.y = dot(unity_SHAg, u_xlat4);
					        u_xlat11.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat10.xyz = u_xlat11.xyz + vs_TEXCOORD7.xyz;
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb51 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb51){
					        u_xlat51 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat51 = inversesqrt(u_xlat51);
					        u_xlat11.xyz = vec3(u_xlat51) * u_xlat8.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					        u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					        u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat12;
					            hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					            hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					            hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					            u_xlat12 = hlslcc_movcTemp;
					        }
					        u_xlat51 = min(u_xlat12.y, u_xlat12.x);
					        u_xlat51 = min(u_xlat12.z, u_xlat51);
					        u_xlat12.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat51) + u_xlat12.xyz;
					    } else {
					        u_xlat11.xyz = u_xlat8.xyz;
					    }
					    u_xlat51 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat51 = u_xlat51 * u_xlat5.x;
					    u_xlat51 = u_xlat51 * 6.0;
					    u_xlat11 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat51);
					    u_xlat52 = u_xlat11.w + -1.0;
					    u_xlat52 = unity_SpecCube0_HDR.w * u_xlat52 + 1.0;
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.y;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.x;
					    u_xlat12.xyz = u_xlat11.xyz * vec3(u_xlat52);
					    u_xlatb53 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb53){
					        u_xlatb53 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb53){
					            u_xlat53 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat53 = inversesqrt(u_xlat53);
					            u_xlat13.xyz = vec3(u_xlat53) * u_xlat8.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat13.xyz;
					            u_xlat15.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat15.xyz = u_xlat15.xyz / u_xlat13.xyz;
					            u_xlatb16.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb16.x) ? u_xlat14.x : u_xlat15.x;
					                hlslcc_movcTemp.y = (u_xlatb16.y) ? u_xlat14.y : u_xlat15.y;
					                hlslcc_movcTemp.z = (u_xlatb16.z) ? u_xlat14.z : u_xlat15.z;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat53 = min(u_xlat14.y, u_xlat14.x);
					            u_xlat53 = min(u_xlat14.z, u_xlat53);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat13.xyz * vec3(u_xlat53) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat51);
					        u_xlat51 = u_xlat0.w + -1.0;
					        u_xlat51 = unity_SpecCube1_HDR.w * u_xlat51 + 1.0;
					        u_xlat51 = log2(u_xlat51);
					        u_xlat51 = u_xlat51 * unity_SpecCube1_HDR.y;
					        u_xlat51 = exp2(u_xlat51);
					        u_xlat51 = u_xlat51 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51);
					        u_xlat8.xyz = vec3(u_xlat52) * u_xlat11.xyz + (-u_xlat0.xyz);
					        u_xlat12.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat17.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat53 = u_xlat52 + u_xlat52;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat53)) + u_xlat1.xyz;
					    u_xlat53 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.y = (-u_xlat52) + 1.0;
					    u_xlat4.zw = u_xlat4.xy * u_xlat4.xy;
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xw;
					    u_xlat5.yz = u_xlat4.zy * u_xlat1.xy;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz + u_xlat17.xyz;
					    u_xlat4.xyz = vec3(u_xlat53) * u_xlat9.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat10.xyz * u_xlat17.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					bvec3 u_xlatb16;
					vec3 u_xlat17;
					float u_xlat18;
					vec2 u_xlat20;
					float u_xlat34;
					float u_xlat35;
					vec2 u_xlat37;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					float u_xlat53;
					bool u_xlatb53;
					float u_xlat54;
					float u_xlat55;
					bool u_xlatb55;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat51 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * u_xlat1.xyz;
					    u_xlat52 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat53 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat20.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat20.x = u_xlat20.x * _DispAmp;
					    u_xlat52 = u_xlat52 * u_xlat20.x;
					    u_xlat53 = u_xlat53 * u_xlat20.x;
					    u_xlat3.x = u_xlat20.x * u_xlat3.x;
					    u_xlat37.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat20.x = u_xlat20.x * u_xlat37.x;
					    u_xlat20.x = u_xlat20.x / _DispMainTex_ST.y;
					    u_xlat20.xy = vs_TEXCOORD4.xy * u_xlat20.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat20.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat37.xy = vs_TEXCOORD4.xy * vec2(u_xlat53) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat37.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat52) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat52 = u_xlat7.w + u_xlat8.w;
					    u_xlat52 = u_xlat52 * u_xlat4.w;
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat52 = float(1.0) / u_xlat52;
					    u_xlat52 = u_xlat52 + u_xlat4.w;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 + -0.400000006;
					    SV_Target0.w = u_xlat52 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat9.z = sqrt(u_xlat52);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat6.z = sqrt(u_xlat52);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat37.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat52 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat11.z = sqrt(u_xlat52);
					    u_xlat52 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat10.xyw = vec3(u_xlat52) * u_xlat11.xyz;
					    u_xlat52 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * _EmissionLightPow;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat52);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat37.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb52 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb52){
					        u_xlatb53 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb53)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat53 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat54 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat53, u_xlat54);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat53 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat54 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat5.xyz = vec3(u_xlat54) * u_xlat5.xyz;
					    u_xlat54 = (-_Glossiness) + 1.0;
					    u_xlat55 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat55 = u_xlat55 + u_xlat55;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat55)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat53) * _LightColor0.xyz;
					    if(u_xlatb52){
					        u_xlatb52 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat10.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat10.xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat10.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.xyz = (bool(u_xlatb52)) ? u_xlat10.xyz : u_xlat0.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat10.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat52 = u_xlat10.y * 0.25;
					        u_xlat53 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat55 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat52 = max(u_xlat52, u_xlat53);
					        u_xlat10.x = min(u_xlat55, u_xlat52);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat10.xzw);
					        u_xlat12.xyz = u_xlat10.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat12 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
					        u_xlat10.xyz = u_xlat10.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(u_xlat11, u_xlat5);
					        u_xlat11.y = dot(u_xlat12, u_xlat5);
					        u_xlat11.z = dot(u_xlat10, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(unity_SHAr, u_xlat5);
					        u_xlat11.y = dot(unity_SHAg, u_xlat5);
					        u_xlat11.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat10.xyz = u_xlat11.xyz + vs_TEXCOORD7.xyz;
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb52 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb52){
					        u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat52 = inversesqrt(u_xlat52);
					        u_xlat11.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					        u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					        u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat12;
					            hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					            hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					            hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					            u_xlat12 = hlslcc_movcTemp;
					        }
					        u_xlat52 = min(u_xlat12.y, u_xlat12.x);
					        u_xlat52 = min(u_xlat12.z, u_xlat52);
					        u_xlat12.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat52) + u_xlat12.xyz;
					    } else {
					        u_xlat11.xyz = u_xlat6.xyz;
					    }
					    u_xlat12.xy = (-vec2(u_xlat54)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat52 = u_xlat54 * u_xlat12.x;
					    u_xlat52 = u_xlat52 * 6.0;
					    u_xlat11 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat52);
					    u_xlat53 = u_xlat11.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat53 + 1.0;
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat12.xzw = u_xlat11.xyz * vec3(u_xlat53);
					    u_xlatb55 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb55){
					        u_xlatb55 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb55){
					            u_xlat55 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat55 = inversesqrt(u_xlat55);
					            u_xlat13.xyz = vec3(u_xlat55) * u_xlat6.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat13.xyz;
					            u_xlat15.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat15.xyz = u_xlat15.xyz / u_xlat13.xyz;
					            u_xlatb16.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb16.x) ? u_xlat14.x : u_xlat15.x;
					                hlslcc_movcTemp.y = (u_xlatb16.y) ? u_xlat14.y : u_xlat15.y;
					                hlslcc_movcTemp.z = (u_xlatb16.z) ? u_xlat14.z : u_xlat15.z;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat55 = min(u_xlat14.y, u_xlat14.x);
					            u_xlat55 = min(u_xlat14.z, u_xlat55);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat13.xyz * vec3(u_xlat55) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat52);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat11.xyz + (-u_xlat0.xyz);
					        u_xlat12.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat17.xyz = u_xlat1.xyz * vec3(u_xlat51) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat17.xyz = u_xlat17.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat17.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat17.x = dot(_WorldSpaceLightPos0.xyz, u_xlat17.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat34 = u_xlat54 * u_xlat54;
					    u_xlat51 = u_xlat34 * u_xlat34;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat52 = u_xlat34 * u_xlat34 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat52 + 1.00001001;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = max(u_xlat17.x, 0.100000001);
					    u_xlat52 = u_xlat54 * u_xlat54 + 0.5;
					    u_xlat17.x = u_xlat17.x * u_xlat52;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat17.x = u_xlat17.x * u_xlat18;
					    u_xlat17.x = u_xlat17.x * 4.0;
					    u_xlat17.x = u_xlat51 / u_xlat17.x;
					    u_xlat34 = u_xlat54 * u_xlat34;
					    u_xlat34 = (-u_xlat34) * u_xlat12.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat17.xxx * u_xlat8.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat6.xyz * u_xlat10.xyz;
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat17.xyz = u_xlat12.xzw * vec3(u_xlat34);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat17.xyz * u_xlat2.xyz + u_xlat1.xyw;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					bvec3 u_xlatb16;
					vec3 u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					vec2 u_xlat20;
					float u_xlat34;
					float u_xlat35;
					vec2 u_xlat37;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					float u_xlat53;
					bool u_xlatb53;
					float u_xlat54;
					float u_xlat55;
					bool u_xlatb55;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat51 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * u_xlat1.xyz;
					    u_xlat52 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat53 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat20.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat20.x = u_xlat20.x * _DispAmp;
					    u_xlat52 = u_xlat52 * u_xlat20.x;
					    u_xlat53 = u_xlat53 * u_xlat20.x;
					    u_xlat3.x = u_xlat20.x * u_xlat3.x;
					    u_xlat37.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat20.x = u_xlat20.x * u_xlat37.x;
					    u_xlat20.x = u_xlat20.x / _DispMainTex_ST.y;
					    u_xlat20.xy = vs_TEXCOORD4.xy * u_xlat20.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat20.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat37.xy = vs_TEXCOORD4.xy * vec2(u_xlat53) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat37.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat52) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat52 = u_xlat7.w + u_xlat8.w;
					    u_xlat52 = u_xlat52 * u_xlat4.w;
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat52 = float(1.0) / u_xlat52;
					    u_xlat52 = u_xlat52 + u_xlat4.w;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 + -0.400000006;
					    SV_Target0.w = u_xlat52 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat9.z = sqrt(u_xlat52);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat6.z = sqrt(u_xlat52);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat37.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat52 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat11.z = sqrt(u_xlat52);
					    u_xlat52 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat10.xyw = vec3(u_xlat52) * u_xlat11.xyz;
					    u_xlat52 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * _EmissionLightPow;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat52);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat37.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb52 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb52){
					        u_xlatb53 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb53)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat53 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat54 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat53, u_xlat54);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat53 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat54 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat5.xyz = vec3(u_xlat54) * u_xlat5.xyz;
					    u_xlat54 = (-_Glossiness) + 1.0;
					    u_xlat55 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat55 = u_xlat55 + u_xlat55;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat55)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat53) * _LightColor0.xyz;
					    if(u_xlatb52){
					        u_xlatb52 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat10.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat10.xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat10.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.xyz = (bool(u_xlatb52)) ? u_xlat10.xyz : u_xlat0.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat10.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat52 = u_xlat10.y * 0.25;
					        u_xlat53 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat55 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat52 = max(u_xlat52, u_xlat53);
					        u_xlat10.x = min(u_xlat55, u_xlat52);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat10.xzw);
					        u_xlat12.xyz = u_xlat10.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat12 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
					        u_xlat10.xyz = u_xlat10.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(u_xlat11, u_xlat5);
					        u_xlat11.y = dot(u_xlat12, u_xlat5);
					        u_xlat11.z = dot(u_xlat10, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(unity_SHAr, u_xlat5);
					        u_xlat11.y = dot(unity_SHAg, u_xlat5);
					        u_xlat11.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat10.xyz = u_xlat11.xyz + vs_TEXCOORD7.xyz;
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb52 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb52){
					        u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat52 = inversesqrt(u_xlat52);
					        u_xlat11.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					        u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					        u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat12;
					            hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					            hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					            hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					            u_xlat12 = hlslcc_movcTemp;
					        }
					        u_xlat52 = min(u_xlat12.y, u_xlat12.x);
					        u_xlat52 = min(u_xlat12.z, u_xlat52);
					        u_xlat12.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat52) + u_xlat12.xyz;
					    } else {
					        u_xlat11.xyz = u_xlat6.xyz;
					    }
					    u_xlat52 = (-u_xlat54) * 0.699999988 + 1.70000005;
					    u_xlat52 = u_xlat52 * u_xlat54;
					    u_xlat52 = u_xlat52 * 6.0;
					    u_xlat11 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat52);
					    u_xlat53 = u_xlat11.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat53 + 1.0;
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat12.xyz = u_xlat11.xyz * vec3(u_xlat53);
					    u_xlatb55 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb55){
					        u_xlatb55 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb55){
					            u_xlat55 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat55 = inversesqrt(u_xlat55);
					            u_xlat13.xyz = vec3(u_xlat55) * u_xlat6.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat13.xyz;
					            u_xlat15.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat15.xyz = u_xlat15.xyz / u_xlat13.xyz;
					            u_xlatb16.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb16.x) ? u_xlat14.x : u_xlat15.x;
					                hlslcc_movcTemp.y = (u_xlatb16.y) ? u_xlat14.y : u_xlat15.y;
					                hlslcc_movcTemp.z = (u_xlatb16.z) ? u_xlat14.z : u_xlat15.z;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat55 = min(u_xlat14.y, u_xlat14.x);
					            u_xlat55 = min(u_xlat14.z, u_xlat55);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat13.xyz * vec3(u_xlat55) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat52);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat11.xyz + (-u_xlat0.xyz);
					        u_xlat12.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat17.xyz = u_xlat1.xyz * vec3(u_xlat51) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat17.xyz = u_xlat17.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat17.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat17.x = dot(_WorldSpaceLightPos0.xyz, u_xlat17.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat34 = u_xlat17.x * u_xlat17.x;
					    u_xlat34 = dot(vec2(u_xlat34), vec2(u_xlat54));
					    u_xlat34 = u_xlat34 + -0.5;
					    u_xlat51 = (-u_xlat18) + 1.0;
					    u_xlat52 = u_xlat51 * u_xlat51;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat34 * u_xlat51 + 1.0;
					    u_xlat52 = -abs(u_xlat1.x) + 1.0;
					    u_xlat2.x = u_xlat52 * u_xlat52;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat52 = u_xlat52 * u_xlat2.x;
					    u_xlat34 = u_xlat34 * u_xlat52 + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat51;
					    u_xlat34 = u_xlat18 * u_xlat34;
					    u_xlat51 = u_xlat54 * u_xlat54;
					    u_xlat51 = max(u_xlat51, 0.00200000009);
					    u_xlat2.x = (-u_xlat51) + 1.0;
					    u_xlat19 = abs(u_xlat1.x) * u_xlat2.x + u_xlat51;
					    u_xlat2.x = u_xlat18 * u_xlat2.x + u_xlat51;
					    u_xlat1.x = abs(u_xlat1.x) * u_xlat2.x;
					    u_xlat1.x = u_xlat18 * u_xlat19 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat2.x = u_xlat51 * u_xlat51;
					    u_xlat19 = u_xlat35 * u_xlat2.x + (-u_xlat35);
					    u_xlat35 = u_xlat19 * u_xlat35 + 1.0;
					    u_xlat2.x = u_xlat2.x * 0.318309873;
					    u_xlat35 = u_xlat35 * u_xlat35 + 1.00000001e-07;
					    u_xlat35 = u_xlat2.x / u_xlat35;
					    u_xlat1.x = u_xlat35 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat51 = u_xlat51 * u_xlat51 + 1.0;
					    u_xlat51 = float(1.0) / u_xlat51;
					    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat18 * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat9.xyz * vec3(u_xlat34) + u_xlat10.xyz;
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat34 = u_xlat17.x * u_xlat17.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat17.x = u_xlat17.x * u_xlat34;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat17.xxx + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat17.xyz = u_xlat12.xyz * vec3(u_xlat51);
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat52) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat17.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(14) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat34;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat1.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat48 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat48 = u_xlat48 * u_xlat18.x;
					    u_xlat49 = u_xlat49 * u_xlat18.x;
					    u_xlat2.x = u_xlat18.x * u_xlat2.x;
					    u_xlat34.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat34.x;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD4.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat34.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat34.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat48) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat48 = u_xlat6.w + u_xlat7.w;
					    u_xlat48 = u_xlat48 * u_xlat3.w;
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat48 = u_xlat48 + u_xlat3.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat48 = u_xlat48 + -0.400000006;
					    SV_Target0.w = u_xlat48 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat5.z = sqrt(u_xlat48);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat34.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat48 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat48 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat9.xyw = vec3(u_xlat48) * u_xlat10.xyz;
					    u_xlat48 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = log2(u_xlat48);
					    u_xlat48 = u_xlat48 * _EmissionLightPow;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat48);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat34.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat4.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat48 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat48)) + (-u_xlat1.xyz);
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat48 = log2(u_xlat9.w);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.y;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat10.xyz = vec3(u_xlat48) * u_xlat8.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat48 = min(u_xlat11.z, u_xlat48);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat8.xyz;
					    }
					    u_xlat48 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat48 * u_xlat5.x;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat48);
					    u_xlat49 = u_xlat10.w + -1.0;
					    u_xlat49 = unity_SpecCube0_HDR.w * u_xlat49 + 1.0;
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat12.xyz = vec3(u_xlat50) * u_xlat8.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat50 = min(u_xlat13.z, u_xlat50);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat12.xyz * vec3(u_xlat50) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat48);
					        u_xlat48 = u_xlat0.w + -1.0;
					        u_xlat48 = unity_SpecCube1_HDR.w * u_xlat48 + 1.0;
					        u_xlat48 = log2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.y;
					        u_xlat48 = exp2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48);
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat49 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat50 = u_xlat49 + u_xlat49;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat50)) + u_xlat1.xyz;
					    u_xlat50 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat49 = u_xlat49;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.y = (-u_xlat49) + 1.0;
					    u_xlat4.zw = u_xlat4.xy * u_xlat4.xy;
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xw;
					    u_xlat5.yz = u_xlat4.zy * u_xlat1.xy;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz + u_xlat16.xyz;
					    u_xlat4.xyz = vec3(u_xlat50) * _LightColor0.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat16.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat17.z = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat9.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat50);
					    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb50){
					        u_xlat50 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat50 = inversesqrt(u_xlat50);
					        u_xlat10.xyz = vec3(u_xlat50) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat50 = min(u_xlat11.z, u_xlat50);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat11.xy = (-u_xlat17.zz) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat50 = u_xlat17.z * u_xlat11.x;
					    u_xlat50 = u_xlat50 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat50);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xzw = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat50);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = u_xlat17.z * u_xlat17.z;
					    u_xlat48 = u_xlat16.y * u_xlat16.y;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat2.x = u_xlat16.y * u_xlat16.y + -1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat2.x + 1.00001001;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat2.x = u_xlat17.z * u_xlat17.z + 0.5;
					    u_xlat16.x = u_xlat16.x * u_xlat2.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat16.xy = u_xlat17.xz * u_xlat16.xy;
					    u_xlat16.x = u_xlat16.x * 4.0;
					    u_xlat16.x = u_xlat48 / u_xlat16.x;
					    u_xlat32 = (-u_xlat16.y) * u_xlat11.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat16.xyz = u_xlat11.xzw * vec3(u_xlat32);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyw;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					bool u_xlatb17;
					vec3 u_xlat18;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat51;
					bool u_xlatb51;
					float u_xlat52;
					float u_xlat53;
					bool u_xlatb53;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat49 = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat9.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlatb51 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb51){
					        u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat51 = inversesqrt(u_xlat51);
					        u_xlat10.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat51 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat51 = min(u_xlat11.z, u_xlat51);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat51) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat51 = (-u_xlat49) * 0.699999988 + 1.70000005;
					    u_xlat51 = u_xlat49 * u_xlat51;
					    u_xlat51 = u_xlat51 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat51);
					    u_xlat52 = u_xlat10.w + -1.0;
					    u_xlat52 = unity_SpecCube0_HDR.w * u_xlat52 + 1.0;
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.y;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat52);
					    u_xlatb53 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb53){
					        u_xlatb53 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb53){
					            u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat53 = inversesqrt(u_xlat53);
					            u_xlat12.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat53 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat53 = min(u_xlat13.z, u_xlat53);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat53) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat51);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat52) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat17.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = dot(vec2(u_xlat32), vec2(u_xlat49));
					    u_xlat32 = u_xlat32 + -0.5;
					    u_xlat48 = (-u_xlat17.x) + 1.0;
					    u_xlat2.x = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat2.x;
					    u_xlat48 = u_xlat32 * u_xlat48 + 1.0;
					    u_xlat2.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat18.x = u_xlat2.x * u_xlat2.x;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat2.x = u_xlat2.x * u_xlat18.x;
					    u_xlat32 = u_xlat32 * u_xlat2.x + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat17.x * u_xlat32;
					    u_xlat48 = u_xlat49 * u_xlat49;
					    u_xlat48 = max(u_xlat48, 0.00200000009);
					    u_xlat49 = (-u_xlat48) + 1.0;
					    u_xlat18.x = abs(u_xlat1.x) * u_xlat49 + u_xlat48;
					    u_xlat49 = u_xlat17.x * u_xlat49 + u_xlat48;
					    u_xlat1.x = u_xlat49 * abs(u_xlat1.x);
					    u_xlat1.x = u_xlat17.x * u_xlat18.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat18.x = u_xlat33 * u_xlat49 + (-u_xlat33);
					    u_xlat33 = u_xlat18.x * u_xlat33 + 1.0;
					    u_xlat49 = u_xlat49 * 0.318309873;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat49 / u_xlat33;
					    u_xlat1.x = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.0;
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat17.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb17 = u_xlat17.x!=0.0;
					    u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat17.xyz = vec3(u_xlat32) * _LightColor0.xyz;
					    u_xlat17.xyz = vec3(u_xlat50) * u_xlat9.xyz + u_xlat17.xyz;
					    u_xlat18.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat16.x = u_xlat16.x * u_xlat32;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xxx + u_xlat8.xyz;
					    u_xlat18.xyz = u_xlat18.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat17.xyz + u_xlat18.xyz;
					    u_xlat16.xyz = u_xlat11.xyz * vec3(u_xlat48);
					    u_xlat18.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat18.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(14) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(15) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat34;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat1.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat48 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat48 = u_xlat48 * u_xlat18.x;
					    u_xlat49 = u_xlat49 * u_xlat18.x;
					    u_xlat2.x = u_xlat18.x * u_xlat2.x;
					    u_xlat34.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat34.x;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD4.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat34.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat34.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat48) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat48 = u_xlat6.w + u_xlat7.w;
					    u_xlat48 = u_xlat48 * u_xlat3.w;
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat48 = u_xlat48 + u_xlat3.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat48 = u_xlat48 + -0.400000006;
					    SV_Target0.w = u_xlat48 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat5.z = sqrt(u_xlat48);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat34.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat48 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat48 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat9.xyw = vec3(u_xlat48) * u_xlat10.xyz;
					    u_xlat48 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = log2(u_xlat48);
					    u_xlat48 = u_xlat48 * _EmissionLightPow;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat48);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat34.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat4.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat48 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat48)) + (-u_xlat1.xyz);
					    u_xlatb48 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb48){
					        u_xlatb48 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat9.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat9.xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb48)) ? u_xlat9.xyz : u_xlat0.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat9.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat48 = u_xlat9.y * 0.25;
					        u_xlat49 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat50 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat48 = max(u_xlat48, u_xlat49);
					        u_xlat9.x = min(u_xlat50, u_xlat48);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat9.xzw);
					        u_xlat11.xyz = u_xlat9.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat11.xyz);
					        u_xlat9.xyz = u_xlat9.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat10.x = dot(u_xlat10, u_xlat4);
					        u_xlat10.y = dot(u_xlat11, u_xlat4);
					        u_xlat10.z = dot(u_xlat9, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat10.x = dot(unity_SHAr, u_xlat4);
					        u_xlat10.y = dot(unity_SHAg, u_xlat4);
					        u_xlat10.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat9 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat11.x = dot(unity_SHBr, u_xlat9);
					    u_xlat11.y = dot(unity_SHBg, u_xlat9);
					    u_xlat11.z = dot(unity_SHBb, u_xlat9);
					    u_xlat48 = u_xlat4.y * u_xlat4.y;
					    u_xlat48 = u_xlat4.x * u_xlat4.x + (-u_xlat48);
					    u_xlat9.xyz = unity_SHC.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + u_xlat10.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat48 = log2(u_xlat10.w);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.y;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = vec3(u_xlat48) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat10.xyz = vec3(u_xlat48) * u_xlat8.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat48 = min(u_xlat11.z, u_xlat48);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat8.xyz;
					    }
					    u_xlat48 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat48 * u_xlat5.x;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat48);
					    u_xlat49 = u_xlat10.w + -1.0;
					    u_xlat49 = unity_SpecCube0_HDR.w * u_xlat49 + 1.0;
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat12.xyz = vec3(u_xlat50) * u_xlat8.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat50 = min(u_xlat13.z, u_xlat50);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat12.xyz * vec3(u_xlat50) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat48);
					        u_xlat48 = u_xlat0.w + -1.0;
					        u_xlat48 = unity_SpecCube1_HDR.w * u_xlat48 + 1.0;
					        u_xlat48 = log2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.y;
					        u_xlat48 = exp2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48);
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat49 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat50 = u_xlat49 + u_xlat49;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat50)) + u_xlat1.xyz;
					    u_xlat50 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat49 = u_xlat49;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.y = (-u_xlat49) + 1.0;
					    u_xlat4.zw = u_xlat4.xy * u_xlat4.xy;
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xw;
					    u_xlat5.yz = u_xlat4.zy * u_xlat1.xy;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz + u_xlat16.xyz;
					    u_xlat4.xyz = vec3(u_xlat50) * _LightColor0.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat16.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat17.z = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlatb50 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb50){
					        u_xlatb50 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat9.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat9.xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb50)) ? u_xlat9.xyz : u_xlat0.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat9.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat50 = u_xlat9.y * 0.25;
					        u_xlat51 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat52 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat50 = max(u_xlat50, u_xlat51);
					        u_xlat9.x = min(u_xlat52, u_xlat50);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat9.xzw);
					        u_xlat11.xyz = u_xlat9.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat11.xyz);
					        u_xlat9.xyz = u_xlat9.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(u_xlat10, u_xlat5);
					        u_xlat10.y = dot(u_xlat11, u_xlat5);
					        u_xlat10.z = dot(u_xlat9, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(unity_SHAr, u_xlat5);
					        u_xlat10.y = dot(unity_SHAg, u_xlat5);
					        u_xlat10.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat9 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat11.x = dot(unity_SHBr, u_xlat9);
					    u_xlat11.y = dot(unity_SHBg, u_xlat9);
					    u_xlat11.z = dot(unity_SHBb, u_xlat9);
					    u_xlat50 = u_xlat5.y * u_xlat5.y;
					    u_xlat50 = u_xlat5.x * u_xlat5.x + (-u_xlat50);
					    u_xlat9.xyz = unity_SHC.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + u_xlat10.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat10.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = vec3(u_xlat50) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb50){
					        u_xlat50 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat50 = inversesqrt(u_xlat50);
					        u_xlat10.xyz = vec3(u_xlat50) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat50 = min(u_xlat11.z, u_xlat50);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat11.xy = (-u_xlat17.zz) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat50 = u_xlat17.z * u_xlat11.x;
					    u_xlat50 = u_xlat50 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat50);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xzw = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat50);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = u_xlat17.z * u_xlat17.z;
					    u_xlat48 = u_xlat16.y * u_xlat16.y;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat2.x = u_xlat16.y * u_xlat16.y + -1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat2.x + 1.00001001;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat2.x = u_xlat17.z * u_xlat17.z + 0.5;
					    u_xlat16.x = u_xlat16.x * u_xlat2.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat16.xy = u_xlat17.xz * u_xlat16.xy;
					    u_xlat16.x = u_xlat16.x * 4.0;
					    u_xlat16.x = u_xlat48 / u_xlat16.x;
					    u_xlat32 = (-u_xlat16.y) * u_xlat11.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat16.xyz = u_xlat11.xzw * vec3(u_xlat32);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyw;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					bool u_xlatb17;
					vec3 u_xlat18;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat49 = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlatb50 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb50){
					        u_xlatb50 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat9.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat9.xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb50)) ? u_xlat9.xyz : u_xlat0.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat9.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat50 = u_xlat9.y * 0.25;
					        u_xlat51 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat52 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat50 = max(u_xlat50, u_xlat51);
					        u_xlat9.x = min(u_xlat52, u_xlat50);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat9.xzw);
					        u_xlat11.xyz = u_xlat9.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat11.xyz);
					        u_xlat9.xyz = u_xlat9.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(u_xlat10, u_xlat5);
					        u_xlat10.y = dot(u_xlat11, u_xlat5);
					        u_xlat10.z = dot(u_xlat9, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(unity_SHAr, u_xlat5);
					        u_xlat10.y = dot(unity_SHAg, u_xlat5);
					        u_xlat10.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat9 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat11.x = dot(unity_SHBr, u_xlat9);
					    u_xlat11.y = dot(unity_SHBg, u_xlat9);
					    u_xlat11.z = dot(unity_SHBb, u_xlat9);
					    u_xlat50 = u_xlat5.y * u_xlat5.y;
					    u_xlat50 = u_xlat5.x * u_xlat5.x + (-u_xlat50);
					    u_xlat9.xyz = unity_SHC.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + u_xlat10.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat10.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = vec3(u_xlat50) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb50){
					        u_xlat50 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat50 = inversesqrt(u_xlat50);
					        u_xlat10.xyz = vec3(u_xlat50) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat50 = min(u_xlat11.z, u_xlat50);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat50 = (-u_xlat49) * 0.699999988 + 1.70000005;
					    u_xlat50 = u_xlat49 * u_xlat50;
					    u_xlat50 = u_xlat50 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat50);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat50);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat17.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = dot(vec2(u_xlat32), vec2(u_xlat49));
					    u_xlat32 = u_xlat32 + -0.5;
					    u_xlat48 = (-u_xlat17.x) + 1.0;
					    u_xlat2.x = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat2.x;
					    u_xlat48 = u_xlat32 * u_xlat48 + 1.0;
					    u_xlat2.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat18.x = u_xlat2.x * u_xlat2.x;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat2.x = u_xlat2.x * u_xlat18.x;
					    u_xlat32 = u_xlat32 * u_xlat2.x + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat17.x * u_xlat32;
					    u_xlat48 = u_xlat49 * u_xlat49;
					    u_xlat48 = max(u_xlat48, 0.00200000009);
					    u_xlat49 = (-u_xlat48) + 1.0;
					    u_xlat18.x = abs(u_xlat1.x) * u_xlat49 + u_xlat48;
					    u_xlat49 = u_xlat17.x * u_xlat49 + u_xlat48;
					    u_xlat1.x = u_xlat49 * abs(u_xlat1.x);
					    u_xlat1.x = u_xlat17.x * u_xlat18.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat18.x = u_xlat33 * u_xlat49 + (-u_xlat33);
					    u_xlat33 = u_xlat18.x * u_xlat33 + 1.0;
					    u_xlat49 = u_xlat49 * 0.318309873;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat49 / u_xlat33;
					    u_xlat1.x = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.0;
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat17.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb17 = u_xlat17.x!=0.0;
					    u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat17.xyz = _LightColor0.xyz * vec3(u_xlat32) + u_xlat9.xyz;
					    u_xlat18.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat16.x = u_xlat16.x * u_xlat32;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xxx + u_xlat8.xyz;
					    u_xlat18.xyz = u_xlat18.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat17.xyz + u_xlat18.xyz;
					    u_xlat16.xyz = u_xlat11.xyz * vec3(u_xlat48);
					    u_xlat18.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat18.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat17;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlat8 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat8.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat45);
					    u_xlat46 = u_xlat9.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = log2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat11.xyz = vec3(u_xlat47) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat47 = min(u_xlat12.z, u_xlat47);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat47) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat45);
					        u_xlat45 = u_xlat0.w + -1.0;
					        u_xlat45 = unity_SpecCube1_HDR.w * u_xlat45 + 1.0;
					        u_xlat45 = log2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.y;
					        u_xlat45 = exp2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45);
					        u_xlat5.xyz = vec3(u_xlat46) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat15.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16.x = u_xlat1.x * u_xlat16.x;
					    u_xlat1.x = u_xlat1.x * u_xlat16.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat15.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlat8 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat8.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat10.xy = (-vec2(u_xlat45)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat46 = u_xlat45 * u_xlat10.x;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xzw = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = u_xlat45 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat10.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xzw * vec3(u_xlat30);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat5.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlat8 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat8.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat46 = u_xlat45 * u_xlat46;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = max(u_xlat30, 0.00200000009);
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat30;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xyz * vec3(u_xlat30);
					    u_xlat15 = -abs(u_xlat15) + 1.0;
					    u_xlat30 = u_xlat15 * u_xlat15;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat15 = u_xlat15 * u_xlat30;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat17;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					float u_xlat48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlatb46 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb46){
					        u_xlatb46 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat8.xyz : u_xlat0.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat46 = u_xlat8.y * 0.25;
					        u_xlat47 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat48 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat46 = max(u_xlat46, u_xlat47);
					        u_xlat8.x = min(u_xlat48, u_xlat46);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					        u_xlat10.xyz = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat8.xyz = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(u_xlat9, u_xlat4);
					        u_xlat9.y = dot(u_xlat10, u_xlat4);
					        u_xlat9.z = dot(u_xlat8, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(unity_SHAr, u_xlat4);
					        u_xlat9.y = dot(unity_SHAg, u_xlat4);
					        u_xlat9.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat8 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat10.x = dot(unity_SHBr, u_xlat8);
					    u_xlat10.y = dot(unity_SHBg, u_xlat8);
					    u_xlat10.z = dot(unity_SHBb, u_xlat8);
					    u_xlat46 = u_xlat4.y * u_xlat4.y;
					    u_xlat46 = u_xlat4.x * u_xlat4.x + (-u_xlat46);
					    u_xlat8.xyz = unity_SHC.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat9.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat45);
					    u_xlat46 = u_xlat9.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = log2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat11.xyz = vec3(u_xlat47) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat47 = min(u_xlat12.z, u_xlat47);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat47) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat45);
					        u_xlat45 = u_xlat0.w + -1.0;
					        u_xlat45 = unity_SpecCube1_HDR.w * u_xlat45 + 1.0;
					        u_xlat45 = log2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.y;
					        u_xlat45 = exp2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45);
					        u_xlat5.xyz = vec3(u_xlat46) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat15.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16.x = u_xlat1.x * u_xlat16.x;
					    u_xlat1.x = u_xlat1.x * u_xlat16.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat15.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlatb46 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb46){
					        u_xlatb46 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat8.xyz : u_xlat0.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat46 = u_xlat8.y * 0.25;
					        u_xlat47 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat48 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat46 = max(u_xlat46, u_xlat47);
					        u_xlat8.x = min(u_xlat48, u_xlat46);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					        u_xlat10.xyz = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat8.xyz = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(u_xlat9, u_xlat4);
					        u_xlat9.y = dot(u_xlat10, u_xlat4);
					        u_xlat9.z = dot(u_xlat8, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(unity_SHAr, u_xlat4);
					        u_xlat9.y = dot(unity_SHAg, u_xlat4);
					        u_xlat9.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat8 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat10.x = dot(unity_SHBr, u_xlat8);
					    u_xlat10.y = dot(unity_SHBg, u_xlat8);
					    u_xlat10.z = dot(unity_SHBb, u_xlat8);
					    u_xlat46 = u_xlat4.y * u_xlat4.y;
					    u_xlat46 = u_xlat4.x * u_xlat4.x + (-u_xlat46);
					    u_xlat8.xyz = unity_SHC.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat9.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat10.xy = (-vec2(u_xlat45)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat46 = u_xlat45 * u_xlat10.x;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xzw = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = u_xlat45 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat10.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xzw * vec3(u_xlat30);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat5.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlatb46 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb46){
					        u_xlatb46 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat8.xyz : u_xlat0.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat46 = u_xlat8.y * 0.25;
					        u_xlat47 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat48 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat46 = max(u_xlat46, u_xlat47);
					        u_xlat8.x = min(u_xlat48, u_xlat46);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					        u_xlat10.xyz = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat8.xyz = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(u_xlat9, u_xlat4);
					        u_xlat9.y = dot(u_xlat10, u_xlat4);
					        u_xlat9.z = dot(u_xlat8, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(unity_SHAr, u_xlat4);
					        u_xlat9.y = dot(unity_SHAg, u_xlat4);
					        u_xlat9.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat8 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat10.x = dot(unity_SHBr, u_xlat8);
					    u_xlat10.y = dot(unity_SHBg, u_xlat8);
					    u_xlat10.z = dot(unity_SHBb, u_xlat8);
					    u_xlat46 = u_xlat4.y * u_xlat4.y;
					    u_xlat46 = u_xlat4.x * u_xlat4.x + (-u_xlat46);
					    u_xlat8.xyz = unity_SHC.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat9.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat46 = u_xlat45 * u_xlat46;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = max(u_xlat30, 0.00200000009);
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat30;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xyz * vec3(u_xlat30);
					    u_xlat15 = -abs(u_xlat15) + 1.0;
					    u_xlat30 = u_xlat15 * u_xlat15;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat15 = u_xlat15 * u_xlat30;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec2 u_xlat18;
					float u_xlat32;
					vec2 u_xlat34;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat1.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat48 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat48 = u_xlat48 * u_xlat18.x;
					    u_xlat49 = u_xlat49 * u_xlat18.x;
					    u_xlat2.x = u_xlat18.x * u_xlat2.x;
					    u_xlat34.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat34.x;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD4.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat34.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat34.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat48) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat48 = u_xlat6.w + u_xlat7.w;
					    u_xlat48 = u_xlat48 * u_xlat3.w;
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat48 = u_xlat48 + u_xlat3.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat48 = u_xlat48 + -0.400000006;
					    SV_Target0.w = u_xlat48 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat5.z = sqrt(u_xlat48);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat34.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat48 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat48 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat9.xyw = vec3(u_xlat48) * u_xlat10.xyz;
					    u_xlat48 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = log2(u_xlat48);
					    u_xlat48 = u_xlat48 * _EmissionLightPow;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat48);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat34.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlatb48 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb48){
					        u_xlatb48 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb48)) ? u_xlat4.xyz : u_xlat0.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat48 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat49 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat48, u_xlat49);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat48 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat49 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat4.xyz = vec3(u_xlat49) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat49 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat49 = u_xlat49 + u_xlat49;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat49)) + (-u_xlat1.xyz);
					    u_xlat9.xyz = vec3(u_xlat48) * _LightColor0.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat10.xyz = vec3(u_xlat48) * u_xlat8.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat48 = min(u_xlat11.z, u_xlat48);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat8.xyz;
					    }
					    u_xlat48 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat48 * u_xlat5.x;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat48);
					    u_xlat49 = u_xlat10.w + -1.0;
					    u_xlat49 = unity_SpecCube0_HDR.w * u_xlat49 + 1.0;
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat12.xyz = vec3(u_xlat50) * u_xlat8.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat50 = min(u_xlat13.z, u_xlat50);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat12.xyz * vec3(u_xlat50) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat48);
					        u_xlat48 = u_xlat0.w + -1.0;
					        u_xlat48 = unity_SpecCube1_HDR.w * u_xlat48 + 1.0;
					        u_xlat48 = log2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.y;
					        u_xlat48 = exp2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48);
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat32 = u_xlat16.x + u_xlat16.x;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat32)) + u_xlat1.xyz;
					    u_xlat32 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.x = u_xlat16.x;
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.y = (-u_xlat16.x) + 1.0;
					    u_xlat1.zw = u_xlat1.xy * u_xlat1.xy;
					    u_xlat16.xz = u_xlat1.xy * u_xlat1.xw;
					    u_xlat5.yz = u_xlat1.zy * u_xlat16.xz;
					    u_xlat16.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = u_xlat16.x + _Glossiness;
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat48 = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat48 = u_xlat48 * 16.0;
					    u_xlat1.xyz = u_xlat7.xyz * vec3(u_xlat48);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xzw = vec3(u_xlat32) * u_xlat9.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat16.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xzw + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					bool u_xlatb49;
					float u_xlat50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb49 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb49){
					        u_xlatb49 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb49)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat49 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat50 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat49, u_xlat50);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat49 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat50 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat50 = inversesqrt(u_xlat50);
					    u_xlat5.xyz = vec3(u_xlat50) * u_xlat5.xyz;
					    u_xlat50 = (-_Glossiness) + 1.0;
					    u_xlat51 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat51 = u_xlat51 + u_xlat51;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat51)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat49) * _LightColor0.xyz;
					    u_xlatb49 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb49){
					        u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat49 = inversesqrt(u_xlat49);
					        u_xlat10.xyz = vec3(u_xlat49) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat49 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat49 = min(u_xlat11.z, u_xlat49);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat11.xy = (-vec2(u_xlat50)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat49 = u_xlat50 * u_xlat11.x;
					    u_xlat49 = u_xlat49 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat49);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xzw = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat49);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat50 * u_xlat50;
					    u_xlat48 = u_xlat32 * u_xlat32;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat49 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat49 + 1.00001001;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat49 = u_xlat50 * u_xlat50 + 0.5;
					    u_xlat16.x = u_xlat16.x * u_xlat49;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat16.x = u_xlat16.x * u_xlat17.x;
					    u_xlat16.x = u_xlat16.x * 4.0;
					    u_xlat16.x = u_xlat48 / u_xlat16.x;
					    u_xlat32 = u_xlat50 * u_xlat32;
					    u_xlat32 = (-u_xlat32) * u_xlat11.y + 1.0;
					    u_xlat48 = (-u_xlat0.x) + 1.0;
					    u_xlat48 = u_xlat48 + _Glossiness;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat16.xxx;
					    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat11.xzw * vec3(u_xlat32);
					    u_xlat17.x = (-u_xlat33) + 1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat4.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(u_xlat48);
					    u_xlat17.xyz = u_xlat17.xxx * u_xlat4.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat17.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					float u_xlat17;
					bool u_xlatb17;
					float u_xlat18;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					bool u_xlatb49;
					float u_xlat50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb49 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb49){
					        u_xlatb49 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb49)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat49 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat50 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat49, u_xlat50);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat49 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat50 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat50 = inversesqrt(u_xlat50);
					    u_xlat5.xyz = vec3(u_xlat50) * u_xlat5.xyz;
					    u_xlat50 = (-_Glossiness) + 1.0;
					    u_xlat51 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat51 = u_xlat51 + u_xlat51;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat51)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat49) * _LightColor0.xyz;
					    u_xlatb49 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb49){
					        u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat49 = inversesqrt(u_xlat49);
					        u_xlat10.xyz = vec3(u_xlat49) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat49 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat49 = min(u_xlat11.z, u_xlat49);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat49 = (-u_xlat50) * 0.699999988 + 1.70000005;
					    u_xlat49 = u_xlat49 * u_xlat50;
					    u_xlat49 = u_xlat49 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat49);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat49);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat17 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = dot(vec2(u_xlat32), vec2(u_xlat50));
					    u_xlat32 = u_xlat32 + -0.5;
					    u_xlat48 = (-u_xlat17) + 1.0;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat49 = u_xlat49 * u_xlat49;
					    u_xlat48 = u_xlat48 * u_xlat49;
					    u_xlat48 = u_xlat32 * u_xlat48 + 1.0;
					    u_xlat49 = -abs(u_xlat1.x) + 1.0;
					    u_xlat2.x = u_xlat49 * u_xlat49;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat49 = u_xlat49 * u_xlat2.x;
					    u_xlat32 = u_xlat32 * u_xlat49 + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat17 * u_xlat32;
					    u_xlat48 = u_xlat50 * u_xlat50;
					    u_xlat48 = max(u_xlat48, 0.00200000009);
					    u_xlat2.x = (-u_xlat48) + 1.0;
					    u_xlat18 = abs(u_xlat1.x) * u_xlat2.x + u_xlat48;
					    u_xlat2.x = u_xlat17 * u_xlat2.x + u_xlat48;
					    u_xlat1.x = abs(u_xlat1.x) * u_xlat2.x;
					    u_xlat1.x = u_xlat17 * u_xlat18 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat2.x = u_xlat48 * u_xlat48;
					    u_xlat18 = u_xlat33 * u_xlat2.x + (-u_xlat33);
					    u_xlat33 = u_xlat18 * u_xlat33 + 1.0;
					    u_xlat2.x = u_xlat2.x * 0.318309873;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat2.x / u_xlat33;
					    u_xlat1.x = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat17 * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.0;
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb17 = u_xlat17!=0.0;
					    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat17 * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat9.xyz;
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat16.x = u_xlat16.x * u_xlat32;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xxx + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat16.xyz = u_xlat11.xyz * vec3(u_xlat48);
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat49) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec3 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					bvec3 u_xlatb16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					vec2 u_xlat36;
					float u_xlat51;
					bool u_xlatb51;
					float u_xlat52;
					bool u_xlatb52;
					float u_xlat53;
					bool u_xlatb53;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat51 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat1.xyz = vec3(u_xlat51) * u_xlat1.xyz;
					    u_xlat51 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat52 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat51 = u_xlat51 * u_xlat19.x;
					    u_xlat52 = u_xlat52 * u_xlat19.x;
					    u_xlat2.x = u_xlat19.x * u_xlat2.x;
					    u_xlat36.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat36.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat36.xy = vs_TEXCOORD4.xy * vec2(u_xlat52) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat36.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat51) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat51 = u_xlat6.w + u_xlat7.w;
					    u_xlat51 = u_xlat51 * u_xlat3.w;
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat51 = float(1.0) / u_xlat51;
					    u_xlat51 = u_xlat51 + u_xlat3.w;
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = u_xlat51 + -0.400000006;
					    SV_Target0.w = u_xlat51 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat51 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat51 = min(u_xlat51, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat8.z = sqrt(u_xlat51);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat51 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat51 = min(u_xlat51, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat5.z = sqrt(u_xlat51);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat36.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat51 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat10.z = sqrt(u_xlat51);
					    u_xlat51 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat9.xyw = vec3(u_xlat51) * u_xlat10.xyz;
					    u_xlat51 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * _EmissionLightPow;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat51);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat36.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlatb51 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb51){
					        u_xlatb52 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb52)) ? u_xlat4.xyz : u_xlat0.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat52 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat53 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat52, u_xlat53);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat52 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat53 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat53 = inversesqrt(u_xlat53);
					    u_xlat4.xyz = vec3(u_xlat53) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat53 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat53 = u_xlat53 + u_xlat53;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat53)) + (-u_xlat1.xyz);
					    u_xlat9.xyz = vec3(u_xlat52) * _LightColor0.xyz;
					    if(u_xlatb51){
					        u_xlatb51 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat10.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat10.xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat10.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.xyz = (bool(u_xlatb51)) ? u_xlat10.xyz : u_xlat0.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat10.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat51 = u_xlat10.y * 0.25;
					        u_xlat52 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat53 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat51 = max(u_xlat51, u_xlat52);
					        u_xlat10.x = min(u_xlat53, u_xlat51);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat10.xzw);
					        u_xlat12.xyz = u_xlat10.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat12 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
					        u_xlat10.xyz = u_xlat10.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat11.x = dot(u_xlat11, u_xlat4);
					        u_xlat11.y = dot(u_xlat12, u_xlat4);
					        u_xlat11.z = dot(u_xlat10, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat11.x = dot(unity_SHAr, u_xlat4);
					        u_xlat11.y = dot(unity_SHAg, u_xlat4);
					        u_xlat11.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat10.xyz = u_xlat11.xyz + vs_TEXCOORD7.xyz;
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb51 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb51){
					        u_xlat51 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat51 = inversesqrt(u_xlat51);
					        u_xlat11.xyz = vec3(u_xlat51) * u_xlat8.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					        u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					        u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat12;
					            hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					            hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					            hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					            u_xlat12 = hlslcc_movcTemp;
					        }
					        u_xlat51 = min(u_xlat12.y, u_xlat12.x);
					        u_xlat51 = min(u_xlat12.z, u_xlat51);
					        u_xlat12.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat51) + u_xlat12.xyz;
					    } else {
					        u_xlat11.xyz = u_xlat8.xyz;
					    }
					    u_xlat51 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat51 = u_xlat51 * u_xlat5.x;
					    u_xlat51 = u_xlat51 * 6.0;
					    u_xlat11 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat51);
					    u_xlat52 = u_xlat11.w + -1.0;
					    u_xlat52 = unity_SpecCube0_HDR.w * u_xlat52 + 1.0;
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.y;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.x;
					    u_xlat12.xyz = u_xlat11.xyz * vec3(u_xlat52);
					    u_xlatb53 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb53){
					        u_xlatb53 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb53){
					            u_xlat53 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat53 = inversesqrt(u_xlat53);
					            u_xlat13.xyz = vec3(u_xlat53) * u_xlat8.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat13.xyz;
					            u_xlat15.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat15.xyz = u_xlat15.xyz / u_xlat13.xyz;
					            u_xlatb16.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb16.x) ? u_xlat14.x : u_xlat15.x;
					                hlslcc_movcTemp.y = (u_xlatb16.y) ? u_xlat14.y : u_xlat15.y;
					                hlslcc_movcTemp.z = (u_xlatb16.z) ? u_xlat14.z : u_xlat15.z;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat53 = min(u_xlat14.y, u_xlat14.x);
					            u_xlat53 = min(u_xlat14.z, u_xlat53);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat13.xyz * vec3(u_xlat53) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat51);
					        u_xlat51 = u_xlat0.w + -1.0;
					        u_xlat51 = unity_SpecCube1_HDR.w * u_xlat51 + 1.0;
					        u_xlat51 = log2(u_xlat51);
					        u_xlat51 = u_xlat51 * unity_SpecCube1_HDR.y;
					        u_xlat51 = exp2(u_xlat51);
					        u_xlat51 = u_xlat51 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51);
					        u_xlat8.xyz = vec3(u_xlat52) * u_xlat11.xyz + (-u_xlat0.xyz);
					        u_xlat12.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat17.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat53 = u_xlat52 + u_xlat52;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat53)) + u_xlat1.xyz;
					    u_xlat53 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.y = (-u_xlat52) + 1.0;
					    u_xlat4.zw = u_xlat4.xy * u_xlat4.xy;
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xw;
					    u_xlat5.yz = u_xlat4.zy * u_xlat1.xy;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz + u_xlat17.xyz;
					    u_xlat4.xyz = vec3(u_xlat53) * u_xlat9.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat10.xyz * u_xlat17.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat51 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * _ProjectionParams.z;
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat51 = u_xlat51 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat51) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec3 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					bvec3 u_xlatb16;
					vec3 u_xlat17;
					float u_xlat18;
					vec2 u_xlat20;
					float u_xlat34;
					float u_xlat35;
					vec2 u_xlat37;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					float u_xlat53;
					bool u_xlatb53;
					float u_xlat54;
					float u_xlat55;
					bool u_xlatb55;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat51 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * u_xlat1.xyz;
					    u_xlat52 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat53 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat20.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat20.x = u_xlat20.x * _DispAmp;
					    u_xlat52 = u_xlat52 * u_xlat20.x;
					    u_xlat53 = u_xlat53 * u_xlat20.x;
					    u_xlat3.x = u_xlat20.x * u_xlat3.x;
					    u_xlat37.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat20.x = u_xlat20.x * u_xlat37.x;
					    u_xlat20.x = u_xlat20.x / _DispMainTex_ST.y;
					    u_xlat20.xy = vs_TEXCOORD4.xy * u_xlat20.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat20.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat37.xy = vs_TEXCOORD4.xy * vec2(u_xlat53) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat37.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat52) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat52 = u_xlat7.w + u_xlat8.w;
					    u_xlat52 = u_xlat52 * u_xlat4.w;
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat52 = float(1.0) / u_xlat52;
					    u_xlat52 = u_xlat52 + u_xlat4.w;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 + -0.400000006;
					    SV_Target0.w = u_xlat52 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat9.z = sqrt(u_xlat52);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat6.z = sqrt(u_xlat52);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat37.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat52 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat11.z = sqrt(u_xlat52);
					    u_xlat52 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat10.xyw = vec3(u_xlat52) * u_xlat11.xyz;
					    u_xlat52 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * _EmissionLightPow;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat52);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat37.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb52 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb52){
					        u_xlatb53 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb53)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat53 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat54 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat53, u_xlat54);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat53 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat54 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat5.xyz = vec3(u_xlat54) * u_xlat5.xyz;
					    u_xlat54 = (-_Glossiness) + 1.0;
					    u_xlat55 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat55 = u_xlat55 + u_xlat55;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat55)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat53) * _LightColor0.xyz;
					    if(u_xlatb52){
					        u_xlatb52 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat10.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat10.xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat10.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.xyz = (bool(u_xlatb52)) ? u_xlat10.xyz : u_xlat0.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat10.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat52 = u_xlat10.y * 0.25;
					        u_xlat53 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat55 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat52 = max(u_xlat52, u_xlat53);
					        u_xlat10.x = min(u_xlat55, u_xlat52);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat10.xzw);
					        u_xlat12.xyz = u_xlat10.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat12 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
					        u_xlat10.xyz = u_xlat10.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(u_xlat11, u_xlat5);
					        u_xlat11.y = dot(u_xlat12, u_xlat5);
					        u_xlat11.z = dot(u_xlat10, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(unity_SHAr, u_xlat5);
					        u_xlat11.y = dot(unity_SHAg, u_xlat5);
					        u_xlat11.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat10.xyz = u_xlat11.xyz + vs_TEXCOORD7.xyz;
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb52 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb52){
					        u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat52 = inversesqrt(u_xlat52);
					        u_xlat11.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					        u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					        u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat12;
					            hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					            hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					            hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					            u_xlat12 = hlslcc_movcTemp;
					        }
					        u_xlat52 = min(u_xlat12.y, u_xlat12.x);
					        u_xlat52 = min(u_xlat12.z, u_xlat52);
					        u_xlat12.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat52) + u_xlat12.xyz;
					    } else {
					        u_xlat11.xyz = u_xlat6.xyz;
					    }
					    u_xlat12.xy = (-vec2(u_xlat54)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat52 = u_xlat54 * u_xlat12.x;
					    u_xlat52 = u_xlat52 * 6.0;
					    u_xlat11 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat52);
					    u_xlat53 = u_xlat11.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat53 + 1.0;
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat12.xzw = u_xlat11.xyz * vec3(u_xlat53);
					    u_xlatb55 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb55){
					        u_xlatb55 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb55){
					            u_xlat55 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat55 = inversesqrt(u_xlat55);
					            u_xlat13.xyz = vec3(u_xlat55) * u_xlat6.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat13.xyz;
					            u_xlat15.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat15.xyz = u_xlat15.xyz / u_xlat13.xyz;
					            u_xlatb16.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb16.x) ? u_xlat14.x : u_xlat15.x;
					                hlslcc_movcTemp.y = (u_xlatb16.y) ? u_xlat14.y : u_xlat15.y;
					                hlslcc_movcTemp.z = (u_xlatb16.z) ? u_xlat14.z : u_xlat15.z;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat55 = min(u_xlat14.y, u_xlat14.x);
					            u_xlat55 = min(u_xlat14.z, u_xlat55);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat13.xyz * vec3(u_xlat55) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat52);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat11.xyz + (-u_xlat0.xyz);
					        u_xlat12.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat17.xyz = u_xlat1.xyz * vec3(u_xlat51) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat17.xyz = u_xlat17.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat17.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat17.x = dot(_WorldSpaceLightPos0.xyz, u_xlat17.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat34 = u_xlat54 * u_xlat54;
					    u_xlat51 = u_xlat34 * u_xlat34;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat52 = u_xlat34 * u_xlat34 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat52 + 1.00001001;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = max(u_xlat17.x, 0.100000001);
					    u_xlat52 = u_xlat54 * u_xlat54 + 0.5;
					    u_xlat17.x = u_xlat17.x * u_xlat52;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat17.x = u_xlat17.x * u_xlat18;
					    u_xlat17.x = u_xlat17.x * 4.0;
					    u_xlat17.x = u_xlat51 / u_xlat17.x;
					    u_xlat34 = u_xlat54 * u_xlat34;
					    u_xlat34 = (-u_xlat34) * u_xlat12.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat17.xxx * u_xlat8.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat6.xyz * u_xlat10.xyz;
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat17.xyz = u_xlat12.xzw * vec3(u_xlat34);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat17.xyz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat51 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * _ProjectionParams.z;
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat51 = u_xlat51 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat51) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_14[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(13) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec3 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					bvec3 u_xlatb16;
					vec3 u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					vec2 u_xlat20;
					float u_xlat34;
					float u_xlat35;
					vec2 u_xlat37;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					float u_xlat53;
					bool u_xlatb53;
					float u_xlat54;
					float u_xlat55;
					bool u_xlatb55;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat51 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * u_xlat1.xyz;
					    u_xlat52 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat53 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat20.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat20.x = u_xlat20.x * _DispAmp;
					    u_xlat52 = u_xlat52 * u_xlat20.x;
					    u_xlat53 = u_xlat53 * u_xlat20.x;
					    u_xlat3.x = u_xlat20.x * u_xlat3.x;
					    u_xlat37.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat20.x = u_xlat20.x * u_xlat37.x;
					    u_xlat20.x = u_xlat20.x / _DispMainTex_ST.y;
					    u_xlat20.xy = vs_TEXCOORD4.xy * u_xlat20.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat20.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat37.xy = vs_TEXCOORD4.xy * vec2(u_xlat53) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat37.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat52) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat52 = u_xlat7.w + u_xlat8.w;
					    u_xlat52 = u_xlat52 * u_xlat4.w;
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat52 = float(1.0) / u_xlat52;
					    u_xlat52 = u_xlat52 + u_xlat4.w;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 + -0.400000006;
					    SV_Target0.w = u_xlat52 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat9.z = sqrt(u_xlat52);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat52 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat52 = min(u_xlat52, 1.0);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat6.z = sqrt(u_xlat52);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat37.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat52 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat52 = (-u_xlat52) + 1.0;
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat11.z = sqrt(u_xlat52);
					    u_xlat52 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat52 = inversesqrt(u_xlat52);
					    u_xlat10.xyw = vec3(u_xlat52) * u_xlat11.xyz;
					    u_xlat52 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat52 = max(u_xlat52, 0.0);
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * _EmissionLightPow;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat52);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat37.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlatb52 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb52){
					        u_xlatb53 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb53)) ? u_xlat5.xyz : u_xlat0.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat53 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat54 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat53, u_xlat54);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat53 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat54 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat5.xyz = vec3(u_xlat54) * u_xlat5.xyz;
					    u_xlat54 = (-_Glossiness) + 1.0;
					    u_xlat55 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat55 = u_xlat55 + u_xlat55;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat55)) + (-u_xlat2.xyz);
					    u_xlat9.xyz = vec3(u_xlat53) * _LightColor0.xyz;
					    if(u_xlatb52){
					        u_xlatb52 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat10.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat10.xyz;
					        u_xlat10.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat10.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.xyz = (bool(u_xlatb52)) ? u_xlat10.xyz : u_xlat0.xyz;
					        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat10.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat52 = u_xlat10.y * 0.25;
					        u_xlat53 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat55 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat52 = max(u_xlat52, u_xlat53);
					        u_xlat10.x = min(u_xlat55, u_xlat52);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat10.xzw);
					        u_xlat12.xyz = u_xlat10.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat12 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
					        u_xlat10.xyz = u_xlat10.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(u_xlat11, u_xlat5);
					        u_xlat11.y = dot(u_xlat12, u_xlat5);
					        u_xlat11.z = dot(u_xlat10, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat11.x = dot(unity_SHAr, u_xlat5);
					        u_xlat11.y = dot(unity_SHAg, u_xlat5);
					        u_xlat11.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat10.xyz = u_xlat11.xyz + vs_TEXCOORD7.xyz;
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb52 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb52){
					        u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat52 = inversesqrt(u_xlat52);
					        u_xlat11.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					        u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					        u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat12;
					            hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					            hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					            hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					            u_xlat12 = hlslcc_movcTemp;
					        }
					        u_xlat52 = min(u_xlat12.y, u_xlat12.x);
					        u_xlat52 = min(u_xlat12.z, u_xlat52);
					        u_xlat12.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat52) + u_xlat12.xyz;
					    } else {
					        u_xlat11.xyz = u_xlat6.xyz;
					    }
					    u_xlat52 = (-u_xlat54) * 0.699999988 + 1.70000005;
					    u_xlat52 = u_xlat52 * u_xlat54;
					    u_xlat52 = u_xlat52 * 6.0;
					    u_xlat11 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat52);
					    u_xlat53 = u_xlat11.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat53 + 1.0;
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat12.xyz = u_xlat11.xyz * vec3(u_xlat53);
					    u_xlatb55 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb55){
					        u_xlatb55 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb55){
					            u_xlat55 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat55 = inversesqrt(u_xlat55);
					            u_xlat13.xyz = vec3(u_xlat55) * u_xlat6.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat13.xyz;
					            u_xlat15.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat15.xyz = u_xlat15.xyz / u_xlat13.xyz;
					            u_xlatb16.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb16.x) ? u_xlat14.x : u_xlat15.x;
					                hlslcc_movcTemp.y = (u_xlatb16.y) ? u_xlat14.y : u_xlat15.y;
					                hlslcc_movcTemp.z = (u_xlatb16.z) ? u_xlat14.z : u_xlat15.z;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat55 = min(u_xlat14.y, u_xlat14.x);
					            u_xlat55 = min(u_xlat14.z, u_xlat55);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat13.xyz * vec3(u_xlat55) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat52);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat11.xyz + (-u_xlat0.xyz);
					        u_xlat12.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat17.xyz = u_xlat1.xyz * vec3(u_xlat51) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat17.xyz = u_xlat17.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat17.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat17.x = dot(_WorldSpaceLightPos0.xyz, u_xlat17.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat34 = u_xlat17.x * u_xlat17.x;
					    u_xlat34 = dot(vec2(u_xlat34), vec2(u_xlat54));
					    u_xlat34 = u_xlat34 + -0.5;
					    u_xlat51 = (-u_xlat18) + 1.0;
					    u_xlat52 = u_xlat51 * u_xlat51;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat34 * u_xlat51 + 1.0;
					    u_xlat52 = -abs(u_xlat1.x) + 1.0;
					    u_xlat2.x = u_xlat52 * u_xlat52;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat52 = u_xlat52 * u_xlat2.x;
					    u_xlat34 = u_xlat34 * u_xlat52 + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat51;
					    u_xlat34 = u_xlat18 * u_xlat34;
					    u_xlat51 = u_xlat54 * u_xlat54;
					    u_xlat51 = max(u_xlat51, 0.00200000009);
					    u_xlat2.x = (-u_xlat51) + 1.0;
					    u_xlat19 = abs(u_xlat1.x) * u_xlat2.x + u_xlat51;
					    u_xlat2.x = u_xlat18 * u_xlat2.x + u_xlat51;
					    u_xlat1.x = abs(u_xlat1.x) * u_xlat2.x;
					    u_xlat1.x = u_xlat18 * u_xlat19 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat2.x = u_xlat51 * u_xlat51;
					    u_xlat19 = u_xlat35 * u_xlat2.x + (-u_xlat35);
					    u_xlat35 = u_xlat19 * u_xlat35 + 1.0;
					    u_xlat2.x = u_xlat2.x * 0.318309873;
					    u_xlat35 = u_xlat35 * u_xlat35 + 1.00000001e-07;
					    u_xlat35 = u_xlat2.x / u_xlat35;
					    u_xlat1.x = u_xlat35 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat51 = u_xlat51 * u_xlat51 + 1.0;
					    u_xlat51 = float(1.0) / u_xlat51;
					    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat18 * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat9.xyz * vec3(u_xlat34) + u_xlat10.xyz;
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat34 = u_xlat17.x * u_xlat17.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat17.x = u_xlat17.x * u_xlat34;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat17.xxx + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat17.xyz = u_xlat12.xyz * vec3(u_xlat51);
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat52) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat17.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat51 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * _ProjectionParams.z;
					    u_xlat51 = max(u_xlat51, 0.0);
					    u_xlat51 = u_xlat51 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat51) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(14) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat34;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat1.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat48 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat48 = u_xlat48 * u_xlat18.x;
					    u_xlat49 = u_xlat49 * u_xlat18.x;
					    u_xlat2.x = u_xlat18.x * u_xlat2.x;
					    u_xlat34.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat34.x;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD4.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat34.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat34.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat48) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat48 = u_xlat6.w + u_xlat7.w;
					    u_xlat48 = u_xlat48 * u_xlat3.w;
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat48 = u_xlat48 + u_xlat3.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat48 = u_xlat48 + -0.400000006;
					    SV_Target0.w = u_xlat48 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat5.z = sqrt(u_xlat48);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat34.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat48 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat48 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat9.xyw = vec3(u_xlat48) * u_xlat10.xyz;
					    u_xlat48 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = log2(u_xlat48);
					    u_xlat48 = u_xlat48 * _EmissionLightPow;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat48);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat34.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat4.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat48 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat48)) + (-u_xlat1.xyz);
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat48 = log2(u_xlat9.w);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.y;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat10.xyz = vec3(u_xlat48) * u_xlat8.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat48 = min(u_xlat11.z, u_xlat48);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat8.xyz;
					    }
					    u_xlat48 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat48 * u_xlat5.x;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat48);
					    u_xlat49 = u_xlat10.w + -1.0;
					    u_xlat49 = unity_SpecCube0_HDR.w * u_xlat49 + 1.0;
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat12.xyz = vec3(u_xlat50) * u_xlat8.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat50 = min(u_xlat13.z, u_xlat50);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat12.xyz * vec3(u_xlat50) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat48);
					        u_xlat48 = u_xlat0.w + -1.0;
					        u_xlat48 = unity_SpecCube1_HDR.w * u_xlat48 + 1.0;
					        u_xlat48 = log2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.y;
					        u_xlat48 = exp2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48);
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat49 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat50 = u_xlat49 + u_xlat49;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat50)) + u_xlat1.xyz;
					    u_xlat50 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat49 = u_xlat49;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.y = (-u_xlat49) + 1.0;
					    u_xlat4.zw = u_xlat4.xy * u_xlat4.xy;
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xw;
					    u_xlat5.yz = u_xlat4.zy * u_xlat1.xy;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz + u_xlat16.xyz;
					    u_xlat4.xyz = vec3(u_xlat50) * _LightColor0.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat16.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat17.z = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat9.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat50);
					    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb50){
					        u_xlat50 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat50 = inversesqrt(u_xlat50);
					        u_xlat10.xyz = vec3(u_xlat50) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat50 = min(u_xlat11.z, u_xlat50);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat11.xy = (-u_xlat17.zz) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat50 = u_xlat17.z * u_xlat11.x;
					    u_xlat50 = u_xlat50 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat50);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xzw = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat50);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = u_xlat17.z * u_xlat17.z;
					    u_xlat48 = u_xlat16.y * u_xlat16.y;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat2.x = u_xlat16.y * u_xlat16.y + -1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat2.x + 1.00001001;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat2.x = u_xlat17.z * u_xlat17.z + 0.5;
					    u_xlat16.x = u_xlat16.x * u_xlat2.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat16.xy = u_xlat17.xz * u_xlat16.xy;
					    u_xlat16.x = u_xlat16.x * 4.0;
					    u_xlat16.x = u_xlat48 / u_xlat16.x;
					    u_xlat32 = (-u_xlat16.y) * u_xlat11.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat16.xyz = u_xlat11.xzw * vec3(u_xlat32);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					bool u_xlatb17;
					vec3 u_xlat18;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat51;
					bool u_xlatb51;
					float u_xlat52;
					float u_xlat53;
					bool u_xlatb53;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat49 = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat9.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlatb51 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb51){
					        u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat51 = inversesqrt(u_xlat51);
					        u_xlat10.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat51 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat51 = min(u_xlat11.z, u_xlat51);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat51) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat51 = (-u_xlat49) * 0.699999988 + 1.70000005;
					    u_xlat51 = u_xlat49 * u_xlat51;
					    u_xlat51 = u_xlat51 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat51);
					    u_xlat52 = u_xlat10.w + -1.0;
					    u_xlat52 = unity_SpecCube0_HDR.w * u_xlat52 + 1.0;
					    u_xlat52 = log2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.y;
					    u_xlat52 = exp2(u_xlat52);
					    u_xlat52 = u_xlat52 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat52);
					    u_xlatb53 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb53){
					        u_xlatb53 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb53){
					            u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat53 = inversesqrt(u_xlat53);
					            u_xlat12.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat53 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat53 = min(u_xlat13.z, u_xlat53);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat53) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat51);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat52) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat17.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = dot(vec2(u_xlat32), vec2(u_xlat49));
					    u_xlat32 = u_xlat32 + -0.5;
					    u_xlat48 = (-u_xlat17.x) + 1.0;
					    u_xlat2.x = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat2.x;
					    u_xlat48 = u_xlat32 * u_xlat48 + 1.0;
					    u_xlat2.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat18.x = u_xlat2.x * u_xlat2.x;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat2.x = u_xlat2.x * u_xlat18.x;
					    u_xlat32 = u_xlat32 * u_xlat2.x + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat17.x * u_xlat32;
					    u_xlat48 = u_xlat49 * u_xlat49;
					    u_xlat48 = max(u_xlat48, 0.00200000009);
					    u_xlat49 = (-u_xlat48) + 1.0;
					    u_xlat18.x = abs(u_xlat1.x) * u_xlat49 + u_xlat48;
					    u_xlat49 = u_xlat17.x * u_xlat49 + u_xlat48;
					    u_xlat1.x = u_xlat49 * abs(u_xlat1.x);
					    u_xlat1.x = u_xlat17.x * u_xlat18.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat18.x = u_xlat33 * u_xlat49 + (-u_xlat33);
					    u_xlat33 = u_xlat18.x * u_xlat33 + 1.0;
					    u_xlat49 = u_xlat49 * 0.318309873;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat49 / u_xlat33;
					    u_xlat1.x = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.0;
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat17.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb17 = u_xlat17.x!=0.0;
					    u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat17.xyz = vec3(u_xlat32) * _LightColor0.xyz;
					    u_xlat17.xyz = vec3(u_xlat50) * u_xlat9.xyz + u_xlat17.xyz;
					    u_xlat18.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat16.x = u_xlat16.x * u_xlat32;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xxx + u_xlat8.xyz;
					    u_xlat18.xyz = u_xlat18.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat17.xyz + u_xlat18.xyz;
					    u_xlat16.xyz = u_xlat11.xyz * vec3(u_xlat48);
					    u_xlat18.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat18.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(12) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(14) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(15) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat34;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat1.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat48 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat48 = u_xlat48 * u_xlat18.x;
					    u_xlat49 = u_xlat49 * u_xlat18.x;
					    u_xlat2.x = u_xlat18.x * u_xlat2.x;
					    u_xlat34.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat34.x;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD4.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat34.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat34.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat48) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat48 = u_xlat6.w + u_xlat7.w;
					    u_xlat48 = u_xlat48 * u_xlat3.w;
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat48 = u_xlat48 + u_xlat3.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat48 = u_xlat48 + -0.400000006;
					    SV_Target0.w = u_xlat48 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat5.z = sqrt(u_xlat48);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat34.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat48 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat48 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat9.xyw = vec3(u_xlat48) * u_xlat10.xyz;
					    u_xlat48 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = log2(u_xlat48);
					    u_xlat48 = u_xlat48 * _EmissionLightPow;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat48);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat34.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat4.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					    u_xlat5.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
					    u_xlat48 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat8.xyz = u_xlat4.xyz * (-vec3(u_xlat48)) + (-u_xlat1.xyz);
					    u_xlatb48 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb48){
					        u_xlatb48 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat9.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat9.xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb48)) ? u_xlat9.xyz : u_xlat0.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat9.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat48 = u_xlat9.y * 0.25;
					        u_xlat49 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat50 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat48 = max(u_xlat48, u_xlat49);
					        u_xlat9.x = min(u_xlat50, u_xlat48);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat9.xzw);
					        u_xlat11.xyz = u_xlat9.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat11.xyz);
					        u_xlat9.xyz = u_xlat9.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat10.x = dot(u_xlat10, u_xlat4);
					        u_xlat10.y = dot(u_xlat11, u_xlat4);
					        u_xlat10.z = dot(u_xlat9, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat10.x = dot(unity_SHAr, u_xlat4);
					        u_xlat10.y = dot(unity_SHAg, u_xlat4);
					        u_xlat10.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat9 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat11.x = dot(unity_SHBr, u_xlat9);
					    u_xlat11.y = dot(unity_SHBg, u_xlat9);
					    u_xlat11.z = dot(unity_SHBb, u_xlat9);
					    u_xlat48 = u_xlat4.y * u_xlat4.y;
					    u_xlat48 = u_xlat4.x * u_xlat4.x + (-u_xlat48);
					    u_xlat9.xyz = unity_SHC.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + u_xlat10.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat48 = log2(u_xlat10.w);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.y;
					    u_xlat48 = exp2(u_xlat48);
					    u_xlat48 = u_xlat48 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = vec3(u_xlat48) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat10.xyz = vec3(u_xlat48) * u_xlat8.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat48 = min(u_xlat11.z, u_xlat48);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat48) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat8.xyz;
					    }
					    u_xlat48 = (-u_xlat5.x) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat48 * u_xlat5.x;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat48);
					    u_xlat49 = u_xlat10.w + -1.0;
					    u_xlat49 = unity_SpecCube0_HDR.w * u_xlat49 + 1.0;
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat8.xyz, u_xlat8.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat12.xyz = vec3(u_xlat50) * u_xlat8.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat50 = min(u_xlat13.z, u_xlat50);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat8.xyz = u_xlat12.xyz * vec3(u_xlat50) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat48);
					        u_xlat48 = u_xlat0.w + -1.0;
					        u_xlat48 = unity_SpecCube1_HDR.w * u_xlat48 + 1.0;
					        u_xlat48 = log2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.y;
					        u_xlat48 = exp2(u_xlat48);
					        u_xlat48 = u_xlat48 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48);
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat49 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat50 = u_xlat49 + u_xlat49;
					    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat50)) + u_xlat1.xyz;
					    u_xlat50 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat49 = u_xlat49;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.y = (-u_xlat49) + 1.0;
					    u_xlat4.zw = u_xlat4.xy * u_xlat4.xy;
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xw;
					    u_xlat5.yz = u_xlat4.zy * u_xlat1.xy;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat5.yw).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz + u_xlat16.xyz;
					    u_xlat4.xyz = vec3(u_xlat50) * _LightColor0.xyz;
					    u_xlat3.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat3.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat16.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat17.z = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlatb50 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb50){
					        u_xlatb50 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat9.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat9.xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb50)) ? u_xlat9.xyz : u_xlat0.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat9.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat50 = u_xlat9.y * 0.25;
					        u_xlat51 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat52 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat50 = max(u_xlat50, u_xlat51);
					        u_xlat9.x = min(u_xlat52, u_xlat50);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat9.xzw);
					        u_xlat11.xyz = u_xlat9.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat11.xyz);
					        u_xlat9.xyz = u_xlat9.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(u_xlat10, u_xlat5);
					        u_xlat10.y = dot(u_xlat11, u_xlat5);
					        u_xlat10.z = dot(u_xlat9, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(unity_SHAr, u_xlat5);
					        u_xlat10.y = dot(unity_SHAg, u_xlat5);
					        u_xlat10.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat9 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat11.x = dot(unity_SHBr, u_xlat9);
					    u_xlat11.y = dot(unity_SHBg, u_xlat9);
					    u_xlat11.z = dot(unity_SHBb, u_xlat9);
					    u_xlat50 = u_xlat5.y * u_xlat5.y;
					    u_xlat50 = u_xlat5.x * u_xlat5.x + (-u_xlat50);
					    u_xlat9.xyz = unity_SHC.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + u_xlat10.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat10.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = vec3(u_xlat50) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb50){
					        u_xlat50 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat50 = inversesqrt(u_xlat50);
					        u_xlat10.xyz = vec3(u_xlat50) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat50 = min(u_xlat11.z, u_xlat50);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat11.xy = (-u_xlat17.zz) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat50 = u_xlat17.z * u_xlat11.x;
					    u_xlat50 = u_xlat50 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat50);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xzw = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat50);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = u_xlat17.z * u_xlat17.z;
					    u_xlat48 = u_xlat16.y * u_xlat16.y;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat2.x = u_xlat16.y * u_xlat16.y + -1.0;
					    u_xlat17.x = u_xlat17.x * u_xlat2.x + 1.00001001;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat2.x = u_xlat17.z * u_xlat17.z + 0.5;
					    u_xlat16.x = u_xlat16.x * u_xlat2.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x;
					    u_xlat16.xy = u_xlat17.xz * u_xlat16.xy;
					    u_xlat16.x = u_xlat16.x * 4.0;
					    u_xlat16.x = u_xlat48 / u_xlat16.x;
					    u_xlat32 = (-u_xlat16.y) * u_xlat11.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat16.xyz = u_xlat11.xzw * vec3(u_xlat32);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_15[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					bvec3 u_xlatb15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					bool u_xlatb17;
					vec3 u_xlat18;
					vec2 u_xlat19;
					float u_xlat32;
					float u_xlat33;
					vec2 u_xlat35;
					float u_xlat48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					float u_xlat51;
					float u_xlat52;
					bool u_xlatb52;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat48 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat48 = inversesqrt(u_xlat48);
					    u_xlat2.xyz = vec3(u_xlat48) * u_xlat1.xyz;
					    u_xlat49 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat50 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat19.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat19.x = u_xlat19.x * _DispAmp;
					    u_xlat49 = u_xlat49 * u_xlat19.x;
					    u_xlat50 = u_xlat50 * u_xlat19.x;
					    u_xlat3.x = u_xlat19.x * u_xlat3.x;
					    u_xlat35.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19.x = u_xlat19.x * u_xlat35.x;
					    u_xlat19.x = u_xlat19.x / _DispMainTex_ST.y;
					    u_xlat19.xy = vs_TEXCOORD4.xy * u_xlat19.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat19.xy);
					    u_xlat3.xy = vs_TEXCOORD4.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat35.xy = vs_TEXCOORD4.xy * vec2(u_xlat50) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD4.xy * vec2(u_xlat49) + u_xlat6.zw;
					    u_xlat8 = texture(_MainTexHead, u_xlat6.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat8.xyz;
					    u_xlat5.xyz = u_xlat8.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat8.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat49 = u_xlat7.w + u_xlat8.w;
					    u_xlat49 = u_xlat49 * u_xlat4.w;
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat49 = float(1.0) / u_xlat49;
					    u_xlat49 = u_xlat49 + u_xlat4.w;
					    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
					    u_xlat49 = u_xlat49 + -0.400000006;
					    SV_Target0.w = u_xlat49 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat9.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat9.x = u_xlat9.z * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat9.z = sqrt(u_xlat49);
					    u_xlat6.xyz = texture(_NormalMapHead, u_xlat6.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat6.xyz = (-u_xlat9.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat8.www * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat3.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat3.x = 0.0;
					    u_xlat3.xy = u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat9.xyz = texture(_EmissionFade, u_xlat3.xy).xyz;
					    u_xlat10.xyz = texture(_EmissionLight, u_xlat35.xy).xyz;
					    u_xlat3.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat11.xy = (-u_xlat3.xy);
					    u_xlat49 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat49 = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat10.xyw = vec3(u_xlat49) * u_xlat11.xyz;
					    u_xlat49 = dot(u_xlat6.xyz, u_xlat10.xyw);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat49 = log2(u_xlat49);
					    u_xlat49 = u_xlat49 * _EmissionLightPow;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat49);
					    u_xlat5.xyz = u_xlat10.zzz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat3.xyz = texture(_Emission, u_xlat35.xy).xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
					    u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat49 = inversesqrt(u_xlat49);
					    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
					    u_xlat49 = (-_Glossiness) + 1.0;
					    u_xlat50 = dot((-u_xlat2.xyz), u_xlat5.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat5.xyz * (-vec3(u_xlat50)) + (-u_xlat2.xyz);
					    u_xlatb50 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb50){
					        u_xlatb50 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat9.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat9.xyz;
					        u_xlat9.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb50)) ? u_xlat9.xyz : u_xlat0.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat9.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat50 = u_xlat9.y * 0.25;
					        u_xlat51 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat52 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat50 = max(u_xlat50, u_xlat51);
					        u_xlat9.x = min(u_xlat52, u_xlat50);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat9.xzw);
					        u_xlat11.xyz = u_xlat9.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat11 = texture(unity_ProbeVolumeSH, u_xlat11.xyz);
					        u_xlat9.xyz = u_xlat9.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(u_xlat10, u_xlat5);
					        u_xlat10.y = dot(u_xlat11, u_xlat5);
					        u_xlat10.z = dot(u_xlat9, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat10.x = dot(unity_SHAr, u_xlat5);
					        u_xlat10.y = dot(unity_SHAg, u_xlat5);
					        u_xlat10.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat9 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat11.x = dot(unity_SHBr, u_xlat9);
					    u_xlat11.y = dot(unity_SHBg, u_xlat9);
					    u_xlat11.z = dot(unity_SHBb, u_xlat9);
					    u_xlat50 = u_xlat5.y * u_xlat5.y;
					    u_xlat50 = u_xlat5.x * u_xlat5.x + (-u_xlat50);
					    u_xlat9.xyz = unity_SHC.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + u_xlat10.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat50 = log2(u_xlat10.w);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.y;
					    u_xlat50 = exp2(u_xlat50);
					    u_xlat50 = u_xlat50 * unity_Lightmap_HDR.x;
					    u_xlat9.xyz = vec3(u_xlat50) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb50){
					        u_xlat50 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat50 = inversesqrt(u_xlat50);
					        u_xlat10.xyz = vec3(u_xlat50) * u_xlat6.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					        u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					        u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat11;
					            hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					            hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					            hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					            u_xlat11 = hlslcc_movcTemp;
					        }
					        u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					        u_xlat50 = min(u_xlat11.z, u_xlat50);
					        u_xlat11.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					    } else {
					        u_xlat10.xyz = u_xlat6.xyz;
					    }
					    u_xlat50 = (-u_xlat49) * 0.699999988 + 1.70000005;
					    u_xlat50 = u_xlat49 * u_xlat50;
					    u_xlat50 = u_xlat50 * 6.0;
					    u_xlat10 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat50);
					    u_xlat51 = u_xlat10.w + -1.0;
					    u_xlat51 = unity_SpecCube0_HDR.w * u_xlat51 + 1.0;
					    u_xlat51 = log2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.y;
					    u_xlat51 = exp2(u_xlat51);
					    u_xlat51 = u_xlat51 * unity_SpecCube0_HDR.x;
					    u_xlat11.xyz = u_xlat10.xyz * vec3(u_xlat51);
					    u_xlatb52 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb52){
					        u_xlatb52 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb52){
					            u_xlat52 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat52 = inversesqrt(u_xlat52);
					            u_xlat12.xyz = vec3(u_xlat52) * u_xlat6.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat12.xyz;
					            u_xlat14.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat14.xyz = u_xlat14.xyz / u_xlat12.xyz;
					            u_xlatb15.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat12.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat13;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? u_xlat13.x : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? u_xlat13.y : u_xlat14.y;
					                hlslcc_movcTemp.z = (u_xlatb15.z) ? u_xlat13.z : u_xlat14.z;
					                u_xlat13 = hlslcc_movcTemp;
					            }
					            u_xlat52 = min(u_xlat13.y, u_xlat13.x);
					            u_xlat52 = min(u_xlat13.z, u_xlat52);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat52) + u_xlat0.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat50);
					        u_xlat0.x = u_xlat6.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx;
					        u_xlat6.xyz = vec3(u_xlat51) * u_xlat10.xyz + (-u_xlat0.xyz);
					        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat0.x = max(u_xlat8.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat16.xyz = u_xlat1.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat16.xyz, u_xlat16.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat17.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = dot(vec2(u_xlat32), vec2(u_xlat49));
					    u_xlat32 = u_xlat32 + -0.5;
					    u_xlat48 = (-u_xlat17.x) + 1.0;
					    u_xlat2.x = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat2.x;
					    u_xlat48 = u_xlat32 * u_xlat48 + 1.0;
					    u_xlat2.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat18.x = u_xlat2.x * u_xlat2.x;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat2.x = u_xlat2.x * u_xlat18.x;
					    u_xlat32 = u_xlat32 * u_xlat2.x + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat17.x * u_xlat32;
					    u_xlat48 = u_xlat49 * u_xlat49;
					    u_xlat48 = max(u_xlat48, 0.00200000009);
					    u_xlat49 = (-u_xlat48) + 1.0;
					    u_xlat18.x = abs(u_xlat1.x) * u_xlat49 + u_xlat48;
					    u_xlat49 = u_xlat17.x * u_xlat49 + u_xlat48;
					    u_xlat1.x = u_xlat49 * abs(u_xlat1.x);
					    u_xlat1.x = u_xlat17.x * u_xlat18.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat18.x = u_xlat33 * u_xlat49 + (-u_xlat33);
					    u_xlat33 = u_xlat18.x * u_xlat33 + 1.0;
					    u_xlat49 = u_xlat49 * 0.318309873;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat49 / u_xlat33;
					    u_xlat1.x = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.0;
					    u_xlat48 = float(1.0) / u_xlat48;
					    u_xlat17.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb17 = u_xlat17.x!=0.0;
					    u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat17.x * u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat17.xyz = _LightColor0.xyz * vec3(u_xlat32) + u_xlat9.xyz;
					    u_xlat18.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat32 = u_xlat16.x * u_xlat16.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat16.x = u_xlat16.x * u_xlat32;
					    u_xlat5.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xxx + u_xlat8.xyz;
					    u_xlat18.xyz = u_xlat18.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat17.xyz + u_xlat18.xyz;
					    u_xlat16.xyz = u_xlat11.xyz * vec3(u_xlat48);
					    u_xlat18.xyz = (-_Specular.xyz) * u_xlat4.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat18.xyz + u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat16.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat48 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat48 = u_xlat48 * _ProjectionParams.z;
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat48 = u_xlat48 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat48) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat17;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlat8 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat8.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat45);
					    u_xlat46 = u_xlat9.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = log2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat11.xyz = vec3(u_xlat47) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat47 = min(u_xlat12.z, u_xlat47);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat47) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat45);
					        u_xlat45 = u_xlat0.w + -1.0;
					        u_xlat45 = unity_SpecCube1_HDR.w * u_xlat45 + 1.0;
					        u_xlat45 = log2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.y;
					        u_xlat45 = exp2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45);
					        u_xlat5.xyz = vec3(u_xlat46) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat15.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16.x = u_xlat1.x * u_xlat16.x;
					    u_xlat1.x = u_xlat1.x * u_xlat16.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat15.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat45 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlat8 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat8.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat10.xy = (-vec2(u_xlat45)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat46 = u_xlat45 * u_xlat10.x;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xzw = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = u_xlat45 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat10.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xzw * vec3(u_xlat30);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat45 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(3) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlat8 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat8.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat46 = u_xlat45 * u_xlat46;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = max(u_xlat30, 0.00200000009);
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat30;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x + _Glossiness;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xyz * vec3(u_xlat30);
					    u_xlat15 = -abs(u_xlat15) + 1.0;
					    u_xlat30 = u_xlat15 * u_xlat15;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat15 = u_xlat15 * u_xlat30;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat45 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat17;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					float u_xlat48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlatb46 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb46){
					        u_xlatb46 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat8.xyz : u_xlat0.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat46 = u_xlat8.y * 0.25;
					        u_xlat47 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat48 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat46 = max(u_xlat46, u_xlat47);
					        u_xlat8.x = min(u_xlat48, u_xlat46);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					        u_xlat10.xyz = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat8.xyz = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(u_xlat9, u_xlat4);
					        u_xlat9.y = dot(u_xlat10, u_xlat4);
					        u_xlat9.z = dot(u_xlat8, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(unity_SHAr, u_xlat4);
					        u_xlat9.y = dot(unity_SHAg, u_xlat4);
					        u_xlat9.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat8 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat10.x = dot(unity_SHBr, u_xlat8);
					    u_xlat10.y = dot(unity_SHBg, u_xlat8);
					    u_xlat10.z = dot(unity_SHBb, u_xlat8);
					    u_xlat46 = u_xlat4.y * u_xlat4.y;
					    u_xlat46 = u_xlat4.x * u_xlat4.x + (-u_xlat46);
					    u_xlat8.xyz = unity_SHC.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat9.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat45);
					    u_xlat46 = u_xlat9.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = log2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat11.xyz = vec3(u_xlat47) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat47 = min(u_xlat12.z, u_xlat47);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat47) + u_xlat0.xyz;
					        }
					        u_xlat0 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat45);
					        u_xlat45 = u_xlat0.w + -1.0;
					        u_xlat45 = unity_SpecCube1_HDR.w * u_xlat45 + 1.0;
					        u_xlat45 = log2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.y;
					        u_xlat45 = exp2(u_xlat45);
					        u_xlat45 = u_xlat45 * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45);
					        u_xlat5.xyz = vec3(u_xlat46) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat15.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16.x = u_xlat1.x * u_xlat16.x;
					    u_xlat1.x = u_xlat1.x * u_xlat16.x;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16.xyz = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat15.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat45 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlatb46 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb46){
					        u_xlatb46 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat8.xyz : u_xlat0.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat46 = u_xlat8.y * 0.25;
					        u_xlat47 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat48 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat46 = max(u_xlat46, u_xlat47);
					        u_xlat8.x = min(u_xlat48, u_xlat46);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					        u_xlat10.xyz = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat8.xyz = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(u_xlat9, u_xlat4);
					        u_xlat9.y = dot(u_xlat10, u_xlat4);
					        u_xlat9.z = dot(u_xlat8, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(unity_SHAr, u_xlat4);
					        u_xlat9.y = dot(unity_SHAg, u_xlat4);
					        u_xlat9.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat8 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat10.x = dot(unity_SHBr, u_xlat8);
					    u_xlat10.y = dot(unity_SHBg, u_xlat8);
					    u_xlat10.z = dot(unity_SHBb, u_xlat8);
					    u_xlat46 = u_xlat4.y * u_xlat4.y;
					    u_xlat46 = u_xlat4.x * u_xlat4.x + (-u_xlat46);
					    u_xlat8.xyz = unity_SHC.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat9.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat10.xy = (-vec2(u_xlat45)) * vec2(0.699999988, 0.0799999982) + vec2(1.70000005, 0.600000024);
					    u_xlat46 = u_xlat45 * u_xlat10.x;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xzw = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = u_xlat45 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat10.y + 1.0;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xzw * vec3(u_xlat30);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat45 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						float _Glossiness;
						float _EmissionScale;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						float _EmissionFadeSpeed;
						float _EmissionLightScale;
						float _EmissionLightPow;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_13[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					UNITY_BINDING(5) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _EmissionFade;
					UNITY_LOCATION(9) uniform  sampler2D _EmissionLight;
					UNITY_LOCATION(10) uniform  sampler2D _Emission;
					UNITY_LOCATION(11) uniform  sampler2D unity_Lightmap;
					UNITY_LOCATION(12) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(13) uniform  samplerCube unity_SpecCube1;
					UNITY_LOCATION(14) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec4 vs_TEXCOORD1;
					layout(location = 2) in  vec4 vs_TEXCOORD2;
					layout(location = 3) in  vec4 vs_TEXCOORD3;
					layout(location = 4) in  vec4 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					float u_xlat15;
					vec2 u_xlat17;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					float u_xlat48;
					bool u_xlatb48;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = texture(_DispMainTex, vs_TEXCOORD4.zw).x;
					    u_xlat46 = texture(_DispMainTex, vs_TEXCOORD5.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat17.x = texture(_DispVerticalTex, vs_TEXCOORD6.xy).x;
					    u_xlat17.x = u_xlat17.x * _DispAmp;
					    u_xlat45 = u_xlat45 * u_xlat17.x;
					    u_xlat46 = u_xlat46 * u_xlat17.x;
					    u_xlat2.x = u_xlat17.x * u_xlat2.x;
					    u_xlat32.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat17.x = u_xlat17.x * u_xlat32.x;
					    u_xlat17.x = u_xlat17.x / _DispMainTex_ST.y;
					    u_xlat17.xy = vs_TEXCOORD4.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat17.xy);
					    u_xlat2.xy = vs_TEXCOORD4.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD4.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat32.xy = vs_TEXCOORD4.xy * vec2(u_xlat46) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD4.xy * vec2(u_xlat45) + u_xlat5.zw;
					    u_xlat7 = texture(_MainTexHead, u_xlat5.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat7.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat45 = u_xlat6.w + u_xlat7.w;
					    u_xlat45 = u_xlat45 * u_xlat3.w;
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat45 = float(1.0) / u_xlat45;
					    u_xlat45 = u_xlat45 + u_xlat3.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = u_xlat45 + -0.400000006;
					    SV_Target0.w = u_xlat45 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat8.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat8.x = u_xlat8.z * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat8.z = sqrt(u_xlat45);
					    u_xlat5.xyz = texture(_NormalMapHead, u_xlat5.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + u_xlat8.xyz;
					    u_xlat2.y = _EmissionFadeSpeed * _Time.y;
					    u_xlat2.x = 0.0;
					    u_xlat2.xy = u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat8.xyz = texture(_EmissionFade, u_xlat2.xy).xyz;
					    u_xlat9.xyz = texture(_EmissionLight, u_xlat32.xy).xyz;
					    u_xlat2.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = (-u_xlat2.xy);
					    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat45 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat9.xyw = vec3(u_xlat45) * u_xlat10.xyz;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat9.xyw);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = log2(u_xlat45);
					    u_xlat45 = u_xlat45 * _EmissionLightPow;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat45);
					    u_xlat4.xyz = u_xlat9.zzz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_EmissionLightScale, _EmissionLightScale, _EmissionLightScale));
					    u_xlat2.xyz = texture(_Emission, u_xlat32.xy).xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_EmissionScale, _EmissionScale, _EmissionScale));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat8.xyz + u_xlat4.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
					    u_xlat45 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat4.xyz;
					    u_xlat45 = (-_Glossiness) + 1.0;
					    u_xlat46 = dot((-u_xlat1.xyz), u_xlat4.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat46)) + (-u_xlat1.xyz);
					    u_xlatb46 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb46){
					        u_xlatb46 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat8.xyz : u_xlat0.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat46 = u_xlat8.y * 0.25;
					        u_xlat47 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat48 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat46 = max(u_xlat46, u_xlat47);
					        u_xlat8.x = min(u_xlat48, u_xlat46);
					        u_xlat9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					        u_xlat10.xyz = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10 = texture(unity_ProbeVolumeSH, u_xlat10.xyz);
					        u_xlat8.xyz = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(u_xlat9, u_xlat4);
					        u_xlat9.y = dot(u_xlat10, u_xlat4);
					        u_xlat9.z = dot(u_xlat8, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat9.x = dot(unity_SHAr, u_xlat4);
					        u_xlat9.y = dot(unity_SHAg, u_xlat4);
					        u_xlat9.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat8 = u_xlat4.yzzx * u_xlat4.xyzz;
					    u_xlat10.x = dot(unity_SHBr, u_xlat8);
					    u_xlat10.y = dot(unity_SHBg, u_xlat8);
					    u_xlat10.z = dot(unity_SHBb, u_xlat8);
					    u_xlat46 = u_xlat4.y * u_xlat4.y;
					    u_xlat46 = u_xlat4.x * u_xlat4.x + (-u_xlat46);
					    u_xlat8.xyz = unity_SHC.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9 = texture(unity_Lightmap, vs_TEXCOORD7.xy);
					    u_xlat46 = log2(u_xlat9.w);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_Lightmap_HDR.x;
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat9.xyz = vec3(u_xlat46) * u_xlat5.xyz;
					        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat46 = min(u_xlat10.z, u_xlat46);
					        u_xlat10.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat5.xyz;
					    }
					    u_xlat46 = (-u_xlat45) * 0.699999988 + 1.70000005;
					    u_xlat46 = u_xlat45 * u_xlat46;
					    u_xlat46 = u_xlat46 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat46);
					    u_xlat47 = u_xlat9.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat47 + 1.0;
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat47);
					    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb48){
					        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb48){
					            u_xlat48 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat48 = inversesqrt(u_xlat48);
					            u_xlat11.xyz = vec3(u_xlat48) * u_xlat5.xyz;
					            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat48 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat48 = min(u_xlat12.z, u_xlat48);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat11.xyz * vec3(u_xlat48) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat46);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat47) * u_xlat9.xyz + (-u_xlat0.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.x = max(u_xlat7.y, u_xlat7.x);
					    u_xlat0.x = max(u_xlat7.z, u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat45 * u_xlat45;
					    u_xlat30 = max(u_xlat30, 0.00200000009);
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat30;
					    u_xlat0.x = (-u_xlat0.x) + _Glossiness;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat10.xyz * vec3(u_xlat30);
					    u_xlat15 = -abs(u_xlat15) + 1.0;
					    u_xlat30 = u_xlat15 * u_xlat15;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat15 = u_xlat15 * u_xlat30;
					    u_xlat0.xzw = (-_Specular.xyz) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xzw + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat45 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "DisableBatching" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha One, SrcAlpha One
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 103263
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec2 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec2 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec2 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat1.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat2, u_xlat2);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2;
					    u_xlat3 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat3;
					    u_xlat16 = dot(u_xlat3, u_xlat3);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2 = u_xlat2 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat3.w = 0.0;
					    u_xlat0 = u_xlat0 + u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat10.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat0.xy = u_xlat10.xx * u_xlat0.xy;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat1.yz = u_xlat10.xx * u_xlat1.xy;
					    u_xlat10.x = u_xlat0.x * u_xlat1.z;
					    u_xlat10.x = u_xlat1.y * u_xlat0.y + (-u_xlat10.x);
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat10.xy = u_xlat1.xy / u_xlat10.xx;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat2.xx;
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.x = dot(u_xlat6.xy, u_xlat0.xy);
					    u_xlat0.x = abs(u_xlat0.x) + -0.850000024;
					    u_xlat0.x = u_xlat0.x * 6.66666794;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat0.xx * u_xlat1.xw + u_xlat10.xy;
					    u_xlat0.z = 0.0;
					    u_xlat5.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat0.x = u_xlat5.x * _Time.y;
					    u_xlat1.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xz + u_xlat1.xy;
					    u_xlat2.y = 0.0;
					    u_xlat2.x = u_xlat5.x * _Time.y + _DispOffsetLayer2;
					    u_xlat0.xy = u_xlat5.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat1.xy + u_xlat2.xy;
					    u_xlat11.x = u_xlat2.x / _DispMainTex_ST.x;
					    u_xlat0.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat0.xz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = u_xlat0.zy + u_xlat1.xy;
					    u_xlat11.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat11.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out float vs_TEXCOORD9;
					layout(location = 3) out vec3 vs_TEXCOORD2;
					layout(location = 4) out vec3 vs_TEXCOORD3;
					layout(location = 5) out vec3 vs_TEXCOORD4;
					layout(location = 6) out vec4 vs_TEXCOORD5;
					layout(location = 7) out vec4 vs_TEXCOORD6;
					layout(location = 8) out vec4 vs_TEXCOORD7;
					layout(location = 9) out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec2 vs_TEXCOORD8;
					layout(location = 9) out float vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec2 vs_TEXCOORD8;
					layout(location = 9) out float vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[5];
						vec4 _DispMainTex_ST;
						float _DispAnimSpeedVertical;
						float _DispAnimSpeedMain;
						float _DispOffsetBody;
						float _DispAnimSpeedScale;
						float _DispOffsetLayer2;
						vec4 _TintMaskTex_ST;
						vec4 _MainTex_ST;
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					UNITY_BINDING(2) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					UNITY_BINDING(3) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TANGENT0;
					layout(location = 2) in  vec3 in_NORMAL0;
					layout(location = 3) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec4 vs_TEXCOORD0;
					layout(location = 1) out vec3 vs_TEXCOORD1;
					layout(location = 2) out vec3 vs_TEXCOORD2;
					layout(location = 3) out vec3 vs_TEXCOORD3;
					layout(location = 4) out vec3 vs_TEXCOORD4;
					layout(location = 5) out vec4 vs_TEXCOORD5;
					layout(location = 6) out vec4 vs_TEXCOORD6;
					layout(location = 7) out vec4 vs_TEXCOORD7;
					layout(location = 8) out vec2 vs_TEXCOORD8;
					layout(location = 9) out float vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD9 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _TintMaskTex_ST.xy + _TintMaskTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2 = in_TANGENT0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat2;
					    u_xlat3.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat3.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat6.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat6.y;
					    vs_TEXCOORD1.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat6.z;
					    vs_TEXCOORD3.z = u_xlat6.x;
					    vs_TEXCOORD2.x = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat2, u_xlat2);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1 = u_xlat1.xxxx * u_xlat2;
					    u_xlat2 = in_NORMAL0.yyyy * unity_ObjectToWorld[1];
					    u_xlat2 = unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat2;
					    u_xlat2 = unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat2;
					    u_xlat17 = dot(u_xlat2, u_xlat2);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat1 = u_xlat1 * vec4(0.00999999978, 0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978);
					    u_xlat2.w = 0.0;
					    u_xlat2 = u_xlat0 + u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_MatrixVP[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_MatrixVP[1].xyz;
					    u_xlat3.xyz = unity_MatrixVP[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_MatrixVP[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat2.xy = u_xlat12.xx * u_xlat2.xy;
					    u_xlat4.xyz = u_xlat1.yyy * unity_MatrixVP[1].xyz;
					    u_xlat4.xyz = unity_MatrixVP[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = unity_MatrixVP[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.yz = vec2(u_xlat11) * u_xlat1.xy;
					    u_xlat16 = u_xlat2.x * u_xlat1.z;
					    u_xlat16 = u_xlat1.y * u_xlat2.y + (-u_xlat16);
					    u_xlat1.x = (-u_xlat2.x);
					    u_xlat1.xw = u_xlat1.xy / vec2(u_xlat16);
					    u_xlat12.xy = (-u_xlat1.xw) + vec2(0.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat3.x = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat6.xy = u_xlat1.yz * u_xlat3.xx;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat2.xy);
					    u_xlat6.x = abs(u_xlat6.x) + -0.850000024;
					    u_xlat6.x = u_xlat6.x * 6.66666794;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    vs_TEXCOORD5.xy = u_xlat6.xx * u_xlat12.xy + u_xlat1.xw;
					    u_xlat1.z = 0.0;
					    u_xlat6.xz = vec2(_DispAnimSpeedMain, _DispAnimSpeedVertical) * vec2(_DispAnimSpeedScale);
					    u_xlat1.x = u_xlat6.x * _Time.y;
					    u_xlat2.xy = in_TEXCOORD0.xy * _DispMainTex_ST.xy + _DispMainTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat1.xz + u_xlat2.xy;
					    u_xlat3.y = 0.0;
					    u_xlat3.x = u_xlat6.x * _Time.y + _DispOffsetLayer2;
					    u_xlat1.xy = u_xlat6.xz * _Time.yy + vec2(vec2(_DispOffsetBody, _DispOffsetBody));
					    vs_TEXCOORD6.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat12.x = u_xlat3.x / _DispMainTex_ST.x;
					    u_xlat1.z = 0.0;
					    vs_TEXCOORD6.zw = u_xlat1.xz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = u_xlat1.zy + u_xlat2.xy;
					    u_xlat12.y = 0.0;
					    vs_TEXCOORD7.zw = in_TEXCOORD0.xy * _DispMainTex_ST.xy + u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat9.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat9.x = u_xlat9.x * _DispAmp;
					    u_xlat21 = u_xlat21 * u_xlat9.x;
					    u_xlat22 = u_xlat22 * u_xlat9.x;
					    u_xlat2.x = u_xlat9.x * u_xlat2.x;
					    u_xlat16.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat9.x = u_xlat9.x * u_xlat16.x;
					    u_xlat9.x = u_xlat9.x / _DispMainTex_ST.y;
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat9.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat9.xy);
					    u_xlat2.xy = vs_TEXCOORD5.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat16.xy);
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat21) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat16.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat5.w + u_xlat6.w;
					    u_xlat21 = u_xlat21 * u_xlat3.w;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + u_xlat3.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat21 = u_xlat21 + -0.400000006;
					    SV_Target0.w = u_xlat21 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat5.z = sqrt(u_xlat21);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat16.xy).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb21){
					        u_xlatb21 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb21)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat21 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat21, u_xlat22);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat21 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = texture(_LightTexture0, vec2(u_xlat22)).x;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat21 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat21 = max(u_xlat3.z, u_xlat21);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat5.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat23 = texture(_LightTexture0, vec2(u_xlat23)).x;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat22 = max(u_xlat3.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat7 * u_xlat7;
					    u_xlat1.x = u_xlat14 * u_xlat14;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat14 = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat14 = u_xlat8 * u_xlat14 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat7 = u_xlat7 * u_xlat7 + 0.5;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat7 = u_xlat14 * u_xlat14;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat18;
					vec2 u_xlat21;
					float u_xlat27;
					bool u_xlatb27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat29 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat12.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat12.x = u_xlat12.x * _DispAmp;
					    u_xlat28 = u_xlat28 * u_xlat12.x;
					    u_xlat29 = u_xlat29 * u_xlat12.x;
					    u_xlat3.x = u_xlat12.x * u_xlat3.x;
					    u_xlat21.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat12.x = u_xlat12.x * u_xlat21.x;
					    u_xlat12.x = u_xlat12.x / _DispMainTex_ST.y;
					    u_xlat12.xy = vs_TEXCOORD5.xy * u_xlat12.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat12.xy);
					    u_xlat3.xy = vs_TEXCOORD5.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat29) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat21.xy);
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat28) + u_xlat6.zw;
					    u_xlat6 = texture(_MainTexHead, u_xlat21.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat28 = u_xlat6.w + u_xlat7.w;
					    u_xlat28 = u_xlat28 * u_xlat4.w;
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat28 = float(1.0) / u_xlat28;
					    u_xlat28 = u_xlat28 + u_xlat4.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 + -0.400000006;
					    SV_Target0.w = u_xlat28 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat7.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat7.x = u_xlat7.z * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat7.z = sqrt(u_xlat28);
					    u_xlat3.xyz = texture(_NormalMapHead, u_xlat21.xy).xyw;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat3.z = sqrt(u_xlat28);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.www * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb28){
					        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb28)) ? u_xlat8.xyz : vs_TEXCOORD4.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat28 = u_xlat8.y * 0.25 + 0.75;
					        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat8.x = max(u_xlat28, u_xlat29);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					    } else {
					        u_xlat8.x = float(1.0);
					        u_xlat8.y = float(1.0);
					        u_xlat8.z = float(1.0);
					        u_xlat8.w = float(1.0);
					    }
					    u_xlat28 = dot(u_xlat8, unity_OcclusionMaskSelector);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = texture(_LightTexture0, vec2(u_xlat29)).x;
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat7.xyz;
					    u_xlat7.xyz = vec3(u_xlat28) * _LightColor0.xyz;
					    u_xlat28 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat28 = max(u_xlat6.z, u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat9.x = u_xlat0.x * u_xlat0.x;
					    u_xlat9.x = dot(u_xlat9.xx, vec2(u_xlat28));
					    u_xlat9.x = u_xlat9.x + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
					    u_xlat1.x = -abs(u_xlat27) + 1.0;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat18 = u_xlat28 * u_xlat28;
					    u_xlat18 = max(u_xlat18, 0.00200000009);
					    u_xlat1.x = (-u_xlat18) + 1.0;
					    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
					    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat18;
					    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
					    u_xlat27 = u_xlat2.x * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 + 9.99999975e-06;
					    u_xlat27 = 0.5 / u_xlat27;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat11 * u_xlat18 + (-u_xlat11);
					    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
					    u_xlat18 = u_xlat18 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat18 = u_xlat18 / u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat27;
					    u_xlat9.y = u_xlat18 * 3.14159274;
					    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
					    u_xlat18 = max(u_xlat9.y, 0.0);
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb27 = u_xlat27!=0.0;
					    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat27 * u_xlat18;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat7.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * vec3(u_xlat18);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_8;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_11[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat7;
					vec2 u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat13.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat13.x = u_xlat13.x * _DispAmp;
					    u_xlat18 = u_xlat18 * u_xlat13.x;
					    u_xlat1.xy = u_xlat13.xx * u_xlat1.xy;
					    u_xlat19 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat13.x = u_xlat13.x * u_xlat19;
					    u_xlat13.x = u_xlat13.x / _DispMainTex_ST.y;
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat13.xx + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat13.xy);
					    u_xlat7.xy = vs_TEXCOORD5.xy * u_xlat1.yy + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat7.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat1.xw = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat1.xw);
					    u_xlat1.xw = vs_TEXCOORD5.xy * vec2(u_xlat18) + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xw);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat18 = u_xlat4.w + u_xlat5.w;
					    u_xlat18 = u_xlat18 * u_xlat2.w;
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat18 = float(1.0) / u_xlat18;
					    u_xlat18 = u_xlat18 + u_xlat2.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + -0.400000006;
					    SV_Target0.w = u_xlat18 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat7.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xw).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat18 = max(u_xlat2.z, u_xlat18);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat19 = u_xlat19 + u_xlat19;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat19)) + u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_8;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_11[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.z = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19 = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat19 = u_xlat19 * _DispAmp;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 / _DispMainTex_ST.y;
					    u_xlat2.xy = vs_TEXCOORD5.xy * vec2(u_xlat19) + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat2.xy);
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat1.zz + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat13.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat4.xy = vs_TEXCOORD5.xy * u_xlat1.yy + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat4.xy);
					    u_xlat1.xy = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat4.w + u_xlat5.w;
					    u_xlat21 = u_xlat2.w * u_xlat21;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat20 = u_xlat2.w + u_xlat21;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat20 = u_xlat20 + -0.400000006;
					    SV_Target0.w = u_xlat20 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat13.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat4.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xy).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb19)) ? u_xlat4.xyz : vs_TEXCOORD4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat19, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat19 = max(u_xlat2.z, u_xlat19);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat12 = u_xlat6 * u_xlat6;
					    u_xlat7 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12 + -1.0;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat6 = u_xlat6 * u_xlat6 + 0.5;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat6 = u_xlat12 * u_xlat12;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat7 / u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_8;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_11[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					float u_xlat15;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat5.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat6.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat6.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat5.y, u_xlat5.x);
					    u_xlat22 = max(u_xlat5.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat22));
					    u_xlat7.x = u_xlat7.x + -0.5;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat14 * u_xlat14;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat14 = u_xlat14 * u_xlat15;
					    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat15 = -abs(u_xlat21) + 1.0;
					    u_xlat2.x = u_xlat15 * u_xlat15;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat14 = u_xlat22 * u_xlat22;
					    u_xlat14 = max(u_xlat14, 0.00200000009);
					    u_xlat15 = (-u_xlat14) + 1.0;
					    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat14;
					    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat14;
					    u_xlat21 = abs(u_xlat21) * u_xlat15;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 0.5 / u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat15 = u_xlat8 * u_xlat14 + (-u_xlat8);
					    u_xlat8 = u_xlat15 * u_xlat8 + 1.0;
					    u_xlat14 = u_xlat14 * 0.318309873;
					    u_xlat8 = u_xlat8 * u_xlat8 + 1.00000001e-07;
					    u_xlat14 = u_xlat14 / u_xlat8;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.y = u_xlat14 * 3.14159274;
					    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat14 = max(u_xlat7.y, 0.0);
					    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat14 = u_xlat21 * u_xlat14;
					    u_xlat1.xyz = u_xlat7.xxx * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat14);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(10) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(11) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat9.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat9.x = u_xlat9.x * _DispAmp;
					    u_xlat21 = u_xlat21 * u_xlat9.x;
					    u_xlat22 = u_xlat22 * u_xlat9.x;
					    u_xlat2.x = u_xlat9.x * u_xlat2.x;
					    u_xlat16.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat9.x = u_xlat9.x * u_xlat16.x;
					    u_xlat9.x = u_xlat9.x / _DispMainTex_ST.y;
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat9.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat9.xy);
					    u_xlat2.xy = vs_TEXCOORD5.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat16.xy);
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat21) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat16.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat5.w + u_xlat6.w;
					    u_xlat21 = u_xlat21 * u_xlat3.w;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + u_xlat3.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat21 = u_xlat21 + -0.400000006;
					    SV_Target0.w = u_xlat21 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat5.z = sqrt(u_xlat21);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat16.xy).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat5 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat5;
					    u_xlat5 = u_xlat5 + unity_WorldToLight[3];
					    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb21){
					        u_xlatb21 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb21)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat21 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat21, u_xlat22);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat21 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlatb22 = 0.0<u_xlat5.z;
					    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat23 = texture(_LightTexture0, u_xlat6.xy).w;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat23 = texture(_LightTextureB0, vec2(u_xlat23)).x;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat21 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat21 = max(u_xlat3.z, u_xlat21);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat5.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat5 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat5;
					    u_xlat5 = u_xlat5 + unity_WorldToLight[3];
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlatb23 = 0.0<u_xlat5.z;
					    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
					    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat24 = texture(_LightTexture0, u_xlat6.xy).w;
					    u_xlat23 = u_xlat23 * u_xlat24;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).x;
					    u_xlat23 = u_xlat23 * u_xlat24;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat22 = max(u_xlat3.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat7 * u_xlat7;
					    u_xlat1.x = u_xlat14 * u_xlat14;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat14 = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat14 = u_xlat8 * u_xlat14 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat7 = u_xlat7 * u_xlat7 + 0.5;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat7 = u_xlat14 * u_xlat14;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat18;
					vec2 u_xlat21;
					float u_xlat27;
					bool u_xlatb27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat29 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat12.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat12.x = u_xlat12.x * _DispAmp;
					    u_xlat28 = u_xlat28 * u_xlat12.x;
					    u_xlat29 = u_xlat29 * u_xlat12.x;
					    u_xlat3.x = u_xlat12.x * u_xlat3.x;
					    u_xlat21.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat12.x = u_xlat12.x * u_xlat21.x;
					    u_xlat12.x = u_xlat12.x / _DispMainTex_ST.y;
					    u_xlat12.xy = vs_TEXCOORD5.xy * u_xlat12.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat12.xy);
					    u_xlat3.xy = vs_TEXCOORD5.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat29) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat21.xy);
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat28) + u_xlat6.zw;
					    u_xlat6 = texture(_MainTexHead, u_xlat21.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat28 = u_xlat6.w + u_xlat7.w;
					    u_xlat28 = u_xlat28 * u_xlat4.w;
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat28 = float(1.0) / u_xlat28;
					    u_xlat28 = u_xlat28 + u_xlat4.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 + -0.400000006;
					    SV_Target0.w = u_xlat28 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat7.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat7.x = u_xlat7.z * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat7.z = sqrt(u_xlat28);
					    u_xlat3.xyz = texture(_NormalMapHead, u_xlat21.xy).xyw;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat3.z = sqrt(u_xlat28);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.www * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat7 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat7;
					    u_xlat7 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat7;
					    u_xlat7 = u_xlat7 + unity_WorldToLight[3];
					    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb28){
					        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb28)) ? u_xlat8.xyz : vs_TEXCOORD4.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat28 = u_xlat8.y * 0.25 + 0.75;
					        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat8.x = max(u_xlat28, u_xlat29);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					    } else {
					        u_xlat8.x = float(1.0);
					        u_xlat8.y = float(1.0);
					        u_xlat8.z = float(1.0);
					        u_xlat8.w = float(1.0);
					    }
					    u_xlat28 = dot(u_xlat8, unity_OcclusionMaskSelector);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlatb29 = 0.0<u_xlat7.z;
					    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);
					    u_xlat8.xy = u_xlat7.xy / u_xlat7.ww;
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat30 = texture(_LightTexture0, u_xlat8.xy).w;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = texture(_LightTextureB0, vec2(u_xlat30)).x;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat7.xyz;
					    u_xlat7.xyz = vec3(u_xlat28) * _LightColor0.xyz;
					    u_xlat28 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat28 = max(u_xlat6.z, u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat9.x = u_xlat0.x * u_xlat0.x;
					    u_xlat9.x = dot(u_xlat9.xx, vec2(u_xlat28));
					    u_xlat9.x = u_xlat9.x + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
					    u_xlat1.x = -abs(u_xlat27) + 1.0;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat18 = u_xlat28 * u_xlat28;
					    u_xlat18 = max(u_xlat18, 0.00200000009);
					    u_xlat1.x = (-u_xlat18) + 1.0;
					    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
					    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat18;
					    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
					    u_xlat27 = u_xlat2.x * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 + 9.99999975e-06;
					    u_xlat27 = 0.5 / u_xlat27;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat11 * u_xlat18 + (-u_xlat11);
					    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
					    u_xlat18 = u_xlat18 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat18 = u_xlat18 / u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat27;
					    u_xlat9.y = u_xlat18 * 3.14159274;
					    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
					    u_xlat18 = max(u_xlat9.y, 0.0);
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb27 = u_xlat27!=0.0;
					    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat27 * u_xlat18;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat7.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * vec3(u_xlat18);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(9) uniform  samplerCube _LightTexture0;
					UNITY_LOCATION(10) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(11) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat9.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat9.x = u_xlat9.x * _DispAmp;
					    u_xlat21 = u_xlat21 * u_xlat9.x;
					    u_xlat22 = u_xlat22 * u_xlat9.x;
					    u_xlat2.x = u_xlat9.x * u_xlat2.x;
					    u_xlat16.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat9.x = u_xlat9.x * u_xlat16.x;
					    u_xlat9.x = u_xlat9.x / _DispMainTex_ST.y;
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat9.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat9.xy);
					    u_xlat2.xy = vs_TEXCOORD5.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat16.xy);
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat21) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat16.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat5.w + u_xlat6.w;
					    u_xlat21 = u_xlat21 * u_xlat3.w;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + u_xlat3.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat21 = u_xlat21 + -0.400000006;
					    SV_Target0.w = u_xlat21 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat5.z = sqrt(u_xlat21);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat16.xy).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb21){
					        u_xlatb21 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb21)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat21 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat21, u_xlat22);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat21 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = texture(_LightTextureB0, vec2(u_xlat22)).x;
					    u_xlat23 = texture(_LightTexture0, u_xlat5.xyz).w;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat21 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat21 = max(u_xlat3.z, u_xlat21);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(9) uniform  samplerCube _LightTexture0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat5.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat23 = texture(_LightTextureB0, vec2(u_xlat23)).x;
					    u_xlat24 = texture(_LightTexture0, u_xlat5.xyz).w;
					    u_xlat23 = u_xlat23 * u_xlat24;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat22 = max(u_xlat3.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat7 * u_xlat7;
					    u_xlat1.x = u_xlat14 * u_xlat14;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat14 = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat14 = u_xlat8 * u_xlat14 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat7 = u_xlat7 * u_xlat7 + 0.5;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat7 = u_xlat14 * u_xlat14;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(9) uniform  samplerCube _LightTexture0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat18;
					vec2 u_xlat21;
					float u_xlat27;
					bool u_xlatb27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat29 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat12.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat12.x = u_xlat12.x * _DispAmp;
					    u_xlat28 = u_xlat28 * u_xlat12.x;
					    u_xlat29 = u_xlat29 * u_xlat12.x;
					    u_xlat3.x = u_xlat12.x * u_xlat3.x;
					    u_xlat21.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat12.x = u_xlat12.x * u_xlat21.x;
					    u_xlat12.x = u_xlat12.x / _DispMainTex_ST.y;
					    u_xlat12.xy = vs_TEXCOORD5.xy * u_xlat12.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat12.xy);
					    u_xlat3.xy = vs_TEXCOORD5.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat29) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat21.xy);
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat28) + u_xlat6.zw;
					    u_xlat6 = texture(_MainTexHead, u_xlat21.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat28 = u_xlat6.w + u_xlat7.w;
					    u_xlat28 = u_xlat28 * u_xlat4.w;
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat28 = float(1.0) / u_xlat28;
					    u_xlat28 = u_xlat28 + u_xlat4.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 + -0.400000006;
					    SV_Target0.w = u_xlat28 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat7.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat7.x = u_xlat7.z * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat7.z = sqrt(u_xlat28);
					    u_xlat3.xyz = texture(_NormalMapHead, u_xlat21.xy).xyw;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat3.z = sqrt(u_xlat28);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.www * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb28){
					        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb28)) ? u_xlat8.xyz : vs_TEXCOORD4.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat28 = u_xlat8.y * 0.25 + 0.75;
					        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat8.x = max(u_xlat28, u_xlat29);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					    } else {
					        u_xlat8.x = float(1.0);
					        u_xlat8.y = float(1.0);
					        u_xlat8.z = float(1.0);
					        u_xlat8.w = float(1.0);
					    }
					    u_xlat28 = dot(u_xlat8, unity_OcclusionMaskSelector);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = texture(_LightTextureB0, vec2(u_xlat29)).x;
					    u_xlat30 = texture(_LightTexture0, u_xlat7.xyz).w;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat7.xyz;
					    u_xlat7.xyz = vec3(u_xlat28) * _LightColor0.xyz;
					    u_xlat28 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat28 = max(u_xlat6.z, u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat9.x = u_xlat0.x * u_xlat0.x;
					    u_xlat9.x = dot(u_xlat9.xx, vec2(u_xlat28));
					    u_xlat9.x = u_xlat9.x + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
					    u_xlat1.x = -abs(u_xlat27) + 1.0;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat18 = u_xlat28 * u_xlat28;
					    u_xlat18 = max(u_xlat18, 0.00200000009);
					    u_xlat1.x = (-u_xlat18) + 1.0;
					    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
					    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat18;
					    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
					    u_xlat27 = u_xlat2.x * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 + 9.99999975e-06;
					    u_xlat27 = 0.5 / u_xlat27;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat11 * u_xlat18 + (-u_xlat11);
					    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
					    u_xlat18 = u_xlat18 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat18 = u_xlat18 / u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat27;
					    u_xlat9.y = u_xlat18 * 3.14159274;
					    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
					    u_xlat18 = max(u_xlat9.y, 0.0);
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb27 = u_xlat27!=0.0;
					    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat27 * u_xlat18;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat7.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * vec3(u_xlat18);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat7;
					vec2 u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat13.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat13.x = u_xlat13.x * _DispAmp;
					    u_xlat18 = u_xlat18 * u_xlat13.x;
					    u_xlat1.xy = u_xlat13.xx * u_xlat1.xy;
					    u_xlat19 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat13.x = u_xlat13.x * u_xlat19;
					    u_xlat13.x = u_xlat13.x / _DispMainTex_ST.y;
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat13.xx + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat13.xy);
					    u_xlat7.xy = vs_TEXCOORD5.xy * u_xlat1.yy + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat7.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat1.xw = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat1.xw);
					    u_xlat1.xw = vs_TEXCOORD5.xy * vec2(u_xlat18) + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xw);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat18 = u_xlat4.w + u_xlat5.w;
					    u_xlat18 = u_xlat18 * u_xlat2.w;
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat18 = float(1.0) / u_xlat18;
					    u_xlat18 = u_xlat18 + u_xlat2.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + -0.400000006;
					    SV_Target0.w = u_xlat18 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat7.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xw).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat4.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat4.xy;
					    u_xlat4.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy + unity_WorldToLight[3].xy;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb18)) ? u_xlat5.xyz : vs_TEXCOORD4.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat18, u_xlat19);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = texture(_LightTexture0, u_xlat4.xy).w;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat18 = max(u_xlat2.z, u_xlat18);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat19 = u_xlat19 + u_xlat19;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat19)) + u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.z = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19 = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat19 = u_xlat19 * _DispAmp;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 / _DispMainTex_ST.y;
					    u_xlat2.xy = vs_TEXCOORD5.xy * vec2(u_xlat19) + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat2.xy);
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat1.zz + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat13.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat4.xy = vs_TEXCOORD5.xy * u_xlat1.yy + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat4.xy);
					    u_xlat1.xy = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat4.w + u_xlat5.w;
					    u_xlat21 = u_xlat2.w * u_xlat21;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat20 = u_xlat2.w + u_xlat21;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat20 = u_xlat20 + -0.400000006;
					    SV_Target0.w = u_xlat20 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat13.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat4.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xy).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat4.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat4.xy;
					    u_xlat4.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy + unity_WorldToLight[3].xy;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb19)) ? u_xlat5.xyz : vs_TEXCOORD4.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat19, u_xlat20);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = texture(_LightTexture0, u_xlat4.xy).w;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat19 = max(u_xlat2.z, u_xlat19);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat12 = u_xlat6 * u_xlat6;
					    u_xlat7 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12 + -1.0;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat6 = u_xlat6 * u_xlat6 + 0.5;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat6 = u_xlat12 * u_xlat12;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat7 / u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat25 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat25 = u_xlat25 * u_xlat18.x;
					    u_xlat2.xy = u_xlat18.xx * u_xlat2.xy;
					    u_xlat26 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat26;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD5.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat10.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat10.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat25) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat5.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat25 = u_xlat5.w + u_xlat6.w;
					    u_xlat25 = u_xlat25 * u_xlat3.w;
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat25 = float(1.0) / u_xlat25;
					    u_xlat25 = u_xlat25 + u_xlat3.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 + -0.400000006;
					    SV_Target0.w = u_xlat25 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat6.xyz = texture(_NormalMap, u_xlat10.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat6.z = sqrt(u_xlat25);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.z = sqrt(u_xlat25);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat6.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat6.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat6.xy;
					    u_xlat6.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat6.xy;
					    u_xlat6.xy = u_xlat6.xy + unity_WorldToLight[3].xy;
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb25 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat7.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : vs_TEXCOORD4.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat25 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat26 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat25, u_xlat26);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat25 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = texture(_LightTexture0, u_xlat6.xy).w;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat25 = max(u_xlat5.y, u_xlat5.x);
					    u_xlat25 = max(u_xlat5.z, u_xlat25);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat25));
					    u_xlat8.x = u_xlat8.x + -0.5;
					    u_xlat16 = (-u_xlat1.x) + 1.0;
					    u_xlat17 = u_xlat16 * u_xlat16;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat16 = u_xlat16 * u_xlat17;
					    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
					    u_xlat17 = -abs(u_xlat24) + 1.0;
					    u_xlat2.x = u_xlat17 * u_xlat17;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat17 = u_xlat17 * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat17 + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat16 = u_xlat25 * u_xlat25;
					    u_xlat16 = max(u_xlat16, 0.00200000009);
					    u_xlat17 = (-u_xlat16) + 1.0;
					    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat16;
					    u_xlat17 = u_xlat1.x * u_xlat17 + u_xlat16;
					    u_xlat24 = abs(u_xlat24) * u_xlat17;
					    u_xlat24 = u_xlat1.x * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat17 = u_xlat9 * u_xlat16 + (-u_xlat9);
					    u_xlat9 = u_xlat17 * u_xlat9 + 1.0;
					    u_xlat16 = u_xlat16 * 0.318309873;
					    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;
					    u_xlat16 = u_xlat16 / u_xlat9;
					    u_xlat16 = u_xlat16 * u_xlat24;
					    u_xlat8.y = u_xlat16 * 3.14159274;
					    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
					    u_xlat16 = max(u_xlat8.y, 0.0);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb24 = u_xlat24!=0.0;
					    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
					    u_xlat16 = u_xlat24 * u_xlat16;
					    u_xlat1.xyz = u_xlat8.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * vec3(u_xlat16);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat0.x = u_xlat0.x * u_xlat25;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat9.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat9.x = u_xlat9.x * _DispAmp;
					    u_xlat21 = u_xlat21 * u_xlat9.x;
					    u_xlat22 = u_xlat22 * u_xlat9.x;
					    u_xlat2.x = u_xlat9.x * u_xlat2.x;
					    u_xlat16.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat9.x = u_xlat9.x * u_xlat16.x;
					    u_xlat9.x = u_xlat9.x / _DispMainTex_ST.y;
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat9.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat9.xy);
					    u_xlat2.xy = vs_TEXCOORD5.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat16.xy);
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat21) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat16.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat5.w + u_xlat6.w;
					    u_xlat21 = u_xlat21 * u_xlat3.w;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + u_xlat3.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat21 = u_xlat21 + -0.400000006;
					    SV_Target0.w = u_xlat21 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat5.z = sqrt(u_xlat21);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat16.xy).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb21){
					        u_xlatb21 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb21)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat21 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat21, u_xlat22);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat21 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = texture(_LightTexture0, vec2(u_xlat22)).x;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat21 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat21 = max(u_xlat3.z, u_xlat21);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat5.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat23 = texture(_LightTexture0, vec2(u_xlat23)).x;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat22 = max(u_xlat3.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat7 * u_xlat7;
					    u_xlat1.x = u_xlat14 * u_xlat14;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat14 = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat14 = u_xlat8 * u_xlat14 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat7 = u_xlat7 * u_xlat7 + 0.5;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat7 = u_xlat14 * u_xlat14;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat18;
					vec2 u_xlat21;
					float u_xlat27;
					bool u_xlatb27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat29 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat12.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat12.x = u_xlat12.x * _DispAmp;
					    u_xlat28 = u_xlat28 * u_xlat12.x;
					    u_xlat29 = u_xlat29 * u_xlat12.x;
					    u_xlat3.x = u_xlat12.x * u_xlat3.x;
					    u_xlat21.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat12.x = u_xlat12.x * u_xlat21.x;
					    u_xlat12.x = u_xlat12.x / _DispMainTex_ST.y;
					    u_xlat12.xy = vs_TEXCOORD5.xy * u_xlat12.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat12.xy);
					    u_xlat3.xy = vs_TEXCOORD5.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat29) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat21.xy);
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat28) + u_xlat6.zw;
					    u_xlat6 = texture(_MainTexHead, u_xlat21.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat28 = u_xlat6.w + u_xlat7.w;
					    u_xlat28 = u_xlat28 * u_xlat4.w;
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat28 = float(1.0) / u_xlat28;
					    u_xlat28 = u_xlat28 + u_xlat4.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 + -0.400000006;
					    SV_Target0.w = u_xlat28 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat7.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat7.x = u_xlat7.z * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat7.z = sqrt(u_xlat28);
					    u_xlat3.xyz = texture(_NormalMapHead, u_xlat21.xy).xyw;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat3.z = sqrt(u_xlat28);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.www * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb28){
					        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb28)) ? u_xlat8.xyz : vs_TEXCOORD4.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat28 = u_xlat8.y * 0.25 + 0.75;
					        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat8.x = max(u_xlat28, u_xlat29);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					    } else {
					        u_xlat8.x = float(1.0);
					        u_xlat8.y = float(1.0);
					        u_xlat8.z = float(1.0);
					        u_xlat8.w = float(1.0);
					    }
					    u_xlat28 = dot(u_xlat8, unity_OcclusionMaskSelector);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = texture(_LightTexture0, vec2(u_xlat29)).x;
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat7.xyz;
					    u_xlat7.xyz = vec3(u_xlat28) * _LightColor0.xyz;
					    u_xlat28 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat28 = max(u_xlat6.z, u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat9.x = u_xlat0.x * u_xlat0.x;
					    u_xlat9.x = dot(u_xlat9.xx, vec2(u_xlat28));
					    u_xlat9.x = u_xlat9.x + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
					    u_xlat1.x = -abs(u_xlat27) + 1.0;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat18 = u_xlat28 * u_xlat28;
					    u_xlat18 = max(u_xlat18, 0.00200000009);
					    u_xlat1.x = (-u_xlat18) + 1.0;
					    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
					    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat18;
					    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
					    u_xlat27 = u_xlat2.x * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 + 9.99999975e-06;
					    u_xlat27 = 0.5 / u_xlat27;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat11 * u_xlat18 + (-u_xlat11);
					    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
					    u_xlat18 = u_xlat18 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat18 = u_xlat18 / u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat27;
					    u_xlat9.y = u_xlat18 * 3.14159274;
					    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
					    u_xlat18 = max(u_xlat9.y, 0.0);
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb27 = u_xlat27!=0.0;
					    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat27 * u_xlat18;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat7.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * vec3(u_xlat18);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_8;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_11[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat7;
					vec2 u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat13.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat13.x = u_xlat13.x * _DispAmp;
					    u_xlat18 = u_xlat18 * u_xlat13.x;
					    u_xlat1.xy = u_xlat13.xx * u_xlat1.xy;
					    u_xlat19 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat13.x = u_xlat13.x * u_xlat19;
					    u_xlat13.x = u_xlat13.x / _DispMainTex_ST.y;
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat13.xx + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat13.xy);
					    u_xlat7.xy = vs_TEXCOORD5.xy * u_xlat1.yy + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat7.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat1.xw = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat1.xw);
					    u_xlat1.xw = vs_TEXCOORD5.xy * vec2(u_xlat18) + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xw);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat18 = u_xlat4.w + u_xlat5.w;
					    u_xlat18 = u_xlat18 * u_xlat2.w;
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat18 = float(1.0) / u_xlat18;
					    u_xlat18 = u_xlat18 + u_xlat2.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + -0.400000006;
					    SV_Target0.w = u_xlat18 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat7.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xw).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat18 = max(u_xlat2.z, u_xlat18);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat19 = u_xlat19 + u_xlat19;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat19)) + u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_8;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_11[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.z = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19 = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat19 = u_xlat19 * _DispAmp;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 / _DispMainTex_ST.y;
					    u_xlat2.xy = vs_TEXCOORD5.xy * vec2(u_xlat19) + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat2.xy);
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat1.zz + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat13.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat4.xy = vs_TEXCOORD5.xy * u_xlat1.yy + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat4.xy);
					    u_xlat1.xy = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat4.w + u_xlat5.w;
					    u_xlat21 = u_xlat2.w * u_xlat21;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat20 = u_xlat2.w + u_xlat21;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat20 = u_xlat20 + -0.400000006;
					    SV_Target0.w = u_xlat20 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat13.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat4.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xy).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb19)) ? u_xlat4.xyz : vs_TEXCOORD4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat19, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat19 = max(u_xlat2.z, u_xlat19);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat12 = u_xlat6 * u_xlat6;
					    u_xlat7 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12 + -1.0;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat6 = u_xlat6 * u_xlat6 + 0.5;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat6 = u_xlat12 * u_xlat12;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat7 / u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_8;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_11[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					float u_xlat15;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat5.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat6.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat6.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat5.y, u_xlat5.x);
					    u_xlat22 = max(u_xlat5.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat22));
					    u_xlat7.x = u_xlat7.x + -0.5;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat14 * u_xlat14;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat14 = u_xlat14 * u_xlat15;
					    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat15 = -abs(u_xlat21) + 1.0;
					    u_xlat2.x = u_xlat15 * u_xlat15;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat14 = u_xlat22 * u_xlat22;
					    u_xlat14 = max(u_xlat14, 0.00200000009);
					    u_xlat15 = (-u_xlat14) + 1.0;
					    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat14;
					    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat14;
					    u_xlat21 = abs(u_xlat21) * u_xlat15;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 0.5 / u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat15 = u_xlat8 * u_xlat14 + (-u_xlat8);
					    u_xlat8 = u_xlat15 * u_xlat8 + 1.0;
					    u_xlat14 = u_xlat14 * 0.318309873;
					    u_xlat8 = u_xlat8 * u_xlat8 + 1.00000001e-07;
					    u_xlat14 = u_xlat14 / u_xlat8;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.y = u_xlat14 * 3.14159274;
					    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat14 = max(u_xlat7.y, 0.0);
					    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat14 = u_xlat21 * u_xlat14;
					    u_xlat1.xyz = u_xlat7.xxx * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat14);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(10) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(11) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat9.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat9.x = u_xlat9.x * _DispAmp;
					    u_xlat21 = u_xlat21 * u_xlat9.x;
					    u_xlat22 = u_xlat22 * u_xlat9.x;
					    u_xlat2.x = u_xlat9.x * u_xlat2.x;
					    u_xlat16.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat9.x = u_xlat9.x * u_xlat16.x;
					    u_xlat9.x = u_xlat9.x / _DispMainTex_ST.y;
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat9.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat9.xy);
					    u_xlat2.xy = vs_TEXCOORD5.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat16.xy);
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat21) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat16.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat5.w + u_xlat6.w;
					    u_xlat21 = u_xlat21 * u_xlat3.w;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + u_xlat3.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat21 = u_xlat21 + -0.400000006;
					    SV_Target0.w = u_xlat21 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat5.z = sqrt(u_xlat21);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat16.xy).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat5 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat5;
					    u_xlat5 = u_xlat5 + unity_WorldToLight[3];
					    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb21){
					        u_xlatb21 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb21)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat21 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat21, u_xlat22);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat21 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlatb22 = 0.0<u_xlat5.z;
					    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat23 = texture(_LightTexture0, u_xlat6.xy).w;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat23 = texture(_LightTextureB0, vec2(u_xlat23)).x;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat21 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat21 = max(u_xlat3.z, u_xlat21);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat5.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat5 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat5;
					    u_xlat5 = u_xlat5 + unity_WorldToLight[3];
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlatb23 = 0.0<u_xlat5.z;
					    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
					    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat24 = texture(_LightTexture0, u_xlat6.xy).w;
					    u_xlat23 = u_xlat23 * u_xlat24;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).x;
					    u_xlat23 = u_xlat23 * u_xlat24;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat22 = max(u_xlat3.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat7 * u_xlat7;
					    u_xlat1.x = u_xlat14 * u_xlat14;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat14 = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat14 = u_xlat8 * u_xlat14 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat7 = u_xlat7 * u_xlat7 + 0.5;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat7 = u_xlat14 * u_xlat14;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat18;
					vec2 u_xlat21;
					float u_xlat27;
					bool u_xlatb27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat29 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat12.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat12.x = u_xlat12.x * _DispAmp;
					    u_xlat28 = u_xlat28 * u_xlat12.x;
					    u_xlat29 = u_xlat29 * u_xlat12.x;
					    u_xlat3.x = u_xlat12.x * u_xlat3.x;
					    u_xlat21.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat12.x = u_xlat12.x * u_xlat21.x;
					    u_xlat12.x = u_xlat12.x / _DispMainTex_ST.y;
					    u_xlat12.xy = vs_TEXCOORD5.xy * u_xlat12.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat12.xy);
					    u_xlat3.xy = vs_TEXCOORD5.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat29) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat21.xy);
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat28) + u_xlat6.zw;
					    u_xlat6 = texture(_MainTexHead, u_xlat21.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat28 = u_xlat6.w + u_xlat7.w;
					    u_xlat28 = u_xlat28 * u_xlat4.w;
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat28 = float(1.0) / u_xlat28;
					    u_xlat28 = u_xlat28 + u_xlat4.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 + -0.400000006;
					    SV_Target0.w = u_xlat28 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat7.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat7.x = u_xlat7.z * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat7.z = sqrt(u_xlat28);
					    u_xlat3.xyz = texture(_NormalMapHead, u_xlat21.xy).xyw;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat3.z = sqrt(u_xlat28);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.www * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat7 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat7;
					    u_xlat7 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat7;
					    u_xlat7 = u_xlat7 + unity_WorldToLight[3];
					    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb28){
					        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb28)) ? u_xlat8.xyz : vs_TEXCOORD4.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat28 = u_xlat8.y * 0.25 + 0.75;
					        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat8.x = max(u_xlat28, u_xlat29);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					    } else {
					        u_xlat8.x = float(1.0);
					        u_xlat8.y = float(1.0);
					        u_xlat8.z = float(1.0);
					        u_xlat8.w = float(1.0);
					    }
					    u_xlat28 = dot(u_xlat8, unity_OcclusionMaskSelector);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlatb29 = 0.0<u_xlat7.z;
					    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);
					    u_xlat8.xy = u_xlat7.xy / u_xlat7.ww;
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat30 = texture(_LightTexture0, u_xlat8.xy).w;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = texture(_LightTextureB0, vec2(u_xlat30)).x;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat7.xyz;
					    u_xlat7.xyz = vec3(u_xlat28) * _LightColor0.xyz;
					    u_xlat28 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat28 = max(u_xlat6.z, u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat9.x = u_xlat0.x * u_xlat0.x;
					    u_xlat9.x = dot(u_xlat9.xx, vec2(u_xlat28));
					    u_xlat9.x = u_xlat9.x + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
					    u_xlat1.x = -abs(u_xlat27) + 1.0;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat18 = u_xlat28 * u_xlat28;
					    u_xlat18 = max(u_xlat18, 0.00200000009);
					    u_xlat1.x = (-u_xlat18) + 1.0;
					    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
					    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat18;
					    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
					    u_xlat27 = u_xlat2.x * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 + 9.99999975e-06;
					    u_xlat27 = 0.5 / u_xlat27;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat11 * u_xlat18 + (-u_xlat11);
					    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
					    u_xlat18 = u_xlat18 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat18 = u_xlat18 / u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat27;
					    u_xlat9.y = u_xlat18 * 3.14159274;
					    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
					    u_xlat18 = max(u_xlat9.y, 0.0);
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb27 = u_xlat27!=0.0;
					    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat27 * u_xlat18;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat7.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * vec3(u_xlat18);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(9) uniform  samplerCube _LightTexture0;
					UNITY_LOCATION(10) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(11) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat9.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat9.x = u_xlat9.x * _DispAmp;
					    u_xlat21 = u_xlat21 * u_xlat9.x;
					    u_xlat22 = u_xlat22 * u_xlat9.x;
					    u_xlat2.x = u_xlat9.x * u_xlat2.x;
					    u_xlat16.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat9.x = u_xlat9.x * u_xlat16.x;
					    u_xlat9.x = u_xlat9.x / _DispMainTex_ST.y;
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat9.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat9.xy);
					    u_xlat2.xy = vs_TEXCOORD5.xy * u_xlat2.xx + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat2.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat16.xy);
					    u_xlat16.xy = vs_TEXCOORD5.xy * vec2(u_xlat21) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat16.xy);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat5.w + u_xlat6.w;
					    u_xlat21 = u_xlat21 * u_xlat3.w;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + u_xlat3.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat21 = u_xlat21 + -0.400000006;
					    SV_Target0.w = u_xlat21 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat2.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat5.z = sqrt(u_xlat21);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat16.xy).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb21){
					        u_xlatb21 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb21)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat21 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat21, u_xlat22);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat21 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = texture(_LightTextureB0, vec2(u_xlat22)).x;
					    u_xlat23 = texture(_LightTexture0, u_xlat5.xyz).w;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat21 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat21 = max(u_xlat3.z, u_xlat21);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(9) uniform  samplerCube _LightTexture0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat14;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat16.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat16.x = u_xlat16.x * _DispAmp;
					    u_xlat22 = u_xlat22 * u_xlat16.x;
					    u_xlat2.xy = u_xlat16.xx * u_xlat2.xy;
					    u_xlat23 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat16.x = u_xlat16.x * u_xlat23;
					    u_xlat16.x = u_xlat16.x / _DispMainTex_ST.y;
					    u_xlat16.xy = vs_TEXCOORD5.xy * u_xlat16.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat16.xy);
					    u_xlat9.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat9.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat22) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat22 = u_xlat5.w + u_xlat6.w;
					    u_xlat22 = u_xlat22 * u_xlat3.w;
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat22 = float(1.0) / u_xlat22;
					    u_xlat22 = u_xlat22 + u_xlat3.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 + -0.400000006;
					    SV_Target0.w = u_xlat22 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat5.xyz = texture(_NormalMap, u_xlat9.xy).xyw;
					    u_xlat5.x = u_xlat5.z * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat5.z = sqrt(u_xlat22);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat22, u_xlat23);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat23 = texture(_LightTextureB0, vec2(u_xlat23)).x;
					    u_xlat24 = texture(_LightTexture0, u_xlat5.xyz).w;
					    u_xlat23 = u_xlat23 * u_xlat24;
					    u_xlat22 = u_xlat22 * u_xlat23;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat22 = max(u_xlat3.y, u_xlat3.x);
					    u_xlat22 = max(u_xlat3.z, u_xlat22);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat7 * u_xlat7;
					    u_xlat1.x = u_xlat14 * u_xlat14;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat14 = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat14 = u_xlat8 * u_xlat14 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat7 = u_xlat7 * u_xlat7 + 0.5;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat7 = u_xlat14 * u_xlat14;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(9) uniform  samplerCube _LightTexture0;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  float vs_TEXCOORD9;
					layout(location = 3) in  vec3 vs_TEXCOORD2;
					layout(location = 4) in  vec3 vs_TEXCOORD3;
					layout(location = 5) in  vec3 vs_TEXCOORD4;
					layout(location = 6) in  vec4 vs_TEXCOORD5;
					layout(location = 7) in  vec4 vs_TEXCOORD6;
					layout(location = 8) in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat18;
					vec2 u_xlat21;
					float u_xlat27;
					bool u_xlatb27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat29 = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat3.x = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat12.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat12.x = u_xlat12.x * _DispAmp;
					    u_xlat28 = u_xlat28 * u_xlat12.x;
					    u_xlat29 = u_xlat29 * u_xlat12.x;
					    u_xlat3.x = u_xlat12.x * u_xlat3.x;
					    u_xlat21.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat12.x = u_xlat12.x * u_xlat21.x;
					    u_xlat12.x = u_xlat12.x / _DispMainTex_ST.y;
					    u_xlat12.xy = vs_TEXCOORD5.xy * u_xlat12.xx + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_TintMaskTex, u_xlat12.xy);
					    u_xlat3.xy = vs_TEXCOORD5.xy * u_xlat3.xx + vs_TEXCOORD0.zw;
					    u_xlat5.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat6 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat29) + u_xlat6.xy;
					    u_xlat7 = texture(_MainTexLayer2, u_xlat21.xy);
					    u_xlat21.xy = vs_TEXCOORD5.xy * vec2(u_xlat28) + u_xlat6.zw;
					    u_xlat6 = texture(_MainTexHead, u_xlat21.xy);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat7.www * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat4.xyz * _Specular.xyz;
					    u_xlat28 = u_xlat6.w + u_xlat7.w;
					    u_xlat28 = u_xlat28 * u_xlat4.w;
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat28 = float(1.0) / u_xlat28;
					    u_xlat28 = u_xlat28 + u_xlat4.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 + -0.400000006;
					    SV_Target0.w = u_xlat28 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat7.xyz = texture(_NormalMap, u_xlat3.xy).xyw;
					    u_xlat7.x = u_xlat7.z * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat7.z = sqrt(u_xlat28);
					    u_xlat3.xyz = texture(_NormalMapHead, u_xlat21.xy).xyw;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat3.z = sqrt(u_xlat28);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.www * u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb28){
					        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat8.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat8.xyz;
					        u_xlat8.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat8.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.xyz = (bool(u_xlatb28)) ? u_xlat8.xyz : vs_TEXCOORD4.xyz;
					        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat8.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat28 = u_xlat8.y * 0.25 + 0.75;
					        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat8.x = max(u_xlat28, u_xlat29);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
					    } else {
					        u_xlat8.x = float(1.0);
					        u_xlat8.y = float(1.0);
					        u_xlat8.z = float(1.0);
					        u_xlat8.w = float(1.0);
					    }
					    u_xlat28 = dot(u_xlat8, unity_OcclusionMaskSelector);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = texture(_LightTextureB0, vec2(u_xlat29)).x;
					    u_xlat30 = texture(_LightTexture0, u_xlat7.xyz).w;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat7.xyz;
					    u_xlat7.xyz = vec3(u_xlat28) * _LightColor0.xyz;
					    u_xlat28 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat28 = max(u_xlat6.z, u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat9.x = u_xlat0.x * u_xlat0.x;
					    u_xlat9.x = dot(u_xlat9.xx, vec2(u_xlat28));
					    u_xlat9.x = u_xlat9.x + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
					    u_xlat1.x = -abs(u_xlat27) + 1.0;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat18 = u_xlat28 * u_xlat28;
					    u_xlat18 = max(u_xlat18, 0.00200000009);
					    u_xlat1.x = (-u_xlat18) + 1.0;
					    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
					    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat18;
					    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
					    u_xlat27 = u_xlat2.x * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 + 9.99999975e-06;
					    u_xlat27 = 0.5 / u_xlat27;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat11 * u_xlat18 + (-u_xlat11);
					    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
					    u_xlat18 = u_xlat18 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat18 = u_xlat18 / u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat27;
					    u_xlat9.y = u_xlat18 * 3.14159274;
					    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
					    u_xlat18 = max(u_xlat9.y, 0.0);
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb27 = u_xlat27!=0.0;
					    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat27 * u_xlat18;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat7.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * vec3(u_xlat18);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler2D unity_NHxRoughness;
					UNITY_LOCATION(10) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat7;
					vec2 u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat13.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat13.x = u_xlat13.x * _DispAmp;
					    u_xlat18 = u_xlat18 * u_xlat13.x;
					    u_xlat1.xy = u_xlat13.xx * u_xlat1.xy;
					    u_xlat19 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat13.x = u_xlat13.x * u_xlat19;
					    u_xlat13.x = u_xlat13.x / _DispMainTex_ST.y;
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat13.xx + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat13.xy);
					    u_xlat7.xy = vs_TEXCOORD5.xy * u_xlat1.yy + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat7.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat1.xw = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat1.xw);
					    u_xlat1.xw = vs_TEXCOORD5.xy * vec2(u_xlat18) + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xw);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat18 = u_xlat4.w + u_xlat5.w;
					    u_xlat18 = u_xlat18 * u_xlat2.w;
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat18 = float(1.0) / u_xlat18;
					    u_xlat18 = u_xlat18 + u_xlat2.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + -0.400000006;
					    SV_Target0.w = u_xlat18 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat7.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xw).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat4.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat4.xy;
					    u_xlat4.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy + unity_WorldToLight[3].xy;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb18)) ? u_xlat5.xyz : vs_TEXCOORD4.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat18, u_xlat19);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = texture(_LightTexture0, u_xlat4.xy).w;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat18 = max(u_xlat2.z, u_xlat18);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat19 = u_xlat19 + u_xlat19;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat19)) + u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.x = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat1.y = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat1.z = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat19 = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat19 = u_xlat19 * _DispAmp;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 / _DispMainTex_ST.y;
					    u_xlat2.xy = vs_TEXCOORD5.xy * vec2(u_xlat19) + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_TintMaskTex, u_xlat2.xy);
					    u_xlat13.xy = vs_TEXCOORD5.xy * u_xlat1.zz + vs_TEXCOORD0.zw;
					    u_xlat3.xyz = texture(_MainTex, u_xlat13.xy).xyz;
					    u_xlat4 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat4.xy = vs_TEXCOORD5.xy * u_xlat1.yy + u_xlat4.xy;
					    u_xlat5 = texture(_MainTexLayer2, u_xlat4.xy);
					    u_xlat1.xy = vs_TEXCOORD5.xy * u_xlat1.xx + u_xlat4.zw;
					    u_xlat4 = texture(_MainTexHead, u_xlat1.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Specular.xyz;
					    u_xlat21 = u_xlat4.w + u_xlat5.w;
					    u_xlat21 = u_xlat2.w * u_xlat21;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat20 = u_xlat2.w + u_xlat21;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat20 = u_xlat20 + -0.400000006;
					    SV_Target0.w = u_xlat20 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat4.xyz = texture(_NormalMap, u_xlat13.xy).xyw;
					    u_xlat4.x = u_xlat4.z * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat4.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = texture(_NormalMapHead, u_xlat1.xy).xyw;
					    u_xlat1.x = u_xlat1.z * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat4.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat4.xy;
					    u_xlat4.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy + unity_WorldToLight[3].xy;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb19)) ? u_xlat5.xyz : vs_TEXCOORD4.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat19, u_xlat20);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = texture(_LightTexture0, u_xlat4.xy).w;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat19 = max(u_xlat2.z, u_xlat19);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat12 = u_xlat6 * u_xlat6;
					    u_xlat7 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12 + -1.0;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat6 = u_xlat6 * u_xlat6 + 0.5;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat6 = u_xlat12 * u_xlat12;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat7 / u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 _Color;
						vec4 _Specular;
						float _HeadDisplacement;
						float _Layer2Displacement;
						vec4 unused_0_9;
						vec4 _DispMainTex_ST;
						float _DispAmp;
						vec4 unused_0_12[3];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					UNITY_BINDING(2) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					UNITY_BINDING(3) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					UNITY_BINDING(4) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					UNITY_LOCATION(0) uniform  sampler2D _DispMainTex;
					UNITY_LOCATION(1) uniform  sampler2D _DispVerticalTex;
					UNITY_LOCATION(2) uniform  sampler2D _TintMaskTex;
					UNITY_LOCATION(3) uniform  sampler2D _MainTex;
					UNITY_LOCATION(4) uniform  sampler2D _MainTexLayer2;
					UNITY_LOCATION(5) uniform  sampler2D _MainTexHead;
					UNITY_LOCATION(6) uniform  sampler2D _NormalMap;
					UNITY_LOCATION(7) uniform  sampler2D _NormalMapHead;
					UNITY_LOCATION(8) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(9) uniform  sampler3D unity_ProbeVolumeSH;
					layout(location = 0) in  vec4 vs_TEXCOORD0;
					layout(location = 1) in  vec3 vs_TEXCOORD1;
					layout(location = 2) in  vec3 vs_TEXCOORD2;
					layout(location = 3) in  vec3 vs_TEXCOORD3;
					layout(location = 4) in  vec3 vs_TEXCOORD4;
					layout(location = 5) in  vec4 vs_TEXCOORD5;
					layout(location = 6) in  vec4 vs_TEXCOORD6;
					layout(location = 7) in  vec4 vs_TEXCOORD7;
					layout(location = 8) in  float vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat25 = texture(_DispMainTex, vs_TEXCOORD5.zw).x;
					    u_xlat2.x = texture(_DispMainTex, vs_TEXCOORD6.xy).x;
					    u_xlat2.y = texture(_DispMainTex, vs_TEXCOORD6.zw).x;
					    u_xlat18.x = texture(_DispVerticalTex, vs_TEXCOORD7.xy).x;
					    u_xlat18.x = u_xlat18.x * _DispAmp;
					    u_xlat25 = u_xlat25 * u_xlat18.x;
					    u_xlat2.xy = u_xlat18.xx * u_xlat2.xy;
					    u_xlat26 = texture(_DispMainTex, vs_TEXCOORD7.zw).x;
					    u_xlat18.x = u_xlat18.x * u_xlat26;
					    u_xlat18.x = u_xlat18.x / _DispMainTex_ST.y;
					    u_xlat18.xy = vs_TEXCOORD5.xy * u_xlat18.xx + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_TintMaskTex, u_xlat18.xy);
					    u_xlat10.xy = vs_TEXCOORD5.xy * u_xlat2.yy + vs_TEXCOORD0.zw;
					    u_xlat4.xyz = texture(_MainTex, u_xlat10.xy).xyz;
					    u_xlat5 = vec4(_Layer2Displacement, _Layer2Displacement, _HeadDisplacement, _HeadDisplacement) * vs_TEXCOORD5.xyxy + vs_TEXCOORD0.zwzw;
					    u_xlat2.xw = vs_TEXCOORD5.xy * u_xlat2.xx + u_xlat5.xy;
					    u_xlat6 = texture(_MainTexLayer2, u_xlat2.xw);
					    u_xlat2.xw = vs_TEXCOORD5.xy * vec2(u_xlat25) + u_xlat5.zw;
					    u_xlat5 = texture(_MainTexHead, u_xlat2.xw);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat5.xyz = u_xlat3.xyz * _Specular.xyz;
					    u_xlat25 = u_xlat5.w + u_xlat6.w;
					    u_xlat25 = u_xlat25 * u_xlat3.w;
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat25 = float(1.0) / u_xlat25;
					    u_xlat25 = u_xlat25 + u_xlat3.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 + -0.400000006;
					    SV_Target0.w = u_xlat25 * 4.99999952;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    u_xlat6.xyz = texture(_NormalMap, u_xlat10.xy).xyw;
					    u_xlat6.x = u_xlat6.z * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat6.z = sqrt(u_xlat25);
					    u_xlat2.xyz = texture(_NormalMapHead, u_xlat2.xw).xyw;
					    u_xlat2.x = u_xlat2.z * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.z = sqrt(u_xlat25);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat6.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat6.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat6.xy;
					    u_xlat6.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat6.xy;
					    u_xlat6.xy = u_xlat6.xy + unity_WorldToLight[3].xy;
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb25 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD4.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat7.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : vs_TEXCOORD4.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat25 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat26 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat25, u_xlat26);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat25 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = texture(_LightTexture0, u_xlat6.xy).w;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat25 = max(u_xlat5.y, u_xlat5.x);
					    u_xlat25 = max(u_xlat5.z, u_xlat25);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-_Glossiness) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat25));
					    u_xlat8.x = u_xlat8.x + -0.5;
					    u_xlat16 = (-u_xlat1.x) + 1.0;
					    u_xlat17 = u_xlat16 * u_xlat16;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat16 = u_xlat16 * u_xlat17;
					    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
					    u_xlat17 = -abs(u_xlat24) + 1.0;
					    u_xlat2.x = u_xlat17 * u_xlat17;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat17 = u_xlat17 * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat17 + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat16 = u_xlat25 * u_xlat25;
					    u_xlat16 = max(u_xlat16, 0.00200000009);
					    u_xlat17 = (-u_xlat16) + 1.0;
					    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat16;
					    u_xlat17 = u_xlat1.x * u_xlat17 + u_xlat16;
					    u_xlat24 = abs(u_xlat24) * u_xlat17;
					    u_xlat24 = u_xlat1.x * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat17 = u_xlat9 * u_xlat16 + (-u_xlat9);
					    u_xlat9 = u_xlat17 * u_xlat9 + 1.0;
					    u_xlat16 = u_xlat16 * 0.318309873;
					    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;
					    u_xlat16 = u_xlat16 / u_xlat9;
					    u_xlat16 = u_xlat16 * u_xlat24;
					    u_xlat8.y = u_xlat16 * 3.14159274;
					    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
					    u_xlat16 = max(u_xlat8.y, 0.0);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb24 = u_xlat24!=0.0;
					    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
					    u_xlat16 = u_xlat24 * u_xlat16;
					    u_xlat1.xyz = u_xlat8.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * vec3(u_xlat16);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat0.x = u_xlat0.x * u_xlat25;
					    u_xlat2.xyz = (-_Specular.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    return;
					}"
				}
			}
		}
	}
}