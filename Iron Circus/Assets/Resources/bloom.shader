Shader "Hidden/AmplifyBloom" {
	Properties {
		_MainTex (" ", 2D) = "black" {}
		_AnamorphicRTS0 (" ", 2D) = "black" {}
		_AnamorphicRTS1 (" ", 2D) = "black" {}
		_AnamorphicRTS2 (" ", 2D) = "black" {}
		_AnamorphicRTS3 (" ", 2D) = "black" {}
		_AnamorphicRTS4 (" ", 2D) = "black" {}
		_AnamorphicRTS5 (" ", 2D) = "black" {}
		_AnamorphicRTS6 (" ", 2D) = "black" {}
		_AnamorphicRTS7 (" ", 2D) = "black" {}
		_LensFlareLUT (" ", 2D) = "black" {}
	}
	SubShader {
		Pass {
			Name "frag_threshold"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 63897
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_3[2];
						vec4 _BloomParams;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-_BloomParams.yyy);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_3[2];
						vec4 _BloomParams;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-_BloomParams.yyy);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_3[2];
						vec4 _BloomParams;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-_BloomParams.yyy);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[3];
						vec4 _BloomParams;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = u_xlat0 + (-_BloomParams.yyyy);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[3];
						vec4 _BloomParams;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = u_xlat0 + (-_BloomParams.yyyy);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[3];
						vec4 _BloomParams;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = u_xlat0 + (-_BloomParams.yyyy);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_thresholdMask"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 89948
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_3[2];
						vec4 _BloomParams;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-_BloomParams.yyy);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1.x);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_3[2];
						vec4 _BloomParams;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-_BloomParams.yyy);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1.x);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_3[2];
						vec4 _BloomParams;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-_BloomParams.yyy);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1.x);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[3];
						vec4 _BloomParams;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * u_xlat1 + (-_BloomParams.yyyy);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[3];
						vec4 _BloomParams;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * u_xlat1 + (-_BloomParams.yyyy);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[3];
						vec4 _BloomParams;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * u_xlat1 + (-_BloomParams.yyyy);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_anamorphicGlare"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 160591
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						mat4x4 _AnamorphicGlareOffsetsMat0;
						mat4x4 _AnamorphicGlareOffsetsMat1;
						mat4x4 _AnamorphicGlareOffsetsMat2;
						mat4x4 _AnamorphicGlareOffsetsMat3;
						mat4x4 _AnamorphicGlareWeightsMat0;
						mat4x4 _AnamorphicGlareWeightsMat1;
						mat4x4 _AnamorphicGlareWeightsMat2;
						mat4x4 _AnamorphicGlareWeightsMat3;
						vec4 unused_0_9[3];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_12[10];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].xy;
					    u_xlat0.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].xy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].x;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].x;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].x;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.x * _AnamorphicGlareWeightsMat0[0].y;
					    u_xlat1.y = u_xlat0.y * _AnamorphicGlareWeightsMat0[1].y;
					    u_xlat1.z = u_xlat0.z * _AnamorphicGlareWeightsMat0[2].y;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat0[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat0[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat0[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						mat4x4 _AnamorphicGlareOffsetsMat0;
						mat4x4 _AnamorphicGlareOffsetsMat1;
						mat4x4 _AnamorphicGlareOffsetsMat2;
						mat4x4 _AnamorphicGlareOffsetsMat3;
						mat4x4 _AnamorphicGlareWeightsMat0;
						mat4x4 _AnamorphicGlareWeightsMat1;
						mat4x4 _AnamorphicGlareWeightsMat2;
						mat4x4 _AnamorphicGlareWeightsMat3;
						vec4 unused_0_9[3];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_12[10];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].xy;
					    u_xlat0.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].xy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].x;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].x;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].x;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.x * _AnamorphicGlareWeightsMat0[0].y;
					    u_xlat1.y = u_xlat0.y * _AnamorphicGlareWeightsMat0[1].y;
					    u_xlat1.z = u_xlat0.z * _AnamorphicGlareWeightsMat0[2].y;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat0[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat0[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat0[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						mat4x4 _AnamorphicGlareOffsetsMat0;
						mat4x4 _AnamorphicGlareOffsetsMat1;
						mat4x4 _AnamorphicGlareOffsetsMat2;
						mat4x4 _AnamorphicGlareOffsetsMat3;
						mat4x4 _AnamorphicGlareWeightsMat0;
						mat4x4 _AnamorphicGlareWeightsMat1;
						mat4x4 _AnamorphicGlareWeightsMat2;
						mat4x4 _AnamorphicGlareWeightsMat3;
						vec4 unused_0_9[3];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_12[10];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].xy;
					    u_xlat0.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].xy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].x;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].x;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].x;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.x * _AnamorphicGlareWeightsMat0[0].y;
					    u_xlat1.y = u_xlat0.y * _AnamorphicGlareWeightsMat0[1].y;
					    u_xlat1.z = u_xlat0.z * _AnamorphicGlareWeightsMat0[2].y;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat0[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat0[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat0[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						mat4x4 _AnamorphicGlareOffsetsMat0;
						mat4x4 _AnamorphicGlareOffsetsMat1;
						mat4x4 _AnamorphicGlareOffsetsMat2;
						mat4x4 _AnamorphicGlareOffsetsMat3;
						mat4x4 _AnamorphicGlareWeightsMat0;
						mat4x4 _AnamorphicGlareWeightsMat1;
						mat4x4 _AnamorphicGlareWeightsMat2;
						mat4x4 _AnamorphicGlareWeightsMat3;
						vec4 unused_0_9[3];
						vec4 _MainTex_ST;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].xy;
					    u_xlat0.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].xy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].x;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].x;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].x;
					    u_xlat1.x = u_xlat0.x * _AnamorphicGlareWeightsMat0[0].y;
					    u_xlat1.y = u_xlat0.y * _AnamorphicGlareWeightsMat0[1].y;
					    u_xlat1.z = u_xlat0.z * _AnamorphicGlareWeightsMat0[2].y;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat0[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat0[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat0[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].w;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						mat4x4 _AnamorphicGlareOffsetsMat0;
						mat4x4 _AnamorphicGlareOffsetsMat1;
						mat4x4 _AnamorphicGlareOffsetsMat2;
						mat4x4 _AnamorphicGlareOffsetsMat3;
						mat4x4 _AnamorphicGlareWeightsMat0;
						mat4x4 _AnamorphicGlareWeightsMat1;
						mat4x4 _AnamorphicGlareWeightsMat2;
						mat4x4 _AnamorphicGlareWeightsMat3;
						vec4 unused_0_9[3];
						vec4 _MainTex_ST;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].xy;
					    u_xlat0.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].xy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].x;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].x;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].x;
					    u_xlat1.x = u_xlat0.x * _AnamorphicGlareWeightsMat0[0].y;
					    u_xlat1.y = u_xlat0.y * _AnamorphicGlareWeightsMat0[1].y;
					    u_xlat1.z = u_xlat0.z * _AnamorphicGlareWeightsMat0[2].y;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat0[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat0[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat0[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].w;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						mat4x4 _AnamorphicGlareOffsetsMat0;
						mat4x4 _AnamorphicGlareOffsetsMat1;
						mat4x4 _AnamorphicGlareOffsetsMat2;
						mat4x4 _AnamorphicGlareOffsetsMat3;
						mat4x4 _AnamorphicGlareWeightsMat0;
						mat4x4 _AnamorphicGlareWeightsMat1;
						mat4x4 _AnamorphicGlareWeightsMat2;
						mat4x4 _AnamorphicGlareWeightsMat3;
						vec4 unused_0_9[3];
						vec4 _MainTex_ST;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].xy;
					    u_xlat0.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].xy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].x;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].x;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].x;
					    u_xlat1.x = u_xlat0.x * _AnamorphicGlareWeightsMat0[0].y;
					    u_xlat1.y = u_xlat0.y * _AnamorphicGlareWeightsMat0[1].y;
					    u_xlat1.z = u_xlat0.z * _AnamorphicGlareWeightsMat0[2].y;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat0[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat0[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat0[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat0[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat0[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat0[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat0[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat0[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat1[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat1[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat1[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat1[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat1[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat1[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat1[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat1[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat2[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat2[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat2[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat2[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat2[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat2[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat2[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat2[2].w;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].xy;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].xy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].x;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].x;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].x;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].y;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].y;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xz = vs_TEXCOORD0.xx + _AnamorphicGlareOffsetsMat3[0].zw;
					    u_xlat1.yw = vs_TEXCOORD0.yy + _AnamorphicGlareOffsetsMat3[1].zw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = u_xlat2.x * _AnamorphicGlareWeightsMat3[0].z;
					    u_xlat3.y = u_xlat2.y * _AnamorphicGlareWeightsMat3[1].z;
					    u_xlat3.z = u_xlat2.z * _AnamorphicGlareWeightsMat3[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _AnamorphicGlareWeightsMat3[0].w;
					    u_xlat2.y = u_xlat1.y * _AnamorphicGlareWeightsMat3[1].w;
					    u_xlat2.z = u_xlat1.z * _AnamorphicGlareWeightsMat3[2].w;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_lensFlare0"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 222232
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_7[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
					    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat4.xy * _LensFlareGhostsParams.yy;
					    u_xlat4.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 1.41419995;
					    u_xlat2.x = fract(u_xlat4.x);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xy = u_xlat4.xx * u_xlat1.xy;
					    u_xlat1.xy = u_xlat4.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat0.xw = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xw = u_xlat0.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat0.xw);
					    u_xlat0.x = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat0.x;
					    u_xlat0.x = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
					    u_xlat0.xy = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.z * _BloomRange.x;
					    u_xlat3.z = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat8.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.x = u_xlat1.y * _BloomRange.x;
					    u_xlat3.y = u_xlat1.w * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LensFlareHaloParams.xxx;
					    u_xlat2.y = 0.0;
					    u_xlat1 = texture(_LensFlareLUT, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_7[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
					    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat4.xy * _LensFlareGhostsParams.yy;
					    u_xlat4.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 1.41419995;
					    u_xlat2.x = fract(u_xlat4.x);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xy = u_xlat4.xx * u_xlat1.xy;
					    u_xlat1.xy = u_xlat4.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat0.xw = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xw = u_xlat0.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat0.xw);
					    u_xlat0.x = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat0.x;
					    u_xlat0.x = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
					    u_xlat0.xy = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.z * _BloomRange.x;
					    u_xlat3.z = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat8.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.x = u_xlat1.y * _BloomRange.x;
					    u_xlat3.y = u_xlat1.w * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LensFlareHaloParams.xxx;
					    u_xlat2.y = 0.0;
					    u_xlat1 = texture(_LensFlareLUT, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_7[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
					    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat4.xy * _LensFlareGhostsParams.yy;
					    u_xlat4.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 1.41419995;
					    u_xlat2.x = fract(u_xlat4.x);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xy = u_xlat4.xx * u_xlat1.xy;
					    u_xlat1.xy = u_xlat4.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat0.xw = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xw = u_xlat0.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat0.xw);
					    u_xlat0.x = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat0.x;
					    u_xlat0.x = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
					    u_xlat0.xy = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.z * _BloomRange.x;
					    u_xlat3.z = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat8.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.x = u_xlat1.y * _BloomRange.x;
					    u_xlat3.y = u_xlat1.w * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LensFlareHaloParams.xxx;
					    u_xlat2.y = 0.0;
					    u_xlat1 = texture(_LensFlareLUT, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_5;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_7[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat8.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat8.xy = u_xlat8.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat8.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat9.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat9.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat9.x = (-u_xlat9.x) * 1.41419995 + 1.0;
					    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.z;
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.w;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat13 = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
					    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat13 = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.z = u_xlat3.z;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_5;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_7[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat8.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat8.xy = u_xlat8.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat8.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat9.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat9.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat9.x = (-u_xlat9.x) * 1.41419995 + 1.0;
					    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.z;
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.w;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat13 = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
					    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat13 = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.z = u_xlat3.z;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_5;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_7[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat8.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat8.xy = u_xlat8.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat8.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat9.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat9.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat9.x = (-u_xlat9.x) * 1.41419995 + 1.0;
					    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.z;
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.w;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat13 = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
					    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat13 = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.z = u_xlat3.z;
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_lensFlare1"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 309675
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat14.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat15.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat15.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat15.x = (-u_xlat15.x) * 1.41419995 + 1.0;
					    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.z;
					    u_xlat15.x = log2(u_xlat15.x);
					    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.w;
					    u_xlat15.x = exp2(u_xlat15.x);
					    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat16.xy = u_xlat14.xy * u_xlat2.zw + u_xlat1.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat16.xy);
					    u_xlat22 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat22;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat14.xy * u_xlat4.zw + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat6.z * _BloomRange.x;
					    u_xlat3.z = u_xlat6.w * u_xlat1.x;
					    u_xlat1.x = u_xlat5.y * _BloomRange.x;
					    u_xlat3.y = u_xlat5.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat15.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat14.xy * u_xlat2.xy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14.x = u_xlat2.x * _BloomRange.x;
					    u_xlat2.x = u_xlat2.w * u_xlat14.x;
					    u_xlat14.x = u_xlat4.z * _BloomRange.x;
					    u_xlat2.z = u_xlat4.w * u_xlat14.x;
					    u_xlat14.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7 = u_xlat4.y * _BloomRange.x;
					    u_xlat2.y = u_xlat4.w * u_xlat7;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat21 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat21 = max(u_xlat21, u_xlat1.x);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = u_xlat21 * 255.0;
					    u_xlat21 = ceil(u_xlat21);
					    u_xlat21 = u_xlat21 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat21);
					    SV_Target0.w = u_xlat21;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat14.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat15.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat15.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat15.x = (-u_xlat15.x) * 1.41419995 + 1.0;
					    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.z;
					    u_xlat15.x = log2(u_xlat15.x);
					    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.w;
					    u_xlat15.x = exp2(u_xlat15.x);
					    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat16.xy = u_xlat14.xy * u_xlat2.zw + u_xlat1.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat16.xy);
					    u_xlat22 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat22;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat14.xy * u_xlat4.zw + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat6.z * _BloomRange.x;
					    u_xlat3.z = u_xlat6.w * u_xlat1.x;
					    u_xlat1.x = u_xlat5.y * _BloomRange.x;
					    u_xlat3.y = u_xlat5.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat15.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat14.xy * u_xlat2.xy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14.x = u_xlat2.x * _BloomRange.x;
					    u_xlat2.x = u_xlat2.w * u_xlat14.x;
					    u_xlat14.x = u_xlat4.z * _BloomRange.x;
					    u_xlat2.z = u_xlat4.w * u_xlat14.x;
					    u_xlat14.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7 = u_xlat4.y * _BloomRange.x;
					    u_xlat2.y = u_xlat4.w * u_xlat7;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat21 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat21 = max(u_xlat21, u_xlat1.x);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = u_xlat21 * 255.0;
					    u_xlat21 = ceil(u_xlat21);
					    u_xlat21 = u_xlat21 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat21);
					    SV_Target0.w = u_xlat21;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat16;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat14.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat15.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat15.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat15.x = (-u_xlat15.x) * 1.41419995 + 1.0;
					    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.z;
					    u_xlat15.x = log2(u_xlat15.x);
					    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.w;
					    u_xlat15.x = exp2(u_xlat15.x);
					    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat16.xy = u_xlat14.xy * u_xlat2.zw + u_xlat1.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat16.xy);
					    u_xlat22 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat22;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat14.xy * u_xlat4.zw + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat6.z * _BloomRange.x;
					    u_xlat3.z = u_xlat6.w * u_xlat1.x;
					    u_xlat1.x = u_xlat5.y * _BloomRange.x;
					    u_xlat3.y = u_xlat5.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat15.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat14.xy * u_xlat2.xy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14.x = u_xlat2.x * _BloomRange.x;
					    u_xlat2.x = u_xlat2.w * u_xlat14.x;
					    u_xlat14.x = u_xlat4.z * _BloomRange.x;
					    u_xlat2.z = u_xlat4.w * u_xlat14.x;
					    u_xlat14.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7 = u_xlat4.y * _BloomRange.x;
					    u_xlat2.y = u_xlat4.w * u_xlat7;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat21 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat21 = max(u_xlat21, u_xlat1.x);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = u_xlat21 * 255.0;
					    u_xlat21 = ceil(u_xlat21);
					    u_xlat21 = u_xlat21 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat21);
					    SV_Target0.w = u_xlat21;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat12;
					vec2 u_xlat13;
					vec2 u_xlat14;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat12.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat12.xy = u_xlat12.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat12.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat13.x = dot(u_xlat13.xy, u_xlat13.xy);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.x) * 1.41419995 + 1.0;
					    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.z;
					    u_xlat13.x = log2(u_xlat13.x);
					    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.w;
					    u_xlat13.x = exp2(u_xlat13.x);
					    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat14.xy = u_xlat12.xy * u_xlat2.zw + u_xlat1.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat14.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat14.xy = u_xlat12.xy * u_xlat4.zw + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3.y = u_xlat5.y;
					    u_xlat1.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3.z = u_xlat5.z;
					    u_xlat1.xyz = u_xlat13.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat12.xy * u_xlat2.xy + u_xlat0.xy;
					    u_xlat12.xy = u_xlat12.xy * u_xlat4.xy + u_xlat0.xy;
					    u_xlat12.xy = u_xlat12.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat12.xy);
					    u_xlat12.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat12.xy);
					    u_xlat4.x = u_xlat2.x;
					    u_xlat12.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.y = u_xlat2.y;
					    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat12;
					vec2 u_xlat13;
					vec2 u_xlat14;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat12.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat12.xy = u_xlat12.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat12.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat13.x = dot(u_xlat13.xy, u_xlat13.xy);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.x) * 1.41419995 + 1.0;
					    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.z;
					    u_xlat13.x = log2(u_xlat13.x);
					    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.w;
					    u_xlat13.x = exp2(u_xlat13.x);
					    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat14.xy = u_xlat12.xy * u_xlat2.zw + u_xlat1.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat14.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat14.xy = u_xlat12.xy * u_xlat4.zw + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3.y = u_xlat5.y;
					    u_xlat1.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3.z = u_xlat5.z;
					    u_xlat1.xyz = u_xlat13.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat12.xy * u_xlat2.xy + u_xlat0.xy;
					    u_xlat12.xy = u_xlat12.xy * u_xlat4.xy + u_xlat0.xy;
					    u_xlat12.xy = u_xlat12.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat12.xy);
					    u_xlat12.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat12.xy);
					    u_xlat4.x = u_xlat2.x;
					    u_xlat12.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.y = u_xlat2.y;
					    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat12;
					vec2 u_xlat13;
					vec2 u_xlat14;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat12.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat12.xy = u_xlat12.xy * u_xlat1.xx;
					    u_xlat1.xy = u_xlat12.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = fract(u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
					    u_xlat13.x = dot(u_xlat13.xy, u_xlat13.xy);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.x) * 1.41419995 + 1.0;
					    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.z;
					    u_xlat13.x = log2(u_xlat13.x);
					    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.w;
					    u_xlat13.x = exp2(u_xlat13.x);
					    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat14.xy = u_xlat12.xy * u_xlat2.zw + u_xlat1.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat14.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat14.xy = u_xlat12.xy * u_xlat4.zw + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3.y = u_xlat5.y;
					    u_xlat1.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3.z = u_xlat5.z;
					    u_xlat1.xyz = u_xlat13.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.y = 0.0;
					    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat12.xy * u_xlat2.xy + u_xlat0.xy;
					    u_xlat12.xy = u_xlat12.xy * u_xlat4.xy + u_xlat0.xy;
					    u_xlat12.xy = u_xlat12.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat12.xy);
					    u_xlat12.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat12.xy);
					    u_xlat4.x = u_xlat2.x;
					    u_xlat12.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.y = u_xlat2.y;
					    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_lensFlare2"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 370052
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat9.x;
					    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat1.w = inversesqrt(u_xlat25);
					    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
					    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat16.xy;
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat25 = u_xlat4.x * _BloomRange.x;
					    u_xlat2.x = u_xlat4.w * u_xlat25;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat1.yz * u_xlat4.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat16.xy);
					    u_xlat16.x = u_xlat5.z * _BloomRange.x;
					    u_xlat2.z = u_xlat5.w * u_xlat16.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat26 = u_xlat5.x * _BloomRange.x;
					    u_xlat5.x = u_xlat5.w * u_xlat26;
					    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat5.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat5.y = u_xlat6.w * u_xlat1.x;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
					    u_xlat9.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat9.xy);
					    u_xlat24 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat24;
					    u_xlat24 = u_xlat4.z * _BloomRange.x;
					    u_xlat3.z = u_xlat4.w * u_xlat24;
					    u_xlat9.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat1.xw);
					    u_xlat24 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat1.x = u_xlat4.y * _BloomRange.x;
					    u_xlat3.y = u_xlat4.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat9.x;
					    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat1.w = inversesqrt(u_xlat25);
					    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
					    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat16.xy;
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat25 = u_xlat4.x * _BloomRange.x;
					    u_xlat2.x = u_xlat4.w * u_xlat25;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat1.yz * u_xlat4.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat16.xy);
					    u_xlat16.x = u_xlat5.z * _BloomRange.x;
					    u_xlat2.z = u_xlat5.w * u_xlat16.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat26 = u_xlat5.x * _BloomRange.x;
					    u_xlat5.x = u_xlat5.w * u_xlat26;
					    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat5.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat5.y = u_xlat6.w * u_xlat1.x;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
					    u_xlat9.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat9.xy);
					    u_xlat24 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat24;
					    u_xlat24 = u_xlat4.z * _BloomRange.x;
					    u_xlat3.z = u_xlat4.w * u_xlat24;
					    u_xlat9.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat1.xw);
					    u_xlat24 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat1.x = u_xlat4.y * _BloomRange.x;
					    u_xlat3.y = u_xlat4.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat9.x;
					    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat1.w = inversesqrt(u_xlat25);
					    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
					    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat16.xy;
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat25 = u_xlat4.x * _BloomRange.x;
					    u_xlat2.x = u_xlat4.w * u_xlat25;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat1.yz * u_xlat4.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat16.xy);
					    u_xlat16.x = u_xlat5.z * _BloomRange.x;
					    u_xlat2.z = u_xlat5.w * u_xlat16.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat26 = u_xlat5.x * _BloomRange.x;
					    u_xlat5.x = u_xlat5.w * u_xlat26;
					    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat5.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat5.y = u_xlat6.w * u_xlat1.x;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
					    u_xlat9.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat9.xy);
					    u_xlat24 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat24;
					    u_xlat24 = u_xlat4.z * _BloomRange.x;
					    u_xlat3.z = u_xlat4.w * u_xlat24;
					    u_xlat9.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat1.xw);
					    u_xlat24 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat1.x = u_xlat4.y * _BloomRange.x;
					    u_xlat3.y = u_xlat4.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat14.xy = fract(u_xlat14.xy);
					    u_xlat1.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat8.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat22 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat1.w = inversesqrt(u_xlat22);
					    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
					    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat14.xy;
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat2.x = u_xlat4.x;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat14.xy = u_xlat1.yz * u_xlat4.xy + u_xlat14.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat14.xy);
					    u_xlat2.z = u_xlat5.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
					    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.z;
					    u_xlat21 = log2(u_xlat21);
					    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.w;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat5.y = u_xlat6.y;
					    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat5.z = u_xlat6.z;
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
					    u_xlat8.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat4.x = u_xlat3.x;
					    u_xlat8.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat4.y = u_xlat3.y;
					    u_xlat21 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
					    u_xlat21 = u_xlat21 * _LensFlareHaloParams.z;
					    u_xlat21 = log2(u_xlat21);
					    u_xlat21 = u_xlat21 * _LensFlareHaloParams.w;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat14.xy = fract(u_xlat14.xy);
					    u_xlat1.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat8.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat22 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat1.w = inversesqrt(u_xlat22);
					    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
					    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat14.xy;
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat2.x = u_xlat4.x;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat14.xy = u_xlat1.yz * u_xlat4.xy + u_xlat14.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat14.xy);
					    u_xlat2.z = u_xlat5.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
					    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.z;
					    u_xlat21 = log2(u_xlat21);
					    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.w;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat5.y = u_xlat6.y;
					    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat5.z = u_xlat6.z;
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
					    u_xlat8.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat4.x = u_xlat3.x;
					    u_xlat8.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat4.y = u_xlat3.y;
					    u_xlat21 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
					    u_xlat21 = u_xlat21 * _LensFlareHaloParams.z;
					    u_xlat21 = log2(u_xlat21);
					    u_xlat21 = u_xlat21 * _LensFlareHaloParams.w;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat14.xy = fract(u_xlat14.xy);
					    u_xlat1.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat8.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat22 = dot(u_xlat1.yz, u_xlat1.yz);
					    u_xlat1.w = inversesqrt(u_xlat22);
					    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
					    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat14.xy;
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat2.x = u_xlat4.x;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat14.xy = u_xlat1.yz * u_xlat4.xy + u_xlat14.xy;
					    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat14.xy);
					    u_xlat2.z = u_xlat5.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
					    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.z;
					    u_xlat21 = log2(u_xlat21);
					    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.w;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat5.y = u_xlat6.y;
					    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat5.z = u_xlat6.z;
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
					    u_xlat8.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat4.x = u_xlat3.x;
					    u_xlat8.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat4.y = u_xlat3.y;
					    u_xlat21 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
					    u_xlat21 = u_xlat21 * _LensFlareHaloParams.z;
					    u_xlat21 = log2(u_xlat21);
					    u_xlat21 = u_xlat21 * _LensFlareHaloParams.w;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_lensFlare3"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 453897
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat18.xy = fract(u_xlat18.xy);
					    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat10.xy = fract(u_xlat10.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
					    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat21.xy);
					    u_xlat28 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat28;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat18.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.xw = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat1.x;
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat10.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat10.xy);
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BloomRange.x;
					    u_xlat6.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat20.xy);
					    u_xlat27 = u_xlat4.x * _BloomRange.x;
					    u_xlat4.x = u_xlat4.w * u_xlat27;
					    u_xlat27 = u_xlat3.z * _BloomRange.x;
					    u_xlat4.z = u_xlat3.w * u_xlat27;
					    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat28 = u_xlat3.y * _BloomRange.x;
					    u_xlat4.y = u_xlat3.w * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat27 = u_xlat27 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
					    SV_Target0.w = u_xlat27;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat18.xy = fract(u_xlat18.xy);
					    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat10.xy = fract(u_xlat10.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
					    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat21.xy);
					    u_xlat28 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat28;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat18.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.xw = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat1.x;
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat10.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat10.xy);
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BloomRange.x;
					    u_xlat6.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat20.xy);
					    u_xlat27 = u_xlat4.x * _BloomRange.x;
					    u_xlat4.x = u_xlat4.w * u_xlat27;
					    u_xlat27 = u_xlat3.z * _BloomRange.x;
					    u_xlat4.z = u_xlat3.w * u_xlat27;
					    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat28 = u_xlat3.y * _BloomRange.x;
					    u_xlat4.y = u_xlat3.w * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat27 = u_xlat27 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
					    SV_Target0.w = u_xlat27;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat18.xy = fract(u_xlat18.xy);
					    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat10.xy = fract(u_xlat10.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
					    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat21.xy);
					    u_xlat28 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat28;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat18.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.xw = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat1.x;
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat10.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat10.xy);
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BloomRange.x;
					    u_xlat6.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat20.xy);
					    u_xlat27 = u_xlat4.x * _BloomRange.x;
					    u_xlat4.x = u_xlat4.w * u_xlat27;
					    u_xlat27 = u_xlat3.z * _BloomRange.x;
					    u_xlat4.z = u_xlat3.w * u_xlat27;
					    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat28 = u_xlat3.y * _BloomRange.x;
					    u_xlat4.y = u_xlat3.w * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat27 = u_xlat27 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
					    SV_Target0.w = u_xlat27;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat9.xy = fract(u_xlat9.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
					    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat19.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat16.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat9.xy) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat1.xw = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat9.xy;
					    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat9.xy);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.x = u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat18.xy);
					    u_xlat3.x = u_xlat4.x;
					    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3.y = u_xlat4.y;
					    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat9.xy = fract(u_xlat9.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
					    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat19.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat16.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat9.xy) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat1.xw = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat9.xy;
					    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat9.xy);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.x = u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat18.xy);
					    u_xlat3.x = u_xlat4.x;
					    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3.y = u_xlat4.y;
					    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat9.xy = fract(u_xlat9.xy);
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
					    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat19.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat16.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat9.xy) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat1.xw = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat9.xy;
					    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat9.xy);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.x = u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat18.xy);
					    u_xlat3.x = u_xlat4.x;
					    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3.y = u_xlat4.y;
					    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_lensFlare4"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 506839
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat18.xy = fract(u_xlat18.xy);
					    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
					    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat21.xy);
					    u_xlat28 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat28;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat18.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.yz = u_xlat10.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat1.x;
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
					    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
					    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat10.xy);
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BloomRange.x;
					    u_xlat6.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat20.xy);
					    u_xlat27 = u_xlat4.x * _BloomRange.x;
					    u_xlat4.x = u_xlat4.w * u_xlat27;
					    u_xlat27 = u_xlat3.z * _BloomRange.x;
					    u_xlat4.z = u_xlat3.w * u_xlat27;
					    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat28 = u_xlat3.y * _BloomRange.x;
					    u_xlat4.y = u_xlat3.w * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat27 = u_xlat27 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
					    SV_Target0.w = u_xlat27;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat18.xy = fract(u_xlat18.xy);
					    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
					    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat21.xy);
					    u_xlat28 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat28;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat18.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.yz = u_xlat10.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat1.x;
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
					    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
					    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat10.xy);
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BloomRange.x;
					    u_xlat6.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat20.xy);
					    u_xlat27 = u_xlat4.x * _BloomRange.x;
					    u_xlat4.x = u_xlat4.w * u_xlat27;
					    u_xlat27 = u_xlat3.z * _BloomRange.x;
					    u_xlat4.z = u_xlat3.w * u_xlat27;
					    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat28 = u_xlat3.y * _BloomRange.x;
					    u_xlat4.y = u_xlat3.w * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat27 = u_xlat27 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
					    SV_Target0.w = u_xlat27;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat18.xy = fract(u_xlat18.xy);
					    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
					    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat21.xy);
					    u_xlat28 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat28;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat18.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.yz = u_xlat10.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat21.xy);
					    u_xlat29 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat29;
					    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
					    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat1.x;
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
					    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
					    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat10.xy);
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BloomRange.x;
					    u_xlat6.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat7.z * _BloomRange.x;
					    u_xlat6.z = u_xlat7.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat20.xy);
					    u_xlat27 = u_xlat4.x * _BloomRange.x;
					    u_xlat4.x = u_xlat4.w * u_xlat27;
					    u_xlat27 = u_xlat3.z * _BloomRange.x;
					    u_xlat4.z = u_xlat3.w * u_xlat27;
					    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat28 = u_xlat3.y * _BloomRange.x;
					    u_xlat4.y = u_xlat3.w * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat27 = u_xlat27 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
					    SV_Target0.w = u_xlat27;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
					    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat19.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat16.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.yz = u_xlat9.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
					    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat9.xy);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.x = u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat18.xy);
					    u_xlat3.x = u_xlat4.x;
					    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3.y = u_xlat4.y;
					    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
					    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat19.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat16.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.yz = u_xlat9.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
					    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat9.xy);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.x = u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat18.xy);
					    u_xlat3.x = u_xlat4.x;
					    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3.y = u_xlat4.y;
					    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat16;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = fract(u_xlat16.xy);
					    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
					    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat19.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat16.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.yz = u_xlat9.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
					    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
					    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
					    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat9.xy);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.x = u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat2.xy = fract(u_xlat2.xy);
					    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat18.xy);
					    u_xlat3.x = u_xlat4.x;
					    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3.y = u_xlat4.y;
					    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_lensFlare5"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 559949
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					vec2 u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat20.xy = fract(u_xlat20.xy);
					    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat11.x;
					    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
					    u_xlat11.x = inversesqrt(u_xlat11.x);
					    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
					    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat31 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat31;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat20.xy);
					    u_xlat20.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat20.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat32 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat32;
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.x * _BloomRange.x;
					    u_xlat6.x = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat8.z * _BloomRange.x;
					    u_xlat6.z = u_xlat8.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = fract(u_xlat3);
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat32 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat32;
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.x * _BloomRange.x;
					    u_xlat6.x = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat8.z * _BloomRange.x;
					    u_xlat6.z = u_xlat8.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat31 = u_xlat7.y * _BloomRange.x;
					    u_xlat7.y = u_xlat7.w * u_xlat31;
					    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
					    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat31 = u_xlat9.x * _BloomRange.x;
					    u_xlat7.x = u_xlat9.w * u_xlat31;
					    u_xlat9 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat31 = u_xlat9.z * _BloomRange.x;
					    u_xlat7.z = u_xlat9.w * u_xlat31;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat30 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat30;
					    u_xlat30 = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat30;
					    u_xlat30 = u_xlat3.z * _BloomRange.x;
					    u_xlat6.z = u_xlat3.w * u_xlat30;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat30 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat30;
					    u_xlat30 = u_xlat4.z * _BloomRange.x;
					    u_xlat3.z = u_xlat4.w * u_xlat30;
					    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat1.xw);
					    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat1.x = u_xlat4.y * _BloomRange.x;
					    u_xlat3.y = u_xlat4.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat30 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat30 = max(u_xlat30, u_xlat1.x);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = u_xlat30 * 255.0;
					    u_xlat30 = ceil(u_xlat30);
					    u_xlat30 = u_xlat30 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    SV_Target0.w = u_xlat30;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					vec2 u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat20.xy = fract(u_xlat20.xy);
					    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat11.x;
					    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
					    u_xlat11.x = inversesqrt(u_xlat11.x);
					    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
					    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat31 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat31;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat20.xy);
					    u_xlat20.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat20.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat32 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat32;
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.x * _BloomRange.x;
					    u_xlat6.x = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat8.z * _BloomRange.x;
					    u_xlat6.z = u_xlat8.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = fract(u_xlat3);
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat32 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat32;
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.x * _BloomRange.x;
					    u_xlat6.x = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat8.z * _BloomRange.x;
					    u_xlat6.z = u_xlat8.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat31 = u_xlat7.y * _BloomRange.x;
					    u_xlat7.y = u_xlat7.w * u_xlat31;
					    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
					    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat31 = u_xlat9.x * _BloomRange.x;
					    u_xlat7.x = u_xlat9.w * u_xlat31;
					    u_xlat9 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat31 = u_xlat9.z * _BloomRange.x;
					    u_xlat7.z = u_xlat9.w * u_xlat31;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat30 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat30;
					    u_xlat30 = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat30;
					    u_xlat30 = u_xlat3.z * _BloomRange.x;
					    u_xlat6.z = u_xlat3.w * u_xlat30;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat30 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat30;
					    u_xlat30 = u_xlat4.z * _BloomRange.x;
					    u_xlat3.z = u_xlat4.w * u_xlat30;
					    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat1.xw);
					    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat1.x = u_xlat4.y * _BloomRange.x;
					    u_xlat3.y = u_xlat4.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat30 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat30 = max(u_xlat30, u_xlat1.x);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = u_xlat30 * 255.0;
					    u_xlat30 = ceil(u_xlat30);
					    u_xlat30 = u_xlat30 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    SV_Target0.w = u_xlat30;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					vec2 u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat20.xy = fract(u_xlat20.xy);
					    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.y * _BloomRange.x;
					    u_xlat2.y = u_xlat2.w * u_xlat11.x;
					    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
					    u_xlat11.x = inversesqrt(u_xlat11.x);
					    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
					    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat31 = u_xlat5.x * _BloomRange.x;
					    u_xlat2.x = u_xlat5.w * u_xlat31;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat20.xy);
					    u_xlat20.x = u_xlat6.z * _BloomRange.x;
					    u_xlat2.z = u_xlat6.w * u_xlat20.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat32 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat32;
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.x * _BloomRange.x;
					    u_xlat6.x = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat8.z * _BloomRange.x;
					    u_xlat6.z = u_xlat8.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = fract(u_xlat3);
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat32 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat32;
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = u_xlat7.x * _BloomRange.x;
					    u_xlat6.x = u_xlat7.w * u_xlat1.x;
					    u_xlat1.x = u_xlat8.z * _BloomRange.x;
					    u_xlat6.z = u_xlat8.w * u_xlat1.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat31 = u_xlat7.y * _BloomRange.x;
					    u_xlat7.y = u_xlat7.w * u_xlat31;
					    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
					    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat31 = u_xlat9.x * _BloomRange.x;
					    u_xlat7.x = u_xlat9.w * u_xlat31;
					    u_xlat9 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat31 = u_xlat9.z * _BloomRange.x;
					    u_xlat7.z = u_xlat9.w * u_xlat31;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat30 = u_xlat6.y * _BloomRange.x;
					    u_xlat6.y = u_xlat6.w * u_xlat30;
					    u_xlat30 = u_xlat8.x * _BloomRange.x;
					    u_xlat6.x = u_xlat8.w * u_xlat30;
					    u_xlat30 = u_xlat3.z * _BloomRange.x;
					    u_xlat6.z = u_xlat3.w * u_xlat30;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat30 = u_xlat3.x * _BloomRange.x;
					    u_xlat3.x = u_xlat3.w * u_xlat30;
					    u_xlat30 = u_xlat4.z * _BloomRange.x;
					    u_xlat3.z = u_xlat4.w * u_xlat30;
					    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat1.xw);
					    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat1.x = u_xlat4.y * _BloomRange.x;
					    u_xlat3.y = u_xlat4.w * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat30 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat30 = max(u_xlat30, u_xlat1.x);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = u_xlat30 * 255.0;
					    u_xlat30 = ceil(u_xlat30);
					    u_xlat30 = u_xlat30 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    SV_Target0.w = u_xlat30;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					vec2 u_xlat20;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat20.xy = fract(u_xlat20.xy);
					    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat11.xy);
					    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
					    u_xlat11.x = inversesqrt(u_xlat11.x);
					    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
					    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat20.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat8.z;
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = fract(u_xlat3);
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat8.z;
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
					    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat6.x = u_xlat8.x;
					    u_xlat7.x = u_xlat9.x;
					    u_xlat8 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat6.z = u_xlat3.z;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat7.z = u_xlat8.z;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat4.x = u_xlat3.x;
					    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat4.y = u_xlat3.y;
					    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					vec2 u_xlat20;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat20.xy = fract(u_xlat20.xy);
					    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat11.xy);
					    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
					    u_xlat11.x = inversesqrt(u_xlat11.x);
					    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
					    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat20.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat8.z;
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = fract(u_xlat3);
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat8.z;
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
					    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat6.x = u_xlat8.x;
					    u_xlat7.x = u_xlat9.x;
					    u_xlat8 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat6.z = u_xlat3.z;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat7.z = u_xlat8.z;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat4.x = u_xlat3.x;
					    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat4.y = u_xlat3.y;
					    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[42];
						vec4 _LensFlareGhostsParams;
						vec4 _LensFlareHaloParams;
						float _LensFlareGhostChrDistortion;
						float _LensFlareHaloChrDistortion;
						vec4 _MainTex_ST;
						vec4 unused_0_6;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_8[9];
					};
					uniform  sampler2D _LensFlareLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					vec2 u_xlat20;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
					    u_xlat20.xy = fract(u_xlat20.xy);
					    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat11.xy);
					    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.41419995;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
					    u_xlat11.x = inversesqrt(u_xlat11.x);
					    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
					    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
					    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
					    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat2.x = u_xlat5.x;
					    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
					    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
					    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat20.xy);
					    u_xlat2.z = u_xlat6.z;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.y = 0.0;
					    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
					    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat8.z;
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = fract(u_xlat3);
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat8 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.z = u_xlat8.z;
					    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat7 = texture(_MainTex, u_xlat1.xw);
					    u_xlat6.x = u_xlat7.x;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
					    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat6.x = u_xlat8.x;
					    u_xlat7.x = u_xlat9.x;
					    u_xlat8 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat6.z = u_xlat3.z;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat7.z = u_xlat8.z;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
					    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
					    u_xlat1.xw = fract(u_xlat1.xw);
					    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
					    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat4.x = u_xlat3.x;
					    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
					    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat4.y = u_xlat3.y;
					    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
					    u_xlat30 = log2(u_xlat30);
					    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_downsamplerNoWeightedAvg"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 651075
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_downsampler_with_karis"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 677097
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_downsampler_without_karis"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 774185
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat24 = max(u_xlat24, u_xlat1.x);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = u_xlat24 * 255.0;
					    u_xlat24 = ceil(u_xlat24);
					    u_xlat24 = u_xlat24 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
					    SV_Target0.w = u_xlat24;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[9];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat6 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_downsampler_temp_filter_with_karis"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 849705
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
					    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = texture(_MainTex, u_xlat7.zw);
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat1.w = u_xlat27 * 0.00392156886;
					    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
					    u_xlat0 = (-u_xlat1) + u_xlat5;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
					    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = texture(_MainTex, u_xlat7.zw);
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat1.w = u_xlat27 * 0.00392156886;
					    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
					    u_xlat0 = (-u_xlat1) + u_xlat5;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
					    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = texture(_MainTex, u_xlat7.zw);
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat1.w = u_xlat27 * 0.00392156886;
					    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
					    u_xlat0 = (-u_xlat1) + u_xlat5;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat4;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat4;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat4;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_downsampler_temp_filter_without_karis"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 895189
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
					    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = texture(_MainTex, u_xlat7.zw);
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat1.w = u_xlat27 * 0.00392156886;
					    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
					    u_xlat0 = (-u_xlat1) + u_xlat5;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
					    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = texture(_MainTex, u_xlat7.zw);
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat1.w = u_xlat27 * 0.00392156886;
					    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
					    u_xlat0 = (-u_xlat1) + u_xlat5;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
					    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat8 = texture(_MainTex, u_xlat7.zw);
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat27 = max(u_xlat27, u_xlat1.x);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = u_xlat27 * 255.0;
					    u_xlat27 = ceil(u_xlat27);
					    u_xlat1.w = u_xlat27 * 0.00392156886;
					    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
					    u_xlat0 = (-u_xlat1) + u_xlat5;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat4;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat4;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[2];
						float _TempFilterValue;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat7 = texture(_MainTex, u_xlat6.zw);
					    u_xlat6 = texture(_MainTex, u_xlat6.xy);
					    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat5 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat4;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_horizontal_gaussian_blur"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 927839
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
					    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
					    u_xlat1.y = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
					    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
					    u_xlat1.y = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
					    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
					    u_xlat1.y = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
					    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
					    u_xlat1.y = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
					    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
					    u_xlat1.y = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
					    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
					    u_xlat1.y = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_vertical_gaussian_blur"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1007810
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat1.y = float(1.38461542);
					    u_xlat1.z = float(3.23076916);
					    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat1.y = float(1.38461542);
					    u_xlat1.z = float(3.23076916);
					    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat1.y = float(1.38461542);
					    u_xlat1.z = float(3.23076916);
					    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat1.y = float(1.38461542);
					    u_xlat1.z = float(3.23076916);
					    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat1.y = float(1.38461542);
					    u_xlat1.z = float(3.23076916);
					    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat1.y = float(1.38461542);
					    u_xlat1.z = float(3.23076916);
					    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_vertical_gaussian_blur_temp_filter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1075355
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5;
						float _TempFilterValue;
						vec4 unused_0_7[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat2.y = float(1.38461542);
					    u_xlat2.z = float(3.23076916);
					    u_xlat3 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat2 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat4.xyz;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.yyy;
					    u_xlat16 = max(u_xlat1.y, u_xlat1.x);
					    u_xlat2.x = max(u_xlat1.z, 9.99999997e-07);
					    u_xlat16 = max(u_xlat16, u_xlat2.x);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = u_xlat16 * 255.0;
					    u_xlat16 = ceil(u_xlat16);
					    u_xlat2.w = u_xlat16 * 0.00392156886;
					    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat2;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5;
						float _TempFilterValue;
						vec4 unused_0_7[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat2.y = float(1.38461542);
					    u_xlat2.z = float(3.23076916);
					    u_xlat3 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat2 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat4.xyz;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.yyy;
					    u_xlat16 = max(u_xlat1.y, u_xlat1.x);
					    u_xlat2.x = max(u_xlat1.z, 9.99999997e-07);
					    u_xlat16 = max(u_xlat16, u_xlat2.x);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = u_xlat16 * 255.0;
					    u_xlat16 = ceil(u_xlat16);
					    u_xlat2.w = u_xlat16 * 0.00392156886;
					    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat2;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5;
						float _TempFilterValue;
						vec4 unused_0_7[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat2.y = float(1.38461542);
					    u_xlat2.z = float(3.23076916);
					    u_xlat3 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat2 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat4.xyz;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
					    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.yyy;
					    u_xlat16 = max(u_xlat1.y, u_xlat1.x);
					    u_xlat2.x = max(u_xlat1.z, 9.99999997e-07);
					    u_xlat16 = max(u_xlat16, u_xlat2.x);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = u_xlat16 * 255.0;
					    u_xlat16 = ceil(u_xlat16);
					    u_xlat2.w = u_xlat16 * 0.00392156886;
					    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat2;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5;
						float _TempFilterValue;
						vec4 unused_0_7[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					void main()
					{
					    u_xlat0.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat0.y = float(1.38461542);
					    u_xlat0.z = float(3.23076916);
					    u_xlat1 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat0 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_AnamorphicRTS0, u_xlat3.xy);
					    u_xlat2.xyz = u_xlat4.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat2.xyz;
					    u_xlat4 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat3;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5;
						float _TempFilterValue;
						vec4 unused_0_7[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					void main()
					{
					    u_xlat0.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat0.y = float(1.38461542);
					    u_xlat0.z = float(3.23076916);
					    u_xlat1 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat0 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_AnamorphicRTS0, u_xlat3.xy);
					    u_xlat2.xyz = u_xlat4.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat2.xyz;
					    u_xlat4 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat3;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						float _BlurRadius;
						vec4 unused_0_5;
						float _TempFilterValue;
						vec4 unused_0_7[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					void main()
					{
					    u_xlat0.x = _MainTex_TexelSize.y * _BlurRadius;
					    u_xlat0.y = float(1.38461542);
					    u_xlat0.z = float(3.23076916);
					    u_xlat1 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat0 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
					    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_AnamorphicRTS0, u_xlat3.xy);
					    u_xlat2.xyz = u_xlat4.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat2.xyz;
					    u_xlat4 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
					    u_xlat0.w = 0.0;
					    u_xlat1 = (-u_xlat0) + u_xlat3;
					    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_upscaleTentFirstPass"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1157886
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_upscaleTent"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1184029
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat12 = max(u_xlat12, u_xlat1.x);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat12 = u_xlat12 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = u_xlat12;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
						vec4 _BloomParams;
						vec4 unused_0_6[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS1"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1290203
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 unused_0_2[42];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_5[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 unused_0_2[42];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_5[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 unused_0_2[42];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_5[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 unused_0_2[42];
						vec4 _MainTex_ST;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 unused_0_2[42];
						vec4 _MainTex_ST;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 unused_0_2[42];
						vec4 _MainTex_ST;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS2"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1342618
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 unused_0_3[41];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_6[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1.x);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 unused_0_3[41];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_6[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1.x);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 unused_0_3[41];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_6[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat6 = max(u_xlat6, u_xlat1.x);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = u_xlat6 * 255.0;
					    u_xlat6 = ceil(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    SV_Target0.w = u_xlat6;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 unused_0_3[41];
						vec4 _MainTex_ST;
						vec4 unused_0_5[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 unused_0_3[41];
						vec4 _MainTex_ST;
						vec4 unused_0_5[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 unused_0_3[41];
						vec4 _MainTex_ST;
						vec4 unused_0_5[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS3"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1403201
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 unused_0_4[40];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_7[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 unused_0_4[40];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_7[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 unused_0_4[40];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_7[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 unused_0_4[40];
						vec4 _MainTex_ST;
						vec4 unused_0_6[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 unused_0_4[40];
						vec4 _MainTex_ST;
						vec4 unused_0_6[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 unused_0_4[40];
						vec4 _MainTex_ST;
						vec4 unused_0_6[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS4"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1443195
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 unused_0_5[39];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_8[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 unused_0_5[39];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_8[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 unused_0_5[39];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_8[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 unused_0_5[39];
						vec4 _MainTex_ST;
						vec4 unused_0_7[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 unused_0_5[39];
						vec4 _MainTex_ST;
						vec4 unused_0_7[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 unused_0_5[39];
						vec4 _MainTex_ST;
						vec4 unused_0_7[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS5"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1543796
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 unused_0_6[38];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_9[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 unused_0_6[38];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_9[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 unused_0_6[38];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_9[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 unused_0_6[38];
						vec4 _MainTex_ST;
						vec4 unused_0_8[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 unused_0_6[38];
						vec4 _MainTex_ST;
						vec4 unused_0_8[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 unused_0_6[38];
						vec4 _MainTex_ST;
						vec4 unused_0_8[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS6"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1606474
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 unused_0_7[37];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_10[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 unused_0_7[37];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_10[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 unused_0_7[37];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_10[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 unused_0_7[37];
						vec4 _MainTex_ST;
						vec4 unused_0_9[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 unused_0_7[37];
						vec4 _MainTex_ST;
						vec4 unused_0_9[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 unused_0_7[37];
						vec4 _MainTex_ST;
						vec4 unused_0_9[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS7"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1698184
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 unused_0_8[36];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_11[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 unused_0_8[36];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_11[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 unused_0_8[36];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_11[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 unused_0_8[36];
						vec4 _MainTex_ST;
						vec4 unused_0_10[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 unused_0_8[36];
						vec4 _MainTex_ST;
						vec4 unused_0_10[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 unused_0_8[36];
						vec4 _MainTex_ST;
						vec4 unused_0_10[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_weightedAddPS8"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1713268
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_12[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					uniform  sampler2D _AnamorphicRTS7;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_12[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					uniform  sampler2D _AnamorphicRTS7;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 _BloomRange;
						vec4 unused_0_12[10];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					uniform  sampler2D _AnamorphicRTS7;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
					    u_xlat9 = max(u_xlat9, u_xlat1.x);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat9;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					uniform  sampler2D _AnamorphicRTS7;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					uniform  sampler2D _AnamorphicRTS7;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					uniform  sampler2D _AnamorphicRTS5;
					uniform  sampler2D _AnamorphicRTS6;
					uniform  sampler2D _AnamorphicRTS7;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
					    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_BokehFiltering"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1781751
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[10];
						vec4 _BokehParams;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
					    u_xlat0 = _BokehParams.y / u_xlat0;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
					    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _BokehParams.x;
					    u_xlat0 = u_xlat0 * u_xlat5.x;
					    u_xlat0 = u_xlat0 * 41.6669998;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _BokehParams.w);
					    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlatb5 = u_xlat2.x<u_xlat1.x;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat10 = u_xlat2.w + 0.0199999996;
					    u_xlatb10 = u_xlat10<u_xlat0;
					    u_xlat15 = u_xlat0 * 30.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
					    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
					    u_xlat2 = u_xlat5.xxxx * u_xlat2;
					    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat5.x + u_xlat10;
					    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat6.x = u_xlat4.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat15 = u_xlat4.w + 0.0199999996;
					    u_xlatb0 = u_xlat15<u_xlat0;
					    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
					    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
					    u_xlat0 = u_xlat0 + u_xlat5.x;
					    SV_Target0 = u_xlat1 / vec4(u_xlat0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[10];
						vec4 _BokehParams;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
					    u_xlat0 = _BokehParams.y / u_xlat0;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
					    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _BokehParams.x;
					    u_xlat0 = u_xlat0 * u_xlat5.x;
					    u_xlat0 = u_xlat0 * 41.6669998;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _BokehParams.w);
					    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlatb5 = u_xlat2.x<u_xlat1.x;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat10 = u_xlat2.w + 0.0199999996;
					    u_xlatb10 = u_xlat10<u_xlat0;
					    u_xlat15 = u_xlat0 * 30.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
					    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
					    u_xlat2 = u_xlat5.xxxx * u_xlat2;
					    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat5.x + u_xlat10;
					    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat6.x = u_xlat4.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat15 = u_xlat4.w + 0.0199999996;
					    u_xlatb0 = u_xlat15<u_xlat0;
					    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
					    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
					    u_xlat0 = u_xlat0 + u_xlat5.x;
					    SV_Target0 = u_xlat1 / vec4(u_xlat0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[10];
						vec4 _BokehParams;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
					    u_xlat0 = _BokehParams.y / u_xlat0;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
					    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _BokehParams.x;
					    u_xlat0 = u_xlat0 * u_xlat5.x;
					    u_xlat0 = u_xlat0 * 41.6669998;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _BokehParams.w);
					    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlatb5 = u_xlat2.x<u_xlat1.x;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat10 = u_xlat2.w + 0.0199999996;
					    u_xlatb10 = u_xlat10<u_xlat0;
					    u_xlat15 = u_xlat0 * 30.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
					    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
					    u_xlat2 = u_xlat5.xxxx * u_xlat2;
					    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat5.x + u_xlat10;
					    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat6.x = u_xlat4.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat15 = u_xlat4.w + 0.0199999996;
					    u_xlatb0 = u_xlat15<u_xlat0;
					    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
					    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
					    u_xlat0 = u_xlat0 + u_xlat5.x;
					    SV_Target0 = u_xlat1 / vec4(u_xlat0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[10];
						vec4 _BokehParams;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
					    u_xlat0 = _BokehParams.y / u_xlat0;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
					    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _BokehParams.x;
					    u_xlat0 = u_xlat0 * u_xlat5.x;
					    u_xlat0 = u_xlat0 * 41.6669998;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _BokehParams.w);
					    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlatb5 = u_xlat2.x<u_xlat1.x;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat10 = u_xlat2.w + 0.0199999996;
					    u_xlatb10 = u_xlat10<u_xlat0;
					    u_xlat15 = u_xlat0 * 30.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
					    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
					    u_xlat2 = u_xlat5.xxxx * u_xlat2;
					    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat5.x + u_xlat10;
					    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat6.x = u_xlat4.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat15 = u_xlat4.w + 0.0199999996;
					    u_xlatb0 = u_xlat15<u_xlat0;
					    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
					    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
					    u_xlat0 = u_xlat0 + u_xlat5.x;
					    SV_Target0 = u_xlat1 / vec4(u_xlat0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[10];
						vec4 _BokehParams;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
					    u_xlat0 = _BokehParams.y / u_xlat0;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
					    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _BokehParams.x;
					    u_xlat0 = u_xlat0 * u_xlat5.x;
					    u_xlat0 = u_xlat0 * 41.6669998;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _BokehParams.w);
					    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlatb5 = u_xlat2.x<u_xlat1.x;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat10 = u_xlat2.w + 0.0199999996;
					    u_xlatb10 = u_xlat10<u_xlat0;
					    u_xlat15 = u_xlat0 * 30.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
					    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
					    u_xlat2 = u_xlat5.xxxx * u_xlat2;
					    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat5.x + u_xlat10;
					    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat6.x = u_xlat4.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat15 = u_xlat4.w + 0.0199999996;
					    u_xlatb0 = u_xlat15<u_xlat0;
					    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
					    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
					    u_xlat0 = u_xlat0 + u_xlat5.x;
					    SV_Target0 = u_xlat1 / vec4(u_xlat0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _AnamorphicGlareWeights0;
						vec4 _AnamorphicGlareWeights1;
						vec4 _AnamorphicGlareWeights2;
						vec4 _AnamorphicGlareWeights3;
						vec4 _AnamorphicGlareWeights4;
						vec4 _AnamorphicGlareWeights5;
						vec4 _AnamorphicGlareWeights6;
						vec4 _AnamorphicGlareWeights7;
						vec4 unused_0_9[35];
						vec4 _MainTex_ST;
						vec4 unused_0_11[10];
						vec4 _BokehParams;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
					    u_xlat0 = _BokehParams.y / u_xlat0;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
					    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _BokehParams.x;
					    u_xlat0 = u_xlat0 * u_xlat5.x;
					    u_xlat0 = u_xlat0 * 41.6669998;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _BokehParams.w);
					    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlatb5 = u_xlat2.x<u_xlat1.x;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat10 = u_xlat2.w + 0.0199999996;
					    u_xlatb10 = u_xlat10<u_xlat0;
					    u_xlat15 = u_xlat0 * 30.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
					    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
					    u_xlat2 = u_xlat5.xxxx * u_xlat2;
					    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat5.x + u_xlat10;
					    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlatb10 = u_xlat4.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat6.x = u_xlat3.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat6.x = u_xlat4.w + 0.0199999996;
					    u_xlatb6 = u_xlat6.x<u_xlat0;
					    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
					    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
					    u_xlat5.x = u_xlat10 + u_xlat5.x;
					    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat4 = texture(_MainTex, u_xlat6.xy);
					    u_xlatb10 = u_xlat3.x<u_xlat1.x;
					    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
					    u_xlat15 = u_xlat4.w + 0.0199999996;
					    u_xlatb0 = u_xlat15<u_xlat0;
					    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
					    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
					    u_xlat0 = u_xlat0 + u_xlat5.x;
					    SV_Target0 = u_xlat1 / vec4(u_xlat0);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_BokehComposition2S"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1887392
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_BokehComposition3S"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1962584
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_BokehComposition4S"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1972178
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_BokehComposition5S"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2093301
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_BokehComposition6S"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2129582
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[45];
						vec4 _MainTex_ST;
						vec4 unused_0_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AnamorphicRTS0;
					uniform  sampler2D _AnamorphicRTS1;
					uniform  sampler2D _AnamorphicRTS2;
					uniform  sampler2D _AnamorphicRTS3;
					uniform  sampler2D _AnamorphicRTS4;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
					    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    SV_Target0 = min(u_xlat0, u_xlat1);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "frag_decode"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2190352
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[46];
						vec4 _BloomRange;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[46];
						vec4 _BloomRange;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[46];
						vec4 _BloomRange;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
					    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "AB_HIGH_PRECISION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}