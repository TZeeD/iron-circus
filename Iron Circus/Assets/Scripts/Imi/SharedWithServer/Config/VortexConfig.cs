// Decompiled with JetBrains decompiler
// Type: Imi.SharedWithServer.Config.VortexConfig
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 841B04D4-2E17-4B98-AC76-29D6D8A2480C
// Assembly location: D:\SteamLibrary\steamapps\common\Steel_Circus\sc_Data\Managed\Assembly-CSharp.dll

using Imi.Game;
using Imi.SharedWithServer.Game;
using Imi.SharedWithServer.Game.Skills;
using Imi.SharedWithServer.Utils.Extensions;
using Jitter.LinearMath;
using System;
using UnityEngine;

namespace Imi.SharedWithServer.Config
{
  [CreateAssetMenu(fileName = "VortexConfig", menuName = "SteelCircus/SkillConfigs/VortexConfig")]
  public class VortexConfig : SkillGraphConfig
  {
    public Imi.SharedWithServer.ScEntitas.Components.ButtonType button;
    public float minThrowDistance;
    public float maxThrowDistance;
    public float throwDuration;
    public float activationDuration;
    public float pullSpeed;
    public float pullDuration;
    public float cooldown;
    public bool showAoePreviewForOtherPlayers;
    public AreaOfEffect aoe;
    public VfxPrefab implosionVfx;
    public const string VortexPosition = "ImplosionPosition";

    protected override void SetupSkillGraph(SkillGraph skillGraph)
    {
      ButtonState buttonState = skillGraph.AddState<ButtonState>("Input");
      SkillUiState skillUiState = skillGraph.AddState<SkillUiState>("Ui");
      BooleanSwitchState booleanSwitchState1 = skillGraph.AddState<BooleanSwitchState>("Should Show Preview");
      WhileTrueState whileTrueState1 = skillGraph.AddState<WhileTrueState>("Cooldown");
      BooleanSwitchState booleanSwitchState2 = skillGraph.AddState<BooleanSwitchState>("Should Update Cooldown");
      ModVarOverTimeState varOverTimeState = skillGraph.AddState<ModVarOverTimeState>("Update Cooldown");
      PullTowardsState pullTowardsState = skillGraph.AddState<PullTowardsState>("PullState");
      WaitState waitState1 = skillGraph.AddState<WaitState>("ThrowDurationState");
      WaitState waitState2 = skillGraph.AddState<WaitState>("PullDurationState");
      CheckAreaOfEffectState areaOfEffectState1 = skillGraph.AddState<CheckAreaOfEffectState>("CheckAffectedEntities");
      PlayAnimationState playAnimationState1 = skillGraph.AddState<PlayAnimationState>("TurnToAim");
      PlayAnimationState playAnimationState2 = skillGraph.AddState<PlayAnimationState>("PlaySkillAnim");
      ShowAoeState showAoeState1 = skillGraph.AddState<ShowAoeState>("Show AoE");
      BooleanSwitchState booleanSwitchState3 = skillGraph.AddState<BooleanSwitchState>("WhileShowAoe");
      UpdateAimDirAndMagnitude aimDirAndMagnitude = skillGraph.AddState<UpdateAimDirAndMagnitude>("UpdateAim");
      AudioState audioState = skillGraph.AddState<AudioState>("Vortex Aim Audio Loop");
      LockGraphsState lockGraphsState = skillGraph.AddState<LockGraphsState>("LockGraphsState");
      ConditionAction conditionAction = skillGraph.AddAction<ConditionAction>("CanStartSkill");
      OnEventAction onEventAction1 = skillGraph.AddAction<OnEventAction>("OnMatchStart");
      OnEventAction onEventAction2 = skillGraph.AddAction<OnEventAction>("OnPickup");
      OnEventAction onEventAction3 = skillGraph.AddAction<OnEventAction>("OnInterrupt");
      OnEventAction onEventAction4 = skillGraph.AddAction<OnEventAction>("OnOvertime");
      SpawnVfxAction spawnVfxAction = skillGraph.AddAction<SpawnVfxAction>("SpawnThrowVfx");
      PlayAudioAction playAudioAction1 = skillGraph.AddAction<PlayAudioAction>("Play vortex Voice Audio");
      PlayAudioAction playAudioAction2 = skillGraph.AddAction<PlayAudioAction>("Play vortex Shoot Audio");
      PlayAudioAction playAudioAction3 = skillGraph.AddAction<PlayAudioAction>("Play vortex Start Audio");
      SetVar<float> setVar1 = skillGraph.AddAction<SetVar<float>>("Reset Cooldown");
      SetVar<float> setVar2 = skillGraph.AddAction<SetVar<float>>("RestartCooldown");
      SetVar<float> setVar3 = skillGraph.AddAction<SetVar<float>>("ResetHopCharge");
      SetVar<bool> setVar4 = skillGraph.AddAction<SetVar<bool>>("SetActive");
      SetVar<bool> setVar5 = skillGraph.AddAction<SetVar<bool>>("SetNotActive");
      SetVar<bool> setVar6 = skillGraph.AddAction<SetVar<bool>>("SetOnCooldown");
      SetVar<bool> setVar7 = skillGraph.AddAction<SetVar<bool>>("SetNotOnCooldown");
      SetVar<bool> setVar8 = skillGraph.AddAction<SetVar<bool>>("SetOnCooldown");
      SetVar<bool> setVar9 = skillGraph.AddAction<SetVar<bool>>("SetNotOnCooldown");
      SetVar<bool> setVar10 = skillGraph.AddAction<SetVar<bool>>("SetShowAoeTrue");
      SetVar<bool> setVar11 = skillGraph.AddAction<SetVar<bool>>("SetShowAoeFalse");
      SetVar<JVector> setVar12 = skillGraph.AddAction<SetVar<JVector>>("setThrowStartPos");
      SetVar<JVector> setVar13 = skillGraph.AddAction<SetVar<JVector>>("setImplosionPosition");
      SkillVar<float> currentCooldown = skillGraph.AddVar<float>("CurrentCooldown");
      SkillVar<float> throwCharge = skillGraph.AddVar<float>("ThrowCharge");
      SkillVar<float> throwDistance = skillGraph.AddVar<float>("ThrowDistance");
      SkillVar<bool> isOnCooldown = skillGraph.AddVar<bool>("IsOnCooldown");
      SkillVar<bool> isActive = skillGraph.AddVar<bool>("IsActive");
      SkillVar<bool> skillVar1 = skillGraph.AddVar<bool>("ShouldTrigger");
      SkillVar<bool> showAoe = skillGraph.AddVar<bool>("ShowAoe");
      SkillVar<bool> canStartSkill = skillGraph.AddVar<bool>("CanStartSkill");
      SkillVar<JVector> throwDir = skillGraph.AddVar<JVector>("ThrowDir");
      SkillVar<JVector> implosionPosition = skillGraph.AddVar<JVector>("ImplosionPosition");
      SkillVar<JVector> throwStartPos = skillGraph.AddVar<JVector>("ThrowStartPos");
      SkillVar<UniqueId> skillVar2 = skillGraph.AddVar<UniqueId>("AffectedPlayers", true);
      PlayRazerAnimation playRazerAnimation1 = skillGraph.AddAction<PlayRazerAnimation>("PlayAimVortexRazer");
      PlayRazerAnimation playRazerAnimation2 = skillGraph.AddAction<PlayRazerAnimation>("PlayPlaceVortexRazer");
      PlayRazerAnimation playRazerAnimation3 = skillGraph.AddAction<PlayRazerAnimation>("ResetRazer");
      canStartSkill.Expression((Func<bool>) (() => !(bool) isOnCooldown && !(bool) isActive && !skillGraph.IsSkillUseDisabled() && !skillGraph.IsGraphLocked() && !skillGraph.OwnerHasBall()));
      throwDistance.Expression((Func<float>) (() => MathExtensions.Interpolate(this.minThrowDistance, this.maxThrowDistance, (float) throwCharge)));
      currentCooldown.Set(this.cooldown);
      skillGraph.AddEntryState((SkillState) buttonState);
      skillGraph.AddEntryState((SkillState) skillUiState);
      skillUiState.buttonType.Constant(this.button);
      skillUiState.coolDownLeftAmount.Expression((Func<float>) (() => (float) currentCooldown));
      skillUiState.fillAmount.Expression((Func<float>) (() => (this.cooldown - (float) currentCooldown) / this.cooldown));
      audioState.audioResourceName.Constant("GalenaSkillVortexAimLoop");
      playAudioAction1.audioResourceName.Constant("GalenaVoiceVortex");
      playAudioAction2.audioResourceName.Constant("GalenaSkillVortexShot");
      playAudioAction3.audioResourceName.Constant("GalenaSkillVortexStart");
      playRazerAnimation1.razerAnimType = RazerAnimType.Champion;
      playRazerAnimation1.animationIndex = 2;
      playRazerAnimation2.razerAnimType = RazerAnimType.Champion;
      playRazerAnimation2.animationIndex = 3;
      playRazerAnimation3.razerAnimType = RazerAnimType.Team;
      buttonState.buttonType.Constant(this.button);
      buttonState.buttonDownSubStates += (SkillState) booleanSwitchState1;
      buttonState.OnButtonUp += conditionAction.Do;
      buttonState.OnButtonUp += setVar11.Do;
      booleanSwitchState1.condition = (Func<bool>) (() => (bool) canStartSkill);
      BooleanSwitchState booleanSwitchState4 = booleanSwitchState1;
      booleanSwitchState4.OnEnter = booleanSwitchState4.OnEnter + setVar3.Do;
      booleanSwitchState1.OnTrue += setVar8.Do;
      booleanSwitchState1.OnTrue += setVar10.Do;
      booleanSwitchState1.OnTrue += playAudioAction3.Do;
      booleanSwitchState1.OnTrue += playRazerAnimation1.Do;
      booleanSwitchState1.OnFalse += setVar9.Do;
      booleanSwitchState1.OnFalse += setVar11.Do;
      booleanSwitchState1.WhileTrueSubState += (SkillState) aimDirAndMagnitude;
      booleanSwitchState1.WhileTrueSubState += (SkillState) playAnimationState1;
      booleanSwitchState1.WhileTrueSubState += (SkillState) playAnimationState2;
      booleanSwitchState1.WhileTrueSubState += (SkillState) lockGraphsState;
      playAnimationState1.animationType.Constant(AnimationStateType.TurnHeadToAim);
      playAnimationState2.animationType.Constant(AnimationStateType.SecondarySkill);
      aimDirAndMagnitude.aimDir = throwDir;
      aimDirAndMagnitude.aimMagnitude = throwCharge;
      conditionAction.condition = (Func<bool>) (() => (bool) canStartSkill);
      conditionAction.OnTrue += setVar12.Do;
      conditionAction.OnTrue += setVar4.Do;
      conditionAction.OnTrue += playAudioAction2.Do;
      conditionAction.OnTrue += playAudioAction1.Do;
      conditionAction.OnTrue += playRazerAnimation2.Do;
      setVar12.var = throwStartPos;
      setVar12.value.Expression((Func<JVector>) (() => skillGraph.GetPosition()));
      SetVar<JVector> setVar14 = setVar12;
      setVar14.Then = setVar14.Then + setVar13.Do;
      setVar13.var = implosionPosition;
      setVar13.value.Expression((Func<JVector>) (() => (JVector) throwStartPos + throwDir.Get() * (float) throwDistance));
      SetVar<JVector> setVar15 = setVar13;
      setVar15.Then = setVar15.Then + waitState1.Enter;
      setVar10.var = showAoe;
      setVar10.value.Set(true);
      SetVar<bool> setVar16 = setVar10;
      setVar16.Then = setVar16.Then + booleanSwitchState3.Enter;
      setVar11.var = showAoe;
      setVar11.value.Set(false);
      booleanSwitchState3.condition = (Func<bool>) (() => (bool) showAoe);
      booleanSwitchState3.WhileTrueSubState += (SkillState) showAoeState1;
      showAoeState1.showOnlyForLocalPlayer.Constant(!this.showAoePreviewForOtherPlayers);
      showAoeState1.aoe.Expression((Func<AreaOfEffect>) (() => this.aoe));
      showAoeState1.position.Expression((Func<JVector>) (() => skillGraph.GetPosition()));
      showAoeState1.lookDir.Expression((Func<JVector>) (() => (JVector) throwDir));
      showAoeState1.offset.Expression((Func<JVector>) (() => JVector.Forward * (float) throwDistance));
      showAoeState1.overrideOwnerLookDir = true;
      ShowAoeState showAoeState2 = showAoeState1;
      showAoeState2.SubState = showAoeState2.SubState + (SkillState) audioState;
      waitState1.duration.Expression((Func<float>) (() => this.throwDuration + this.activationDuration));
      WaitState waitState3 = waitState1;
      waitState3.OnEnter = waitState3.OnEnter + setVar1.Do;
      WaitState waitState4 = waitState1;
      waitState4.OnEnter = waitState4.OnEnter + spawnVfxAction.Do;
      waitState1.OnFinish += waitState2.Enter;
      spawnVfxAction.vfxPrefab = this.implosionVfx;
      spawnVfxAction.position.Expression((Func<JVector>) (() => (JVector) throwStartPos));
      waitState2.duration.Expression((Func<float>) (() => this.pullDuration));
      WaitState waitState5 = waitState2;
      waitState5.SubState = waitState5.SubState + (SkillState) areaOfEffectState1;
      waitState2.OnFinish += whileTrueState1.Enter;
      areaOfEffectState1.position.Expression((Func<JVector>) (() => (JVector) implosionPosition));
      areaOfEffectState1.aoe.Expression((Func<AreaOfEffect>) (() => this.aoe));
      areaOfEffectState1.includeEnemies = true;
      areaOfEffectState1.filterHit = (Func<GameEntity, bool>) (entity => entity.HasModifier(StatusModifier.Flying));
      areaOfEffectState1.hitEntities = skillVar2;
      CheckAreaOfEffectState areaOfEffectState2 = areaOfEffectState1;
      areaOfEffectState2.SubState = areaOfEffectState2.SubState + (SkillState) pullTowardsState;
      pullTowardsState.moveTowards.Expression((Func<JVector>) (() => (JVector) implosionPosition));
      pullTowardsState.pullSpeed.Expression((Func<float>) (() => this.pullSpeed));
      pullTowardsState.targetEntities = skillVar2;
      setVar1.var = currentCooldown;
      setVar1.value.Expression((Func<float>) (() => this.cooldown));
      whileTrueState1.condition = (Func<bool>) (() => (double) (float) currentCooldown > 1.40129846432482E-45);
      WhileTrueState whileTrueState2 = whileTrueState1;
      whileTrueState2.SubState = whileTrueState2.SubState + (SkillState) booleanSwitchState2;
      WhileTrueState whileTrueState3 = whileTrueState1;
      whileTrueState3.OnEnter = whileTrueState3.OnEnter + setVar6.Do;
      WhileTrueState whileTrueState4 = whileTrueState1;
      whileTrueState4.OnEnter = whileTrueState4.OnEnter + setVar5.Do;
      WhileTrueState whileTrueState5 = whileTrueState1;
      whileTrueState5.OnEnter = whileTrueState5.OnEnter + setVar11.Do;
      WhileTrueState whileTrueState6 = whileTrueState1;
      whileTrueState6.OnEnter = whileTrueState6.OnEnter + playRazerAnimation3.Do;
      WhileTrueState whileTrueState7 = whileTrueState1;
      whileTrueState7.OnExit = whileTrueState7.OnExit + setVar7.Do;
      booleanSwitchState2.condition = (Func<bool>) (() => !skillGraph.IsSkillUseDisabled());
      booleanSwitchState2.WhileTrueSubState += (SkillState) varOverTimeState;
      varOverTimeState.var = currentCooldown;
      varOverTimeState.amountPerSecond.Constant(-1f);
      varOverTimeState.targetValue = (SyncableValue<float>) 0.0f;
      setVar4.var = isActive;
      setVar4.value.Set(true);
      setVar5.var = isActive;
      setVar5.value.Set(false);
      setVar6.var = isOnCooldown;
      setVar6.value.Set(true);
      setVar7.var = isOnCooldown;
      setVar7.value.Set(false);
      setVar8.var = skillVar1;
      setVar8.value.Set(true);
      setVar9.var = skillVar1;
      setVar9.value.Set(false);
      setVar3.var = throwCharge;
      setVar3.value.Set(0.0f);
      onEventAction1.EventType = SkillGraphEvent.MatchStart;
      onEventAction1.OnTrigger += whileTrueState1.Enter;
      onEventAction2.EventType = SkillGraphEvent.SkillPickupCollected;
      onEventAction2.onTriggerDelegate = (Action) (() => currentCooldown.Set(SkillGraph.CalculateRefreshCooldown((float) currentCooldown, this.cooldown)));
      onEventAction3.EventType = SkillGraphEvent.Interrupt;
      onEventAction3.OnTrigger += buttonState.Reset;
      onEventAction3.OnTrigger += audioState.Exit;
      onEventAction3.OnTrigger += setVar9.Do;
      onEventAction3.OnTrigger += setVar11.Do;
      onEventAction4.EventType = SkillGraphEvent.Overtime;
      onEventAction4.OnTrigger += setVar2.Do;
      setVar2.var = currentCooldown;
      setVar2.value.Expression((Func<float>) (() => this.cooldown));
      SetVar<float> setVar17 = setVar2;
      setVar17.Then = setVar17.Then + whileTrueState1.Enter;
    }
  }
}
