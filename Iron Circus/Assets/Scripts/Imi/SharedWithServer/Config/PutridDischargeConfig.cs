// Decompiled with JetBrains decompiler
// Type: Imi.SharedWithServer.Config.PutridDischargeConfig
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 841B04D4-2E17-4B98-AC76-29D6D8A2480C
// Assembly location: D:\SteamLibrary\steamapps\common\Steel_Circus\sc_Data\Managed\Assembly-CSharp.dll

using Imi.Game;
using Imi.SharedWithServer.Game;
using Imi.SharedWithServer.Game.Skills;
using Jitter.LinearMath;
using System;
using UnityEngine;

namespace Imi.SharedWithServer.Config
{
  [CreateAssetMenu(fileName = "PutridDischargeConfig", menuName = "SteelCircus/SkillConfigs/PutridDischargeConfig")]
  public class PutridDischargeConfig : SkillGraphConfig
  {
    public Imi.SharedWithServer.ScEntitas.Components.ButtonType button;
    public string skillIcon;
    public float cooldown;
    public float castDuration;
    public float applyEffectAt;
    public AreaOfEffect aoe;
    public float aoeOffset;
    public float duration;
    public float moveSpeedDuringHold;
    [Header("Effects")]
    public float initialPushDuration;
    public float initialPushDistance;
    public int damage;
    public float slowAmount;
    public float slowDuration;
    public VfxPrefab puddlePrefab;
    public VfxPrefab pukePrefab;

    protected override void SetupSkillGraph(SkillGraph skillGraph)
    {
      ButtonState buttonState = skillGraph.AddState<ButtonState>("Input");
      SkillUiState skillUiState = skillGraph.AddState<SkillUiState>("SkillUi");
      WaitState waitState1 = skillGraph.AddState<WaitState>("StartCasting");
      ApplyStatusMofifierToOwnerState mofifierToOwnerState = skillGraph.AddState<ApplyStatusMofifierToOwnerState>("StopWhileCasting");
      ApplySpeedModToOwnerState speedModToOwnerState = skillGraph.AddState<ApplySpeedModToOwnerState>("ModSpeedState");
      BooleanSwitchState booleanSwitchState1 = skillGraph.AddState<BooleanSwitchState>("WhileCouldActivate");
      ShowAoeState showAoeState = skillGraph.AddState<ShowAoeState>("ShowAoePreview");
      PlayVfxState playVfxState = skillGraph.AddState<PlayVfxState>("ShowPuddleState");
      WaitState waitState2 = skillGraph.AddState<WaitState>("CastDurationState");
      WaitState waitState3 = skillGraph.AddState<WaitState>("WaitForApplyState");
      CheckAreaOfEffectState areaOfEffectState = skillGraph.AddState<CheckAreaOfEffectState>("CheckHitState");
      WhileTrueState whileTrueState1 = skillGraph.AddState<WhileTrueState>("CooldownState");
      BooleanSwitchState booleanSwitchState2 = skillGraph.AddState<BooleanSwitchState>("WhileUpdateCooldown");
      ModVarOverTimeState varOverTimeState = skillGraph.AddState<ModVarOverTimeState>("UpdateCooldown");
      LockGraphsState lockGraphsState = skillGraph.AddState<LockGraphsState>("BlockOtherSkills");
      PlayAnimationState playAnimationState1 = skillGraph.AddState<PlayAnimationState>("PlayAnimation");
      PlayAnimationState playAnimationState2 = skillGraph.AddState<PlayAnimationState>("TurnToAim");
      ConditionAction conditionAction = skillGraph.AddAction<ConditionAction>("CanActivateCheck");
      CheckAreaOfEffectAction areaOfEffectAction1 = skillGraph.AddAction<CheckAreaOfEffectAction>("AoeDamageCheck");
      ApplySpeedModEffectAction speedModEffectAction1 = skillGraph.AddAction<ApplySpeedModEffectAction>("ApplySpeedModOnExit");
      ApplySpeedModEffectAction speedModEffectAction2 = skillGraph.AddAction<ApplySpeedModEffectAction>("ApplySpeedModWhileInside");
      ModifyHealthAction modifyHealthAction = skillGraph.AddAction<ModifyHealthAction>("ApplyDamage");
      OnEventAction onEventAction1 = skillGraph.AddAction<OnEventAction>("OnMatchStart");
      OnEventAction onEventAction2 = skillGraph.AddAction<OnEventAction>("OnPickup");
      OnEventAction onEventAction3 = skillGraph.AddAction<OnEventAction>("OnOvertime");
      ApplyPushStunAction applyPushStunAction = skillGraph.AddAction<ApplyPushStunAction>("OnMatchStart");
      SpawnVfxAction spawnVfxAction = skillGraph.AddAction<SpawnVfxAction>("playPukeAnim");
      PlayAudioAction playAudioAction1 = skillGraph.AddAction<PlayAudioAction>("dischargeVoiceAimStartAudio");
      PlayAudioAction playAudioAction2 = skillGraph.AddAction<PlayAudioAction>("dischargeSpitAudio");
      SetVar<float> setVar1 = skillGraph.AddAction<SetVar<float>>("ResetCooldown");
      SetVar<float> setVar2 = skillGraph.AddAction<SetVar<float>>("RestartCooldown");
      SetVar<bool> setVar3 = skillGraph.AddAction<SetVar<bool>>("SetOnCooldownTrue");
      SetVar<bool> setVar4 = skillGraph.AddAction<SetVar<bool>>("SetOnCooldownFalse");
      SetVar<bool> setVar5 = skillGraph.AddAction<SetVar<bool>>("SetActiveTrue");
      SetVar<bool> setVar6 = skillGraph.AddAction<SetVar<bool>>("SetActiveFalse");
      SetVar<JVector> setVar7 = skillGraph.AddAction<SetVar<JVector>>("SetAimDir");
      SetVar<JVector> setVar8 = skillGraph.AddAction<SetVar<JVector>>("SetAoePositionBeforeHitCheck");
      ModifyMovementAction modifyMovementAction = skillGraph.AddAction<ModifyMovementAction>("turnToAimDir");
      SkillVar<JVector> aoePosition = skillGraph.AddVar<JVector>("AoePosition");
      SkillVar<JVector> aimDir = skillGraph.AddVar<JVector>("AimDir");
      SkillVar<UniqueId> skillVar1 = skillGraph.AddVar<UniqueId>("HitEntities", true);
      SkillVar<UniqueId> skillVar2 = skillGraph.AddVar<UniqueId>("ExitHitEntities", true);
      SkillVar<float> currentCooldown = skillGraph.AddVar<float>("CurrentCooldown");
      SkillVar<bool> isActive = skillGraph.AddVar<bool>("IsActive");
      SkillVar<bool> isOnCooldown = skillGraph.AddVar<bool>("IsOnCooldown");
      SkillVar<bool> canActivate = skillGraph.AddVar<bool>("CanActivate");
      canActivate.Expression((Func<bool>) (() => !(bool) isOnCooldown && !(bool) isActive && !skillGraph.IsSkillUseDisabled() && !skillGraph.IsGraphLocked() && !skillGraph.OwnerHasBall()));
      currentCooldown.Set(this.cooldown);
      skillGraph.AddEntryState((SkillState) buttonState);
      skillGraph.AddEntryState((SkillState) skillUiState);
      skillUiState.buttonType.Constant(this.button);
      skillUiState.iconName.Constant(this.skillIcon);
      skillUiState.fillAmount.Expression((Func<float>) (() => (float) (1.0 - (double) (float) currentCooldown / (double) this.cooldown)));
      skillUiState.coolDownLeftAmount.Expression((Func<float>) (() => (float) currentCooldown));
      playAudioAction1.audioResourceName.Constant("AcridVoiceSkillDischargeAimStart");
      playAudioAction2.audioResourceName.Constant("AcridSkillDischargeSpit");
      buttonState.buttonType.Constant(this.button);
      buttonState.buttonDownSubStates += (SkillState) booleanSwitchState1;
      booleanSwitchState1.condition = (Func<bool>) (() => (bool) canActivate);
      BooleanSwitchState booleanSwitchState3 = booleanSwitchState1;
      booleanSwitchState3.OnUpdate = booleanSwitchState3.OnUpdate + setVar7.Do;
      booleanSwitchState1.WhileTrueSubState += (SkillState) showAoeState;
      booleanSwitchState1.WhileTrueSubState += (SkillState) playAnimationState1;
      booleanSwitchState1.WhileTrueSubState += (SkillState) speedModToOwnerState;
      booleanSwitchState1.WhileTrueSubState += (SkillState) lockGraphsState;
      booleanSwitchState1.OnTrue += playAudioAction1.Do;
      booleanSwitchState1.OnTrue += playAnimationState2.Enter;
      BooleanSwitchState booleanSwitchState4 = booleanSwitchState1;
      booleanSwitchState4.OnExit = booleanSwitchState4.OnExit + conditionAction.Do;
      showAoeState.aoe.Expression((Func<AreaOfEffect>) (() => this.aoe));
      showAoeState.trackOwnerPosition = (SyncableValue<bool>) true;
      showAoeState.offset.Expression((Func<JVector>) (() => JVector.Forward * this.aoeOffset));
      setVar7.var = aimDir;
      setVar7.value.Expression((Func<JVector>) (() => skillGraph.GetAimInputOrLookDir()));
      speedModToOwnerState.modifier.Expression((Func<float>) (() => (float) ((double) this.moveSpeedDuringHold / (double) skillGraph.GetOwner().championConfig.value.maxSpeed - 1.0)));
      conditionAction.condition = (Func<bool>) (() => (bool) canActivate);
      conditionAction.OnTrue += waitState1.Enter;
      conditionAction.OnTrue += waitState3.Enter;
      conditionAction.OnTrue += setVar8.Do;
      conditionAction.OnTrue += setVar5.Do;
      setVar5.var = isActive;
      setVar5.value = (SyncableValue<bool>) true;
      setVar8.var = aoePosition;
      setVar8.value.Expression((Func<JVector>) (() => skillGraph.GetPosition() + aimDir.Get() * this.aoeOffset));
      SetVar<JVector> setVar9 = setVar8;
      setVar9.Then = setVar9.Then + playVfxState.Enter;
      SetVar<JVector> setVar10 = setVar8;
      setVar10.Then = setVar10.Then + spawnVfxAction.Do;
      waitState1.duration.Expression((Func<float>) (() => this.castDuration));
      WaitState waitState4 = waitState1;
      waitState4.SubState = waitState4.SubState + (SkillState) mofifierToOwnerState;
      WaitState waitState5 = waitState1;
      waitState5.SubState = waitState5.SubState + (SkillState) lockGraphsState;
      WaitState waitState6 = waitState1;
      waitState6.OnEnter = waitState6.OnEnter + modifyMovementAction.Do;
      WaitState waitState7 = waitState1;
      waitState7.OnEnter = waitState7.OnEnter + setVar1.Do;
      WaitState waitState8 = waitState1;
      waitState8.OnEnter = waitState8.OnEnter + playAudioAction2.Do;
      modifyMovementAction.type = ModifyMovementAction.ValueType.SetLookDir;
      modifyMovementAction.lookDir.Expression((Func<JVector>) (() => (JVector) aimDir));
      setVar1.var = currentCooldown;
      setVar1.value.Expression((Func<float>) (() => this.cooldown));
      mofifierToOwnerState.modifier = StatusModifier.BlockMove | StatusModifier.BlockHoldBall;
      playAnimationState1.animationType.Constant(AnimationStateType.PrimarySkill);
      playAnimationState2.animationType.Constant(AnimationStateType.TurnHeadToAim);
      waitState3.duration.Expression((Func<float>) (() => this.applyEffectAt));
      waitState3.OnFinish += areaOfEffectAction1.Do;
      WaitState waitState9 = waitState3;
      waitState9.OnExit = waitState9.OnExit + playAnimationState2.Exit;
      areaOfEffectAction1.aoe.Expression((Func<AreaOfEffect>) (() => this.aoe));
      areaOfEffectAction1.position.Expression((Func<JVector>) (() => (JVector) aoePosition));
      areaOfEffectAction1.lookDir.Expression((Func<JVector>) (() => (JVector) aimDir));
      areaOfEffectAction1.hitEntities = skillVar1;
      areaOfEffectAction1.filterHit = (Func<GameEntity, bool>) (entity => entity.HasEffect(StatusEffectType.Invisible) || entity.HasModifier(StatusModifier.Flying));
      areaOfEffectAction1.includeEnemies = true;
      CheckAreaOfEffectAction areaOfEffectAction2 = areaOfEffectAction1;
      areaOfEffectAction2.Then = areaOfEffectAction2.Then + modifyHealthAction.Do;
      CheckAreaOfEffectAction areaOfEffectAction3 = areaOfEffectAction1;
      areaOfEffectAction3.Then = areaOfEffectAction3.Then + applyPushStunAction.Do;
      CheckAreaOfEffectAction areaOfEffectAction4 = areaOfEffectAction1;
      areaOfEffectAction4.Then = areaOfEffectAction4.Then + waitState2.Enter;
      modifyHealthAction.targetEntities = skillVar1;
      modifyHealthAction.value.Expression((Func<int>) (() => -this.damage));
      applyPushStunAction.targetEntities = skillVar1;
      applyPushStunAction.pushDistance.Expression((Func<float>) (() => this.initialPushDistance));
      applyPushStunAction.pushDuration.Expression((Func<float>) (() => this.initialPushDuration));
      applyPushStunAction.getPushDir = (Func<GameEntity, JVector>) (entity => entity.transform.Position2D - (JVector) aoePosition);
      waitState2.duration.Expression((Func<float>) (() => this.duration));
      WaitState waitState10 = waitState2;
      waitState10.SubState = waitState10.SubState + (SkillState) areaOfEffectState;
      WaitState waitState11 = waitState2;
      waitState11.OnExit = waitState11.OnExit + whileTrueState1.Enter;
      WaitState waitState12 = waitState2;
      waitState12.OnExit = waitState12.OnExit + setVar6.Do;
      WaitState waitState13 = waitState2;
      waitState13.OnExit = waitState13.OnExit + playVfxState.Exit;
      setVar6.var = isActive;
      setVar6.value = (SyncableValue<bool>) false;
      float num = 0.2f;
      areaOfEffectState.aoe.Expression((Func<AreaOfEffect>) (() => this.aoe));
      areaOfEffectState.position.Expression((Func<JVector>) (() => (JVector) aoePosition));
      areaOfEffectState.lookDir.Expression((Func<JVector>) (() => (JVector) aimDir));
      areaOfEffectState.includeEnemies = true;
      areaOfEffectState.filterHit = (Func<GameEntity, bool>) (entity => entity.HasEffect(StatusEffectType.Invisible) || entity.HasModifier(StatusModifier.Flying));
      areaOfEffectState.hitEntities = skillVar1;
      areaOfEffectState.repeatedHitCooldown = num;
      areaOfEffectState.hitExitEntities = skillVar2;
      areaOfEffectState.OnHit += speedModEffectAction2.Do;
      areaOfEffectState.OnExitHit += speedModEffectAction1.Do;
      speedModEffectAction2.targetEntities = skillVar1;
      speedModEffectAction2.duration = (SyncableValue<float>) num;
      speedModEffectAction2.moveSpeedModifier.Expression((Func<float>) (() => this.slowAmount));
      speedModEffectAction1.targetEntities = skillVar2;
      speedModEffectAction1.duration.Expression((Func<float>) (() => this.slowDuration));
      speedModEffectAction1.moveSpeedModifier.Expression((Func<float>) (() => this.slowAmount));
      playVfxState.parentToOwner = false;
      playVfxState.vfxPrefab = this.puddlePrefab;
      playVfxState.position.Expression((Func<JVector>) (() => aoePosition.Get() + aimDir.Get() * (this.aoe.deadZone + (float) (((double) this.aoe.radius - (double) this.aoe.deadZone) * 0.5))));
      playVfxState.lookDir.Expression((Func<JVector>) (() => (JVector) aimDir));
      playVfxState.args = (object) this.aoe;
      playVfxState.deferDestructionToEffect = true;
      whileTrueState1.condition = (Func<bool>) (() => (double) (float) currentCooldown > 0.0);
      WhileTrueState whileTrueState2 = whileTrueState1;
      whileTrueState2.SubState = whileTrueState2.SubState + (SkillState) booleanSwitchState2;
      WhileTrueState whileTrueState3 = whileTrueState1;
      whileTrueState3.OnEnter = whileTrueState3.OnEnter + setVar3.Do;
      WhileTrueState whileTrueState4 = whileTrueState1;
      whileTrueState4.OnExit = whileTrueState4.OnExit + setVar4.Do;
      setVar3.var = isOnCooldown;
      setVar3.value = (SyncableValue<bool>) true;
      setVar4.var = isOnCooldown;
      setVar4.value = (SyncableValue<bool>) false;
      booleanSwitchState2.condition = (Func<bool>) (() => !skillGraph.IsSkillUseDisabled());
      booleanSwitchState2.WhileTrueSubState += (SkillState) varOverTimeState;
      varOverTimeState.var = currentCooldown;
      varOverTimeState.amountPerSecond.Constant(-1f);
      varOverTimeState.targetValue = (SyncableValue<float>) 0.0f;
      onEventAction1.OnTrigger += whileTrueState1.Enter;
      onEventAction1.EventType = SkillGraphEvent.MatchStart;
      onEventAction2.EventType = SkillGraphEvent.SkillPickupCollected;
      onEventAction2.onTriggerDelegate = (Action) (() => currentCooldown.Set(SkillGraph.CalculateRefreshCooldown((float) currentCooldown, this.cooldown)));
      onEventAction3.EventType = SkillGraphEvent.Overtime;
      onEventAction3.OnTrigger += setVar2.Do;
      setVar2.var = currentCooldown;
      setVar2.value.Expression((Func<float>) (() => this.cooldown));
      SetVar<float> setVar11 = setVar2;
      setVar11.Then = setVar11.Then + whileTrueState1.Enter;
      spawnVfxAction.vfxPrefab = this.pukePrefab;
      spawnVfxAction.parentToOwner = true;
    }
  }
}
